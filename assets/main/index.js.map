{"version":3,"sources":["../file:/Users/nexidan/Sources/DeJure/assets/src/routes/AbstractRoute/file:/Users/nexidan/Sources/DeJure/assets/src/routes/AbstractRoute/AbstractRoute.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/AbstractRoute/components/file:/Users/nexidan/Sources/DeJure/assets/src/routes/AbstractRoute/components/AbstractScreen.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/states/AbstractState/file:/Users/nexidan/Sources/DeJure/assets/src/states/AbstractState/AbstractState.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/addMeshCollider.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Assets/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Assets/data/assets.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/Biome.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/BiomeObject.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/biomeObjectsPrefabs.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/biomeSizeMaps.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/BiomeTile.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/BiomeTileRiver.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/biomeTiles.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/components/BiomeTileWater.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/decorators/file:/Users/nexidan/Sources/DeJure/assets/src/libs/decorators/bound.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/BuildCard/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/BuildCard/components/BuildCard.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/components/Building.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/components/BuildingComponent.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/data/buildingPrefabs.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/components/BuildingPreview.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/data/BuildingsDB.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/BuildRoute/file:/Users/nexidan/Sources/DeJure/assets/src/routes/BuildRoute/BuildRoute.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/BuildRoute/components/file:/Users/nexidan/Sources/DeJure/assets/src/routes/BuildRoute/components/BuildScreen.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/components/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/components/Button.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/components/ButtonAction.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/components/ButtonDisabled.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/components/ButtonTurn.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/decorators/file:/Users/nexidan/Sources/DeJure/assets/src/libs/decorators/cached.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Chunk/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Chunk/components/Chunk.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Chunk/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Chunk/components/ChunkNewButton.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/clamp.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/decorators/file:/Users/nexidan/Sources/DeJure/assets/src/libs/decorators/cocos.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/components/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/components/ComponentPath.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/data/consts.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/consts.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldCamera/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldCamera/data/consts.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/World/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/World/data/consts.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/data/consts.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/states/TurnState/data/file:/Users/nexidan/Sources/DeJure/assets/src/states/TurnState/data/consts.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Hex/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Hex/data/consts.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/data/consts.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/createFactory.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/createPrefabNode.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/CustomPostProcess/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/CustomPostProcess/components/CustomBlur.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/CustomPostProcess/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/CustomPostProcess/data/CustomBlurPass.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/degreeToRadian.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Di/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Di/components/DiTemplate.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Di/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Di/components/DiWorld.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/easeOutSine.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/EBiome.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/EBiomeSize.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Building/data/EBuilding.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Button/data/EButtonSize.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/data/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/data/EEventName.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/data/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/data/ELayer.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldCamera/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldCamera/data/EMoveType.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/data/EResource.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/AbstractRoute/data/file:/Users/nexidan/Sources/DeJure/assets/src/routes/AbstractRoute/data/ERouteName.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/WorldRoute/data/file:/Users/nexidan/Sources/DeJure/assets/src/routes/WorldRoute/data/EWorldRouteMode.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/factoryChildNode.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/factoryComponent.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/factorySprite.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/factoryTemplateComponent.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/filterNullable.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/findBiomeNeighbors.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/findMinHeight.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/findWaterNeighbors.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/fromQuat.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/fromVec3.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/fromVec3ToVec2.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/states/GameState/file:/Users/nexidan/Sources/DeJure/assets/src/states/GameState/GameState.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateBiomeObject.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateBiomeTile.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/generateChunk.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateClay.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateForest.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateForestRocks.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateHill.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateLake.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateMountain.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateRiver.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateRocks.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateSand.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/generateSea.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/generateTile.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/generateTileBaseHeight.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/generateTileHeight.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/center/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/center/generateWorldCenterChunk.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/center/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/center/generateWorldCenterTile.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/getAllComponents.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/getAllPropertyDescriptors.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/helpers/getBiomeActualSize.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/BuildRoute/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/routes/BuildRoute/helpers/getBuildRoute.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/WorldRoute/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/routes/WorldRoute/helpers/getWorldRoute.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/guid.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/hashCode.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/hexagon/file:/Users/nexidan/Sources/DeJure/assets/src/libs/hexagon/Hexagon.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/hexagon/file:/Users/nexidan/Sources/DeJure/assets/src/libs/hexagon/HexagonChunk.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/hexagon/file:/Users/nexidan/Sources/DeJure/assets/src/libs/hexagon/HexagonMap.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/hexagon/file:/Users/nexidan/Sources/DeJure/assets/src/libs/hexagon/HexagonTile.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/hexColor.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/hexRadius.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/i18n/file:/Users/nexidan/Sources/DeJure/assets/src/libs/i18n/i18n.ts","../file:/Users/nexidan/Sources/DeJure/assets/vendors/mobx/file:/Users/nexidan/Sources/DeJure/assets/vendors/mobx/index.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/index.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/center/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/center/isNearCenter.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/isNumber.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/isObject.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/isPromise.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/random/file:/Users/nexidan/Sources/DeJure/assets/src/libs/random/isRandomChance.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/listen.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/LoadingUi/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/LoadingUi/components/LoadingUi.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/loadResources.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/loadResourcesDir.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/components/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/components/Observer.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/PauseRoute/file:/Users/nexidan/Sources/DeJure/assets/src/routes/PauseRoute/PauseRoute.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/PauseRoute/components/file:/Users/nexidan/Sources/DeJure/assets/src/routes/PauseRoute/components/PauseScreen.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Photobooth/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Photobooth/components/Photobooth.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Photobooth/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Photobooth/components/PhotoboothIcon.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/helpers/prepareMaterial.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/async/file:/Users/nexidan/Sources/DeJure/assets/src/libs/async/promiseTimeout.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/random/file:/Users/nexidan/Sources/DeJure/assets/src/libs/random/randomChance.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/random/file:/Users/nexidan/Sources/DeJure/assets/src/libs/random/randomFromArray.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/random/file:/Users/nexidan/Sources/DeJure/assets/src/libs/random/randomFromRange.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/biomes/randomizeBiomeSize.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/components/ResourceAmount.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/components/ResourceCard.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/components/ResourceComponent.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/data/ResourcesDB.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/ResourcesRoute/file:/Users/nexidan/Sources/DeJure/assets/src/routes/ResourcesRoute/ResourcesRoute.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/ResourcesRoute/components/file:/Users/nexidan/Sources/DeJure/assets/src/routes/ResourcesRoute/components/ResourcesScreen.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Resource/data/ResourcesStart.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/states/ResourcesState/file:/Users/nexidan/Sources/DeJure/assets/src/states/ResourcesState/ResourcesState.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/file:/Users/nexidan/Sources/DeJure/assets/src/routes/router.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/semaphore/file:/Users/nexidan/Sources/DeJure/assets/src/libs/semaphore/Semaphore.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/setNodeLayer.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldGenerator/helpers/sortCoords.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/states/file:/Users/nexidan/Sources/DeJure/assets/src/states/state.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/components/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/components/TemplateComponent.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/components/Tile.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/helpers/tileHasBiomeObjects.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/helpers/tileHasBiomeTiles.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/helpers/tileNotWater.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/components/TileTest.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/features/Tile/helpers/tileWithoutObject.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/toCocosEnum.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/toFixedNumber.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/toQuat.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/file:/Users/nexidan/Sources/DeJure/assets/src/libs/math/toVec3.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/states/TurnState/file:/Users/nexidan/Sources/DeJure/assets/src/states/TurnState/TurnState.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/Ui.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/Ui3D.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/UiActive.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/UiAnimation/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/UiAnimation/components/UiActiveAnimate.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/UiBackground.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/Ui/components/UiLabel.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/UiAnimation/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/UiAnimation/components/UiOpacityAnimate.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/UiAnimation/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/UiAnimation/components/UiPositionAnimate.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/file:/Users/nexidan/Sources/DeJure/assets/src/libs/cocos/helpers/updateNodeLayout.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/async/file:/Users/nexidan/Sources/DeJure/assets/src/libs/async/wait.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/libs/async/file:/Users/nexidan/Sources/DeJure/assets/src/libs/async/waitForFrame.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/file:/Users/nexidan/Sources/DeJure/assets/src/features/Biome/data/waterTiles.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/World/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/World/components/World.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldCamera/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldCamera/components/WorldCamera.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/WorldRoute/file:/Users/nexidan/Sources/DeJure/assets/src/routes/WorldRoute/WorldRoute.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/routes/WorldRoute/components/file:/Users/nexidan/Sources/DeJure/assets/src/routes/WorldRoute/components/WorldScreen.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/states/WorldState/file:/Users/nexidan/Sources/DeJure/assets/src/states/WorldState/WorldState.ts","../file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldUi/components/file:/Users/nexidan/Sources/DeJure/assets/src/features/WorldUi/components/WorldUi.ts"],"names":["AbstractRoute","hasUiOverlay","hasUiHeader","_proto","prototype","initialize","options","Object","assign","makeObservable","destroy","_RF","pop","AbstractScreen","_class","_Observer","_inheritsLoose","apply","arguments","opacity","node","addComponent","UIOpacity","animate","UiOpacityAnimate","duration","easing","_createClass","key","get","router","getRoute","routeName","Observer","_applyDecoratedDescriptor","computed","getOwnPropertyDescriptor","AbstractState","state","_data","addMeshCollider","meshes","getAllComponents","MeshRenderer","colliders","_iterator","_createForOfIteratorHelperLoose","_step","done","mesh","value","collider","MeshCollider","isTrigger","Boolean","push","LOAD_METHOD_REGEX","Assets","wait","materials","Map","sprites","prefabs","fonts","waitAssets","err","console","error","map","names","name","resource","Error","Array","isArray","getMaterials","getSprites","getPrefabs","getFonts","_waitAssets","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this","promises","methods","wrap","_callee$","_context","prev","next","concat","getOwnPropertyNames","getPrototypeOf","forEach","method","test","func","Promise","all","stop","loadMaterials","_loadMaterials","_callee2","material","_callee2$","_context2","loadResourcesDir","Material","sent","prepareMaterial","set","loadSprites","_loadSprites","_callee3","_iterator2","_step2","sprite","_callee3$","_context3","SpriteFrame","loadPrefabs","_loadPrefabs","_callee4","_iterator3","_step3","prefab","_callee4$","_context4","Prefab","data","loadFonts","_loadFonts","_callee5","_iterator4","_step4","font","_callee5$","_context5","Font","bound","assets","Biome","_dec","action","_len","length","args","_key","call","renderNode","_initializerDefineProperty","_descriptor","_assertThisInitialized","tile","onTap","_ref","render","createRenderNode","observable","configurable","enumerable","writable","initializer","BiomeObject","ccclass","_class2","_Biome","createPrefabNode","parent","rotation","rotate","Vec3","undefined","scale","castShadows","receiveShadows","onLoad","setPosition","groundY","_biomeObjectPrefabs$t","biomeObjectPrefabs","_biomeObjectPrefabs","EBiomeObject","Mountain","Forest","ForestRocks","size","EBiomeSize","Tiny","Rocks","_ref2","small","Hill","biomeSizeMaps","_biomeSizeMaps","_EBiomeObject$Forest","Small","Medium","Large","_EBiomeObject$Mountai","EBiomeTile","Clay","_EBiomeTile$Clay","_EBiomeObject$ForestR","_EBiomeObject$Rocks","Sand","_EBiomeTile$Sand","Lake","_EBiomeTile$Lake","Sea","_EBiomeTile$Sea","River","_EBiomeTile$River","MIN_DIRT_HEIGHT","BiomeTile","biomeY","position","rockY","dirtY","_assets$getPrefabs","hexBase","hex","_assets$getMaterials","rock","dirt","_this$data","_this$data2","Math","min","height","MAX_BIOME_TILE_HEIGHT","TILE_HEIGHT_MULTIPLIER","baseHeight","cached","RIVER_PREFABS","BiomeTileRiver","_BiomeTile","riverPrefab","groundMaterial","waterMaterial","riverMaterial","topLeft","_RIVER_PREFABS$this$p","prefabKey","from","defaultFromNeighbor","HexagonTile","defaultFrom","HEX_OPTIONS","fromNeighbor","toVec3","center","Vec2","positionX","positionZ","subtract","angle","signAngle","round","toDegree","to","directions","filterNullable","coords","sortedNeighbors","getOrderedNeigbors","neighbor","tilesMap","worldState","isDirection","some","river","equals","heightDiff","abs","self","_tile$self$data","biomeTile","biomeObject","biomeTileKey","biomeObjectKey","isRiver","isWater","waterTiles","includes","_currentBiomeTile$dat","_currentBiomeTile$dat2","_biomeTile$data","_biomeTile$data2","_biomeTile$data3","currentBiomeTile","isOtherRiver","id","fromId","isToDirection","toCoords","reduce","result","item","_this2","directionsTiles","neighbors","neigbor","_tile$self$data$biome","biomeTiles","_biomeTiles","BiomeTileWater","_target","propertyKey","descriptor","TypeError","binded","bind","defineProperty","BuildCard","_dec2","property","type","toCocosEnum","EBuilding","_dec3","Sprite","_dec4","PhotoboothIcon","_dec5","UiLabel","_dec6","Node","_dec7","Label","_dec8","_dec9","_dec10","_dec11","_class3","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","onClick","buildingData","buildOptions","iconScale","icon","shootPrefab","title","string","coloredBg","color","iconColor","resources","keys","price","_i","_resources","count","factoryTemplateComponent","ResourceAmount","resourcesBg","getComponent","priceColor","border","active","selected","buildedCount","addCount","buildQueueCount","allCount","updateNodeLayout","building","onCardClick","buildingKey","_this$onClick","_this$buildingData","resourcesState","priceEntries","entries","affordable","_i2","_priceEntries","_priceEntries$_i","currentResource","NEGATIVE_COLOR","POSITIVE_COLOR","BuildingsDB","template","Building","_BuildingComponent","onBuildingTap","event","_this$onTap","BuildingComponent","UI_3D_BUTTON_BORDERS","turnsLeftUi","_this$building","isConstructing","props","clamp","constructionStepsLeft","buildingHeight","factoryComponent","Ui3D","progress","BUILD_PROGRESS_MAX","buildingDb","turns","turnsLeft","constructionSpeed","ceil","parseFloat","toFixed","step","BUILD_PROGRESS_STAGES","stageIndex","floor","BUILDING_ROTATION_INIT","_meshes$reduce","max","model","bounds","worldBounds","minVec","maxVec","getBoundary","y","buildingPrefabs","_buildingPrefabs","Castle","Lumberjack","Sawmill","Quarry","BuildingPreview","rotateButton","runInAction","_extends","_BuildingsDB","EResource","Log","_resources2","hexColor","_price","tileTest","tileWithoutObject","tileNotWater","neighborsTiles","tileHasBiomeObjects","_resources3","Stone","_price2","Plank","_resources4","_price3","BuildRoute","ref","_AbstractRoute","ERouteName","Build","screen","BuildScreen","disposeBuildingListen","disposeBuildingPositionListen","zoomIn","buildingTile","camera","DiWorld","worldCamera","navigate","zooming","fromVec3ToVec2","getWorldPosition","zoomOut","serialize","buildingCoords","reaction","_this$disposeBuilding","_this$disposeBuilding2","_tilesMap$get","buildingRotate","isBuildingPositionMode","isBuildingPreviewMode","BUILDINGS","shallow","_AbstractScreen","_BUILDINGS","card","buildingsNode","onSelectBuilding","buildCards","route","onBuildClick","navigateBack","buildingPreview","onCancelClick","isNavigated","World","_this$route","selectedBuilding","_this$route2","_this$route3","Button","button","clickEventHandler","EventHandler","target","component","__classname__","handler","clickEvents","_Button","getComponentInChildren","AvailableSizes","EButtonSize","S80","S100","ButtonSizeMap","_ButtonSizeMap","leftBg","rightBg","iconOnlyBg","contentSize","DISABLED_COLOR","Color","DISABLED_LABEL_COLOR","r","g","b","ButtonAction","displayOrder","CCString","visible","label","CCInteger","CCBoolean","iconComponent","labelComponent","buttonComponent","bgComponent","bgNode","disabledBgNode","__preload","slice","transition","Transition","SCALE","zoomScale","BUTTON_TRANSITION_SCALE","BUTTON_TRANSITION_TIME","_ButtonSizeMap$this$s","factoryChildNode","_assets$getSprites","startSprite","endSprite","UiBackground","clone","castShadow","iconBgRotated","bgSprite","layer","ELayer","UI_2D_SHADOW_CAST","bgTransform","UITransform","width","hexRadius","factorySprite","wrapperNode","wrapperLayout","Layout","Type","HORIZONTAL","resizeMode","ResizeMode","CONTAINER","spacingX","wrapperWidget","Widget","isAlignHorizontalCenter","horizontalCenter","isAlignVerticalCenter","verticalCenter","iconNode","iconTransform","iconSize","labelNode","enableWrapText","labelColor","fontSize","lineHeight","isEnabled","disabled","interactable","instantiate","disabledBg","BlockInputEvents","addChild","_this$uiTransform$hei","_this$uiTransform","uiTransform","sizes","sort","a","i","WHITE","ButtonDisabled","ComponentPath","isDisabled","exec","isReversed","ROTATE_DURATION","ButtonTurn","fullTurn","turnAnimation","worldUi","contentNode","widget","bottom","updateAlignment","turnState","date","tween","outer","start","turn","startTurn","getter","Chunk","tiles","chunksMap","add","draw","ChunkNewButton","hexHeight","generate","tileData","Tile","chunk","destroyAllChildren","generateChunk","setWorldPosition","ui","TILE_BASE_HEIGHT","TILE_SEA_LEVEL","_getBuildRoute","isActive","getBuildRoute","isChunkMode","Infinity","_decorator","Enum","CCClass","Attr","setClassAttr","targetComponents","realComponent","componentProperties","components","constructor","properties","getAllPropertyDescriptors","filter","desc","BUILD_PROGRESS_LIMITS","LIMITS","CAMERA_POSITION_OFFSET","CAMERA_ROTATION_OFFSET","TARGET_ROTATE_OFFSET","MOVE_DIVIDER","ZOOM_MOVE_INFLUENCE","DOUBLE_TOUCH_TIME","MOVE_SAFEZONE","IMPULSE_DURATION","IMPULSE_STRENGTH","IMPULSE_LENGTH","DEFAULT_NAVIGATE_DURATION","ROTATE_SPEED","FIXED_ROTATE_LIMIT","FIXED_POSITION_LIMIT","TAP_MAX_MOVED_TIMES","TAP_TIME","MAX_TOUCH_SIZE","WORLD_CENTER","WORLD_CENTER_HEIGHT","START_YEAR","START_MONTH","MONTHS","YEAR_LENGTH","HEX_HEIGHT","HEX_RADIUS","TILE_HEIGHT_LIMITS","createFactory","init","instance","isPromise","resolve","then","v","_temp","getComponentsInChildren","index","setSharedMaterial","setScale","setRotationFromEuler","shadowCastingMode","receiveShadow","on","EEventName","Tap","menu","executeInEditMode","CustomBlur","RenderTexture","EffectAsset","_postProcess$PostProc","_material","_blurParams","Vec4","updateMaterial","mask","setProperty","blurParams","effectAsset","_effectAsset","builder","rendering","getCustomPipeline","insertPass","CustomBlurPass","postProcess","BlitScreenPass","_this$_material","reset","x","PostProcessSetting","FORMAT","gfx","Format","RGBA8","_postProcess$SettingP","settingClass","outputNames","checkEnable","enable","disablePostProcessForDebugView","setting","_ppl","passContext","context","cameraID","getCameraUniqueID","clearBlack","input","lastPass","slotName","iterations","updatePassViewPort","addRenderPass","setPassInput","addRasterView","blitScreen","version","getSetting","SettingPass","HALF_CIRCLE","degreeToRadian","degree","PI","DiTemplate","_Component","getTemplate","templates","find","Component","DI_MAP_DATA","WorldCamera","WorldUi","DI_MAP","Comp","LIMTIS","easeOutSine","sin","BIOME_OBJECT_KEYS","values","BIOME_TILE_KEYS","Layers","EMoveType","EWorldRouteMode","setup","spriteFrame","trim","sizeMode","SizeMode","CUSTOM","SIMPLE","arr","findBiomeNeighbors","biomeKey","sizeMap","isObject","biomeNeighbors","biome","_getBiomeActualSize","getBiomeActualSize","bordersSize","diff","findMinHeight","findWaterNeighbors","fromQuat","quat","getEulerAngles","fromVec3","vec","z","GameState","TurnState","WorldState","ResourcesState","generateBiomeObject","base","generateMountain","generateRocks","generateForest","generateForestRocks","generateHill","generateBiomeTile","generateSea","_result$biomeTile","generateRiver","chunkTiles","_result$biomeTile$dat","generateLake","_result","isSea","minHeight","_generateSand","generateSand","generateClay","BIOME_PRIORITY","_BIOME_PRIORITY","calcNeighborsScore","_neighbor$self$data","score","HexagonChunk","sortedCoords","sortCoords","tileCoords","fakeTile","nearCoords","alreadyAdded","generateTile","isNearWorldCenter","clays","clay","chance","isRandomChance","guid","randomizeBiomeSize","forests","forest","randomFromRange","_forestRocks$","forestRocks","forestRock","hills","hill","generateNewLake","seas","lakes","lake","generateNewMountain","mountains","mountain","randomizeRiverSize","randomizeRiverHeight","_river$biome$data","randomizeFrom","candidates","randomFromArray","randomizeTo","baseCoords","toLength","straight","subtract3f","negative","add3f","distance","straightNeigbor","_loop","rivers","waters","water","every","riverTo","_river$biome$data2","isEnding","riverFrom","_river$biome$data3","_riverFrom$biome$data","_ref3","riverFromToIndex","findIndex","_base$biomeTile","rocks","sands","sand","MIN_SEA_DISTANCE","hasSea","_hex$self$data$biomeT","riversSize","sea","generateTileHeight","generateTileBaseHeight","BASE_TILE_HEIGHTS","CHANCES","fn","getMainNeighbor","_main$height","main","randomChance","resultHeight","waterHeight","generateWorldCenterChunk","generateWorldCenterTile","getComponents","obj","level","getOwnPropertyDescriptors","biomeId","visited","calculate","_tile","toString","has","nearTile","getWorldRoute","d","Date","now","replace","c","random","hashCode","str","hash","chr","charCodeAt","Hexagon","getNeighbor","fromIndex","end","right","topRight","left","bottomLeft","bottomRight","absX","sign","_this$coords","_Hexagon","HexagonMap","Hex","yMap","zMap","maxX","minX","maxZ","minZ","_hex$coords","old","val","alpha","fromHEX","h","sqrt","i18n","_window$mobx","window","mobx","autorun","game","frameRate","isNumber","num","Number","isFinite","listen","LoadingUi","_Ui","_onLoad","director","loadScene","Ui","loadResources","_x","_x2","_loadResources","paths","abrupt","reject","load","_loadResourcesDir","path","loadDir","UNMOUNT_METHOD_REGEX","disposeRender","onDestroy","PauseRoute","Pause","PauseScreen","isIntro","onStartClick","onContinueClick","onResumeClick","onStartOverClick","onSettingsClick","isContinueActive","Photobooth","Camera","semaphore","Semaphore","updateCallback","waitForUpdate","_waitForUpdate","capture","_capture","_this3","execute","_this3$camera$node$pa","_node$getComponentInC","_this3$camera$node$pa2","pbuffer","texture","root","setNodeLayer","halfExtents","rt","readPixels","Texture2D","format","getPixelFormat","uploadData","flipUVY","sys","isNative","update","_this$updateCallback","factory","activeInHierarchy","_scene$getComponentIn","scene","getScene","targetTexture","SHOOT_CACHE","shootNode","CCFloat","spriteComponent","disposeSpriteShoot","_Photobooth$factory","cachedSprite","createShootTarget","cacheKey","prefabNode","_this$shootNode","_this$shootPrefab","uuid","warn","promiseTimeout","ms","promise","onTimeout","timer","setTimeout","res","clearTimeout","chances","rand","check","range","digits","toFixedNumber","tinyChance","smallChance","mediumChange","largeChance","randomize","_ResourceComponent","ResourceComponent","ResourceCard","_this$label$node$pare","labelBgSprite","NEUTRAL_COLOR","titleStr","resourceKey","resourceDb","ResourcesDB","_ResourcesDB","ResourcesRoute","Resources","ResourcesScreen","DEFAULT_CARD_HEIGHT","PADDING_DIFF","disposeResourcesListen","_this$resourceCards$","_this$resourceCards$2","resourcesNode","removeAllChildren","resourceCards","dimension","resourcesWrapperTransform","ResourcesStart","_ResourcesStart","_AbstractState","applyReasons","reasons","_step$value","resourcesFromBuildings","priceFromBuildQueue","activeBuildings","_Object$entries","_Object$entries$_i","buildQueue","_Object$entries2","_Object$entries2$_i","MAX_HISTORY_LENGTH","NAVIGATION_DEBOUNCE","routes","_routes","WorldRoute","Router","history","navigateTimeout","navigateOptions","back","Route","historyLength","record","maxConcurrency","currentConcurrency","queue","acquire","_acquire","release","shift","_execute","task","finish","_ref$deep","deep","children","TemplateComponent","_this$tileTest","previewBuilding","renderBiomeTile","biomeTileComponent","renderBuildingPreview","renderBuilding","renderBiomeObject","renderTileTest","TileTest","biomes","tileHasBiomeTiles","testNode","_page$buildingDb","page","enumValue","newEnum","__enums__","pow","toQuat","Quat","fromEuler","month","year","disposeListenResolution","Size","updateResolution","off","updateSafearea","realSize","windowSize","ratio","newSize","view","setDesignResolutionSize","ResolutionPolicy","FIXED_WIDTH","cameras","orthoHeight","_this$contentNode","safeArea","getSafeAreaRect","_view$getVisibleSize","getVisibleSize","screenWidth","screenHeight","top","padding","spriteSize","spriteRenderer","disposeTweenScale","disposeSpriteChange","disposeCameraListen","getSpriteSize","_this$spriteRenderer$","_this$disposeTweenSca","tweenScale","multiplyScalar","spriteMaterial","SpriteRenderer","BoxCollider","UI_3D","eulerAngles","_camera$cameraRotatio","_camera$targetRotatio","_camera$targetRotatio2","cameraRotation","targetRotation","_this$spriteSize","UiActive","UiActiveAnimate","delay","addBackgroundChild","isVertical","alignStart","alignEnd","realWidth","realHeight","isAlignLeft","isAlignRight","isAlignTop","isAlignBottom","startSize","rect","endSize","_this$uiTransform2","_Label","_string","_Object$getOwnPropert","_this$opacityComponen","opacityComponent","hide","once","_this$animate","onEnable","_this$animate2","onDisable","UiPositionAnimate","pos","by","_updateNodeLayout","waitForFrame","layout","updateLayout","_wait","timeout","frames","onFrame","requestAnimationFrame","centerChunk","Canvas","_dec12","disposePageListen","touchSize","movedTimes","raycastTimer","impulseDuration","_descriptor11","navigateDuration","navigateFrom","_descriptor12","disposeTouchListen","canvas","NodeEventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","initTarget","cameraInitPosition","getPosition","cameraInitRotation","getRotation","targetInitRotation","canvasDimensions","targetPosition","parseMoveDelta","delta","move","targetX","targetY","moveLimit","moveBy","deltaX","deltaY","moveVec","zoom","zoomBy","rotateBy","navigateTo","touchImpulse","moveType","touchCount","getAllTouches","touchTimes","splice","touches","getTouches","Default","getDelta","touchDelta","len","TwoFinger","zoomA","zoomB","locationA","getLocation","locationB","prevLocationA","getPreviousLocation","prevLocationB","prevDistance","sub","prevSub","DoubleTouch","Rotate","raycast","outRay","screenPointToRay","PhysicsSystem","raycastClosest","raycastClosestResult","hitPoint","hitNormal","emit","navigator","cameraPosition","dt","_this4","Navigate","navigateProgress","time","fromValue","toValue","Impulse","impulseProgress","WorldScreen","onTurnClick","onPauseClick","onResourcesClick","disposeTurnListen","calculateBuildingsCount","buildings","buildedBuildings","updateUiOverlay","overlayNode","updateUiHeader","headerNode","updateUiBody","ScreenClass","_this$screen","bodyNode"],"mappings":"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","file":"all.js","sourcesContent":["import { TComponentClass } from '@/libs/cocos/types/TComponentClass';\nimport { AbstractScreen } from '@/routes/AbstractRoute/components/AbstractScreen';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { makeObservable } from 'vendors/mobx';\n\nexport abstract class AbstractRoute<T = {}> {\n    hasUiOverlay = false;\n    hasUiHeader = true;\n\n    abstract readonly name: ERouteName;\n    abstract readonly screen: TComponentClass<AbstractScreen<AbstractRoute>> & { template: TResourceTemplate };\n\n    initialize(options: T) {\n        Object.assign(this, options);\n        makeObservable(this);\n\n        return this;\n    }\n\n    abstract serialize(): T;\n\n    destroy() {\n        // no-op\n    }\n}\n","import { UiOpacityAnimate } from '@/features/UiAnimation/components/UiOpacityAnimate';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { TemplateComponent } from '@/libs/cocos/components/TemplateComponent';\nimport { AbstractRoute } from '@/routes/AbstractRoute/AbstractRoute';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { router } from '@/routes/router';\nimport { UIOpacity } from 'cc';\nimport { computed } from 'vendors/mobx';\n\nexport abstract class AbstractScreen<T extends AbstractRoute> extends Observer implements TemplateComponent {\n    abstract readonly routeName: ERouteName;\n\n    @computed\n    get route() {\n        return router.getRoute<T>(this.routeName);\n    }\n\n    initialize() {\n        const opacity = this.node.addComponent(UIOpacity);\n        opacity.opacity = 0;\n\n        const animate = this.node.addComponent(UiOpacityAnimate);\n        animate.duration = 0.1;\n        animate.easing = 'cubicInOut';\n    }\n}\n","import { GameState } from '@/states/GameState/GameState';\nimport { makeObservable } from 'vendors/mobx';\n\nexport abstract class AbstractState<IData = {}> {\n    protected state: GameState;\n\n    constructor(state: GameState) {\n        this.state = state;\n    }\n\n    destroy() {\n        // no-op\n    }\n\n    initialize(_data: IData): this {\n        makeObservable(this);\n\n        return this;\n    }\n\n    abstract serialize(): IData;\n}\n","import { getAllComponents } from '@/libs/cocos/helpers/getAllComponents';\nimport type { Node } from 'cc';\nimport { MeshCollider, MeshRenderer } from 'cc';\n\ninterface IAddMeshColliderOptions {\n    isTrigger?: boolean;\n}\n\nexport function addMeshCollider(node: Node, options: IAddMeshColliderOptions) {\n    const meshes = getAllComponents(node, MeshRenderer);\n\n    const colliders: MeshCollider[] = [];\n\n    for (const mesh of meshes) {\n        const collider = mesh.node.addComponent(MeshCollider);\n\n        if (mesh) {\n            collider.mesh = mesh.mesh;\n        }\n\n        collider.isTrigger = Boolean(options.isTrigger);\n\n        colliders.push(collider);\n    }\n\n    return colliders;\n}\n","import { Font, Material, Prefab, SpriteFrame } from 'cc';\nimport { loadResourcesDir } from '@/libs/cocos/helpers/loadResourcesDir';\nimport { bound } from '@/libs/decorators/bound';\nimport { prepareMaterial } from '@/libs/helpers/prepareMaterial';\n\nconst LOAD_METHOD_REGEX = /^load/;\n\nclass Assets {\n    wait: Promise<void>;\n\n    private materials = new Map<TResourceMaterial, Material>();\n\n    private sprites = new Map<TResourceSprite, SpriteFrame>();\n\n    private prefabs = new Map<TResourcePrefab, Prefab>();\n\n    private fonts = new Map<TResourceFont, Font>();\n\n    constructor() {\n        this.wait = this.waitAssets().catch((err) => console.error(err));\n    }\n\n    private get<K, V>(map: Map<K, V>, names: K): NonNullable<V>;\n    private get<K, V>(map: Map<K, V>, names: K[]): NonNullable<V>[];\n    private get<K, V>(map: Map<K, V>, names: OneOrMore<K>): OneOrMore<NonNullable<V>> {\n        const get = (name: K) => {\n            const resource = map.get(name);\n\n            if (!resource) {\n                throw new Error(`Cannot find resource asset with name ${name}`);\n            }\n\n            return resource;\n        };\n\n        if (Array.isArray(names)) {\n            return names.map((name) => get(name));\n        }\n\n        return get(names);\n    }\n\n    getMaterials(names: TResourceMaterial): Material;\n    getMaterials(names: TResourceMaterial[]): Material[];\n    getMaterials(names: OneOrMore<TResourceMaterial>): OneOrMore<Material> {\n        return this.get(this.materials, names);\n    }\n\n    getSprites(names: TResourceSprite): SpriteFrame;\n    getSprites(names: TResourceSprite[]): SpriteFrame[];\n    getSprites(names: OneOrMore<TResourceSprite>): OneOrMore<SpriteFrame> {\n        return this.get(this.sprites, names);\n    }\n\n    getPrefabs(names: TResourcePrefab): Prefab;\n    getPrefabs(names: TResourcePrefab[]): Prefab[];\n    getPrefabs(names: OneOrMore<TResourcePrefab>): OneOrMore<Prefab> {\n        return this.get(this.prefabs, names);\n    }\n\n    getFonts(names: TResourceFont): Font;\n    getFonts(names: TResourceFont[]): Font[];\n    getFonts(names: OneOrMore<TResourceFont>): OneOrMore<Font> {\n        return this.get(this.fonts, names);\n    }\n\n    private async waitAssets() {\n        const promises: Promise<void>[] = [];\n\n        const methods = [\n            ...Object.getOwnPropertyNames(this),\n            ...Object.getOwnPropertyNames(Object.getPrototypeOf(this)),\n        ] as (keyof Assets)[];\n\n        methods.forEach((method) => {\n            if (LOAD_METHOD_REGEX.test(method)) {\n                const func = this[method] as any as (() => Promise<void>) | undefined;\n\n                if (func) {\n                    promises.push(func());\n                }\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    @bound\n    protected async loadMaterials() {\n        const materials = (await loadResourcesDir('materials', Material)).map(prepareMaterial);\n\n        for (const material of materials) {\n            this.materials.set(material.name as TResourceMaterial, material);\n        }\n    }\n\n    @bound\n    protected async loadSprites() {\n        const sprites = await loadResourcesDir('ui', SpriteFrame);\n\n        for (const sprite of sprites) {\n            this.sprites.set(sprite.name as TResourceSprite, sprite);\n        }\n    }\n\n    @bound\n    protected async loadPrefabs() {\n        const prefabs = await loadResourcesDir('prefabs', Prefab);\n\n        for (const prefab of prefabs) {\n            this.prefabs.set(prefab.data.name as TResourcePrefab, prefab);\n        }\n    }\n\n    @bound\n    protected async loadFonts() {\n        const fonts = await loadResourcesDir('fonts', Font);\n\n        for (const font of fonts) {\n            this.fonts.set(font.name as TResourceFont, font);\n        }\n    }\n}\n\nexport const assets = new Assets();\n","import type { Node } from 'cc';\nimport { action, observable } from 'vendors/mobx';\nimport type { Tile } from '@/features/Tile/components/Tile';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport type { ITapEvent } from '@/libs/cocos/types/ITapEvent';\n\nexport interface IBiomeProps<T> {\n    data: T;\n    tile: Tile;\n    onTap?: (event: ITapEvent) => void;\n}\n\nexport abstract class Biome<T> extends Observer {\n    protected renderNode: Node | null = null;\n\n    @observable data: T;\n\n    tile: Tile;\n\n    protected onTap?: (event: ITapEvent) => void;\n\n    @action.bound\n    initialize({ data, tile, onTap }: IBiomeProps<T>) {\n        this.data = data;\n        this.tile = tile;\n        this.onTap = onTap;\n    }\n\n    protected abstract createRenderNode(): Node | null;\n\n    render() {\n        if (this.renderNode) {\n            this.renderNode.destroy();\n            this.renderNode = null;\n        }\n\n        this.renderNode = this.createRenderNode();\n    }\n}\n","import type { Node } from 'cc';\nimport { Vec3 } from 'cc';\nimport { computed } from 'vendors/mobx';\nimport type { IBiomeProps } from '@/features/Biome/components/Biome';\nimport { Biome } from '@/features/Biome/components/Biome';\nimport { biomeObjectPrefabs } from '@/features/Biome/data/biomeObjectsPrefabs';\nimport type { IBiomeObjectData } from '@/features/Biome/types/IBiomeData';\nimport { createPrefabNode } from '@/libs/cocos/helpers/createPrefabNode';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport { assets } from '@/features/Assets/data/assets';\n\nexport type TBiomeObjectProps = IBiomeProps<IBiomeObjectData>;\n\n@ccclass('BiomeObject')\nexport class BiomeObject extends Biome<IBiomeObjectData> {\n    @computed\n    get prefab() {\n        return biomeObjectPrefabs[this.data.key]?.(this.data);\n    }\n\n    protected createRenderNode(): Node | null {\n        if (!this.prefab) {\n            return null;\n        }\n\n        const prefab = assets.getPrefabs(this.prefab);\n\n        return createPrefabNode(prefab, {\n            parent: this.node,\n            rotation: this.data.rotate ? new Vec3(0, this.data.rotate, 0) : undefined,\n            scale: this.data.scale ? new Vec3(1, this.data.scale, 1) : undefined,\n            castShadows: true,\n            receiveShadows: true,\n            onTap: this.onTap,\n        });\n    }\n\n    onLoad() {\n        this.node.setPosition(new Vec3(0, this.tile.groundY, 0));\n    }\n}\n","import { EBiomeObject } from '@/features/Biome/data/EBiome';\nimport { EBiomeSize } from '@/features/Biome/data/EBiomeSize';\nimport type { IBiomeObjectData } from '@/features/Biome/types/IBiomeData';\n\nexport const biomeObjectPrefabs: Partial<Record<EBiomeObject, (biome: IBiomeObjectData) => TResourcePrefab>> = {\n    [EBiomeObject.Mountain]: () => 'mountain',\n    [EBiomeObject.Forest]: () => 'forest',\n    [EBiomeObject.ForestRocks]: ({ size }) => (size === EBiomeSize.Tiny ? 'forest_rocks_tiny' : 'forest_rocks_small'),\n    [EBiomeObject.Rocks]: ({ data }) => (data?.small ? 'rocks_small' : 'rocks'),\n    [EBiomeObject.Hill]: () => 'hill',\n};\n","import type { EBiome } from '@/features/Biome/data/EBiome';\nimport { EBiomeObject, EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { EBiomeSize } from '@/features/Biome/data/EBiomeSize';\nimport type { TBiomeSizeMap } from '@/features/Biome/types/TBiomeSizeMap';\n\nexport const biomeSizeMaps: Partial<Record<EBiome, TBiomeSizeMap>> = {\n    [EBiomeObject.Forest]: {\n        [EBiomeSize.Tiny]: 1,\n        [EBiomeSize.Small]: 3,\n        [EBiomeSize.Medium]: 5,\n        [EBiomeSize.Large]: 10,\n    },\n    [EBiomeObject.Mountain]: {\n        [EBiomeSize.Tiny]: 1,\n        [EBiomeSize.Small]: 2,\n        [EBiomeSize.Medium]: 3,\n        [EBiomeSize.Large]: 5,\n    },\n    [EBiomeTile.Clay]: {\n        [EBiomeSize.Tiny]: 1,\n        [EBiomeSize.Small]: 3,\n        [EBiomeSize.Medium]: 5,\n        [EBiomeSize.Large]: 7,\n    },\n    [EBiomeObject.ForestRocks]: {\n        [EBiomeSize.Tiny]: 1,\n        [EBiomeSize.Small]: 1,\n    },\n    [EBiomeObject.Rocks]: {\n        [EBiomeSize.Tiny]: 1,\n        [EBiomeSize.Small]: 2,\n        [EBiomeSize.Medium]: 3,\n        [EBiomeSize.Large]: 4,\n    },\n    [EBiomeTile.Sand]: {\n        [EBiomeSize.Tiny]: 1,\n        [EBiomeSize.Small]: 3,\n        [EBiomeSize.Medium]: 7,\n        [EBiomeSize.Large]: 15,\n    },\n    [EBiomeTile.Lake]: {\n        [EBiomeSize.Tiny]: 1,\n        [EBiomeSize.Small]: 4,\n        [EBiomeSize.Medium]: 5,\n        [EBiomeSize.Large]: 7,\n    },\n    [EBiomeTile.Sea]: {\n        [EBiomeSize.Large]: 200,\n    },\n    [EBiomeTile.River]: {\n        [EBiomeSize.Tiny]: 5,\n        [EBiomeSize.Small]: 10,\n        [EBiomeSize.Medium]: 20,\n        [EBiomeSize.Large]: 30,\n    },\n};\n","import { Vec3 } from 'cc';\nimport type { IBiomeProps } from '@/features/Biome/components/Biome';\nimport { Biome } from '@/features/Biome/components/Biome';\nimport { MAX_BIOME_TILE_HEIGHT } from '@/features/Biome/data/consts';\nimport { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport type { IBiomeTileData } from '@/features/Biome/types/IBiomeData';\nimport { TILE_HEIGHT_MULTIPLIER } from '@/features/Tile/data/consts';\nimport { createPrefabNode } from '@/libs/cocos/helpers/createPrefabNode';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport { assets } from '@/features/Assets/data/assets';\n\nconst MIN_DIRT_HEIGHT = 3;\n\nexport type TBiomeTileProps = IBiomeProps<IBiomeTileData | undefined>;\n\n@ccclass('BiomeTile')\nexport class BiomeTile extends Biome<IBiomeTileData | undefined> {\n    @cached\n    get prefab(): TResourcePrefab {\n        return 'hex';\n    }\n\n    @cached\n    get material(): TResourceMaterial {\n        if (this.data?.key === EBiomeTile.Clay) {\n            return 'clay';\n        }\n\n        if (this.data?.key === EBiomeTile.Sand) {\n            return 'sand';\n        }\n\n        return 'grass';\n    }\n\n    @cached\n    get biomeY(): number {\n        return Math.min(this.tile.data.height, MAX_BIOME_TILE_HEIGHT) * TILE_HEIGHT_MULTIPLIER;\n    }\n\n    @cached\n    get dirtY() {\n        return this.tile.groundY - this.rockY - this.biomeY;\n    }\n\n    @cached\n    get rockY() {\n        if (this.tile.data.height - MAX_BIOME_TILE_HEIGHT < MIN_DIRT_HEIGHT) {\n            return 0;\n        }\n\n        return this.tile.data.baseHeight * TILE_HEIGHT_MULTIPLIER;\n    }\n\n    @cached\n    get receiveShadows() {\n        return true;\n    }\n\n    @cached\n    get castShadows() {\n        return true;\n    }\n\n    protected createRenderNode() {\n        if (!this.biomeY) {\n            return null;\n        }\n\n        const prefab = assets.getPrefabs(this.prefab);\n        const material = assets.getMaterials(this.material);\n\n        return createPrefabNode(prefab, {\n            parent: this.node,\n            materials: [material],\n            position: new Vec3(0, this.rockY + this.dirtY, 0),\n            scale: new Vec3(1, this.biomeY, 1),\n            receiveShadows: this.receiveShadows,\n            castShadows: this.castShadows,\n            onTap: this.onTap,\n        });\n    }\n\n    onLoad() {\n        const [hexBase, hex] = assets.getPrefabs(['hex_base', 'hex']);\n        const [rock, dirt] = assets.getMaterials(['rock', 'dirt']);\n\n        // ROCK\n        createPrefabNode(hexBase, {\n            parent: this.node,\n            materials: [rock],\n            position: new Vec3(0, -1, 0),\n            scale: new Vec3(1, 1 + this.rockY, 1),\n        });\n\n        createPrefabNode(this.biomeY ? hexBase : hex, {\n            parent: this.node,\n            materials: [dirt],\n            position: new Vec3(0, this.rockY, 0),\n            scale: new Vec3(1, this.dirtY, 1),\n            receiveShadows: this.receiveShadows,\n            castShadows: this.castShadows,\n        });\n    }\n}\n","import type { IVec3Like } from 'cc';\nimport { Vec3, Vec2, toDegree } from 'cc';\nimport { computed } from 'vendors/mobx';\nimport { BiomeTile } from '@/features/Biome/components/BiomeTile';\nimport { MAX_BIOME_TILE_HEIGHT } from '@/features/Biome/data/consts';\nimport { EBiomeObject, EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { waterTiles } from '@/features/Biome/data/waterTiles';\nimport type { Tile } from '@/features/Tile/components/Tile';\nimport { createPrefabNode } from '@/libs/cocos/helpers/createPrefabNode';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport { filterNullable } from '@/libs/helpers/filterNullable';\nimport { HexagonTile } from '@/libs/hexagon/HexagonTile';\nimport { toVec3 } from '@/libs/math/toVec3';\nimport { assets } from '@/features/Assets/data/assets';\nimport { HEX_OPTIONS } from '@/features/Hex/data/consts';\nimport { state } from '@/states/state';\n\nconst RIVER_PREFABS: Record<string, [TResourcePrefab, number]> = {\n    '000001': ['hex_river_13', 60],\n    '000010': ['hex_river_13', 120],\n    '000100': ['hex_river_13', 180],\n    '001000': ['hex_river_13', -120],\n    '010000': ['hex_river_13', -60],\n    '100000': ['hex_river_13', 0],\n    '100001': ['hex_river_3', 60],\n    '100010': ['hex_river_2', 120],\n    '100011': ['hex_river_7', 60],\n    '100101': ['hex_river_5', 180],\n    '100110': ['hex_river_6', 0],\n    '100111': ['hex_river_10', 0],\n    '101000': ['hex_river_2', 0],\n    '101001': ['hex_river_6', -120],\n    '101010': ['hex_river_4', 0],\n    '101011': ['hex_river_8', 60],\n    '101100': ['hex_river_5', 0],\n    '101101': ['hex_river_9', 60],\n    '101110': ['hex_river_8', 180],\n    '101111': ['hex_river_11', 120],\n    '110000': ['hex_river_3', 0],\n    '110001': ['hex_river_7', 0],\n    '110010': ['hex_river_5', 120],\n    '110011': ['hex_river_10', -60],\n    '110100': ['hex_river_6', -180],\n    '110101': ['hex_river_8', 0],\n    '110110': ['hex_river_9', 0],\n    '110111': ['hex_river_11', 60],\n    '111000': ['hex_river_7', -60],\n    '111001': ['hex_river_10', -120],\n    '111010': ['hex_river_8', -60],\n    '111011': ['hex_river_11', 0],\n    '111100': ['hex_river_10', 180],\n    '111101': ['hex_river_11', -60],\n    '111110': ['hex_river_11', -120],\n    '111111': ['hex_river_12', 0],\n};\n\n@ccclass('BiomeTileRiver')\nexport class BiomeTileRiver extends BiomeTile {\n    @cached\n    get defaultFrom() {\n        return this.tile.hex.topLeft;\n    }\n\n    @computed\n    get rotation() {\n        const rotation = RIVER_PREFABS[this.prefabKey]?.[1] || 0;\n\n        if (!this.from) {\n            return rotation;\n        }\n\n        const defaultFromNeighbor = new HexagonTile(null, this.defaultFrom, HEX_OPTIONS);\n        const fromNeighbor = new HexagonTile(null, toVec3(this.from), HEX_OPTIONS);\n\n        const center = new Vec2(this.tile.hex.positionX, this.tile.hex.positionZ);\n\n        const defaultFrom = new Vec2(defaultFromNeighbor.positionX, defaultFromNeighbor.positionZ).subtract(center);\n        const from = new Vec2(fromNeighbor.positionX, fromNeighbor.positionZ).subtract(center);\n\n        const angle = from.signAngle(defaultFrom);\n\n        return rotation + Math.round(toDegree(angle));\n    }\n\n    @computed\n    get from(): IVec3Like | null {\n        const from = this.data?.data?.from;\n\n        if (!from) {\n            return this.to[0] || null;\n        }\n\n        return from || null;\n    }\n\n    @computed\n    get to(): IVec3Like[] {\n        return this.data?.data?.to || [];\n    }\n\n    @computed\n    get directions() {\n        const directions = filterNullable([this.from, ...this.to]);\n\n        const { coords } = this.tile.hex;\n        const sortedNeighbors = this.tile.hex.getOrderedNeigbors(this.from);\n\n        return sortedNeighbors.map((neighbor) => {\n            const { tilesMap } = state.worldState;\n\n            const tile = tilesMap.get(neighbor);\n            const isDirection = directions.some((river) => Vec3.equals(river, neighbor));\n\n            if (tile) {\n                const heightDiff = Math.abs(tile.self.data.height - this.tile.data.height);\n\n                if (heightDiff > MAX_BIOME_TILE_HEIGHT) {\n                    return null;\n                }\n\n                const { biomeTile, biomeObject } = tile.self.data;\n                const biomeTileKey = biomeTile?.key;\n                const biomeObjectKey = biomeObject?.key;\n\n                const isRiver = biomeTileKey === EBiomeTile.River;\n                const isWater = biomeTileKey && waterTiles.includes(biomeTileKey);\n\n                if (isDirection) {\n                    if (isRiver || isWater || heightDiff || biomeObjectKey === EBiomeObject.Mountain) {\n                        return tile.coords;\n                    }\n\n                    return null;\n                }\n\n                if (isRiver) {\n                    const { biomeTile: currentBiomeTile } = this.tile.data;\n\n                    const isOtherRiver =\n                        biomeTile &&\n                        currentBiomeTile &&\n                        biomeTile.id !== currentBiomeTile.id &&\n                        (!currentBiomeTile.data?.fromId || currentBiomeTile.data?.fromId !== biomeTile.id) &&\n                        (!biomeTile.data?.fromId || biomeTile.data?.fromId !== currentBiomeTile.id);\n\n                    if (isOtherRiver) {\n                        return tile.coords;\n                    }\n\n                    const isToDirection = biomeTile?.data?.to?.some((toCoords: IVec3Like) =>\n                        Vec3.equals(toCoords, coords),\n                    );\n\n                    if (isToDirection) {\n                        return tile.coords;\n                    }\n\n                    return null;\n                }\n\n                if (isWater) {\n                    if (!this.to.length) {\n                        return tile.coords;\n                    }\n\n                    return null;\n                }\n\n                return null;\n            }\n\n            if (isDirection) {\n                return neighbor;\n            }\n\n            return null;\n        });\n    }\n\n    @computed\n    get directionsTiles(): HexagonTile<Tile>[] {\n        const { tilesMap } = state.worldState;\n\n        return filterNullable(this.directions.map((coords) => (coords ? tilesMap.get(coords) : coords)));\n    }\n\n    @computed\n    get prefabKey(): string {\n        return this.directions.reduce((result, item) => result + (item ? '1' : '0'), '');\n    }\n\n    @computed\n    get prefab(): TResourcePrefab {\n        const [prefab] = RIVER_PREFABS[this.prefabKey] || [];\n\n        if (prefab) {\n            return prefab;\n        }\n\n        if (this.directionsTiles.some((tile) => tile.self.data.height < this.tile.data.height)) {\n            return 'hex_river_1';\n        }\n\n        return 'hex_river_1_curvy';\n    }\n\n    @cached\n    get material(): TResourceMaterial {\n        return 'water';\n    }\n\n    @computed\n    get groundMaterial(): TResourceMaterial {\n        const { tilesMap } = state.worldState;\n\n        const neighbors = filterNullable(this.tile.hex.neighbors.map((neigbor) => tilesMap.get(neigbor)));\n\n        if (neighbors.some((tile) => tile.self.data.biomeTile?.key === EBiomeTile.Sand)) {\n            return 'sand';\n        }\n\n        return 'grass';\n    }\n\n    @cached\n    get receiveShadows() {\n        return false;\n    }\n\n    @cached\n    get castShadows() {\n        return false;\n    }\n\n    protected createRenderNode() {\n        if (!this.biomeY) {\n            return null;\n        }\n\n        const riverPrefab = assets.getPrefabs(this.prefab);\n        const [waterMaterial, riverMaterial] = assets.getMaterials([this.material, this.groundMaterial]);\n\n        return createPrefabNode(riverPrefab, {\n            parent: this.node,\n            materials: [riverMaterial, waterMaterial],\n            scale: new Vec3(1, this.biomeY, 1),\n            position: new Vec3(0, this.rockY + this.dirtY, 0),\n            rotation: new Vec3(0, this.rotation, 0),\n            receiveShadows: true,\n            onTap: this.onTap,\n        });\n    }\n}\n","import type { BiomeTile } from '@/features/Biome/components/BiomeTile';\nimport { BiomeTileRiver } from '@/features/Biome/components/BiomeTileRiver';\nimport { BiomeTileWater } from '@/features/Biome/components/BiomeTileWater';\nimport { EBiomeTile } from '@/features/Biome/data/EBiome';\n\nexport const biomeTiles: Partial<Record<EBiomeTile, typeof BiomeTile>> = {\n    [EBiomeTile.Lake]: BiomeTileWater,\n    [EBiomeTile.Sea]: BiomeTileWater,\n    [EBiomeTile.River]: BiomeTileRiver,\n};\n","import { Vec3 } from 'cc';\nimport { BiomeTile } from '@/features/Biome/components/BiomeTile';\nimport { createPrefabNode } from '@/libs/cocos/helpers/createPrefabNode';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport { assets } from '@/features/Assets/data/assets';\n\n@ccclass('BiomeTileWater')\nexport class BiomeTileWater extends BiomeTile {\n    @cached\n    get prefab(): TResourcePrefab {\n        return 'hex_water';\n    }\n\n    @cached\n    get material(): TResourceMaterial {\n        return 'water';\n    }\n\n    @cached\n    get receiveShadows() {\n        return false;\n    }\n\n    @cached\n    get castShadows() {\n        return false;\n    }\n\n    protected createRenderNode() {\n        if (!this.biomeY) {\n            return null;\n        }\n\n        const prefab = assets.getPrefabs(this.prefab);\n        const material = assets.getMaterials(this.material);\n\n        return createPrefabNode(prefab, {\n            parent: this.node,\n            materials: [material],\n            position: new Vec3(0, this.rockY + this.dirtY, 0),\n            receiveShadows: true,\n            onTap: this.onTap,\n        });\n    }\n}\n","export function bound<T extends Function>(\n    _target: object,\n    propertyKey: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> | void {\n    if (!descriptor || typeof descriptor.value !== 'function') {\n        throw new TypeError(`Only methods can be decorated with @bound. <${propertyKey}> is not a method!`);\n    }\n\n    return {\n        configurable: true,\n        get(this: T): T {\n            const binded: T = descriptor.value!.bind(this);\n            // Credits to https://github.com/andreypopp/autobind-decorator for memoizing the result of bind against a symbol on the instance.\n            Object.defineProperty(this, propertyKey, {\n                value: binded,\n                configurable: true,\n                writable: true,\n            });\n            return binded;\n        },\n    };\n}\n","import { BuildingsDB } from '@/features/Building/data/BuildingsDB';\nimport { EBuilding } from '@/features/Building/data/EBuilding';\nimport { PhotoboothIcon } from '@/features/Photobooth/components/PhotoboothIcon';\nimport { UiLabel } from '@/features/Ui/components/UiLabel';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { toCocosEnum } from '@/libs/cocos/helpers/toCocosEnum';\nimport { assets } from '@/features/Assets/data/assets';\nimport { Sprite, Node, Label, Widget, Layout } from 'cc';\nimport { action, computed, observable } from 'vendors/mobx';\nimport { TemplateComponent } from '@/libs/cocos/components/TemplateComponent';\nimport { state } from '@/states/state';\nimport { factoryTemplateComponent } from '@/libs/cocos/helpers/factoryTemplateComponent';\nimport { IResourceAmountProps, ResourceAmount } from '@/features/Resource/components/ResourceAmount';\nimport { EResource } from '@/features/Resource/data/EResource';\nimport { updateNodeLayout } from '@/libs/cocos/helpers/updateNodeLayout';\n\nexport interface IBuildCardProps {\n    building: EBuilding;\n    onClick?: (building: EBuilding) => void;\n}\n\n@ccclass('BuildCard')\nexport class BuildCard extends Observer implements TemplateComponent {\n    static template: TResourceTemplate = 'BuildCard';\n\n    @property({ type: toCocosEnum(EBuilding) })\n    building: string = '';\n\n    @property(Sprite)\n    coloredBg: Sprite;\n\n    @property(PhotoboothIcon)\n    icon: PhotoboothIcon;\n\n    @property(UiLabel)\n    title: UiLabel;\n\n    @property(Node)\n    border: Node;\n\n    @property(Label)\n    allCount: Label;\n\n    @property(Label)\n    count: Label;\n\n    @property(Label)\n    addCount: Label;\n\n    @property(Node)\n    resources: Node;\n\n    @property\n    @observable\n    selected = false;\n\n    onClick?: (building: EBuilding) => void;\n\n    @computed\n    get buildedCount() {\n        return (this.buildingKey && state.worldState.buildedCount[this.buildingKey]) || 0;\n    }\n\n    @computed\n    get buildQueueCount() {\n        return (this.buildingKey && state.worldState.buildQueueCount[this.buildingKey]) || 0;\n    }\n\n    @computed\n    get priceColor() {\n        if (this.buildingData?.buildOptions) {\n            const { resources } = state.resourcesState;\n            const { price } = this.buildingData.buildOptions;\n\n            const priceEntries = Object.entries(price) as [EResource, number][];\n\n            let affordable = 0;\n\n            for (const [resource, value] of priceEntries) {\n                const currentResource = resources[resource];\n\n                if (currentResource === undefined) {\n                    return ResourceAmount.NEGATIVE_COLOR;\n                }\n\n                if (currentResource + value >= 0) {\n                    affordable++;\n                }\n            }\n\n            if (!affordable) {\n                return ResourceAmount.NEGATIVE_COLOR;\n            }\n\n            if (affordable < priceEntries.length) {\n                return ResourceAmount.NEGATIVE_COLOR;\n            }\n        }\n\n        return ResourceAmount.POSITIVE_COLOR;\n    }\n\n    get buildingKey(): EBuilding | null {\n        if (this.building) {\n            return this.building as EBuilding;\n        }\n\n        return null;\n    }\n\n    @computed\n    get buildingData() {\n        return this.buildingKey && BuildingsDB[this.buildingKey];\n    }\n\n    onLoad() {\n        const data = this.buildingData;\n\n        if (!data || !data.buildOptions) {\n            return;\n        }\n\n        const prefab = assets.getPrefabs(data.prefab);\n\n        if (data.buildOptions.iconScale) {\n            this.icon.scale = data.buildOptions.iconScale;\n        }\n\n        this.icon.shootPrefab = prefab;\n\n        this.title.string = data.title;\n\n        this.coloredBg.color = data.buildOptions.iconColor;\n\n        const resources = Object.keys(data.buildOptions.price) as EResource[];\n\n        for (const resource of resources) {\n            const count = data.buildOptions.price[resource]!;\n\n            factoryTemplateComponent<IResourceAmountProps, ResourceAmount>(ResourceAmount, this.resources, {\n                resource,\n                count,\n            });\n        }\n\n        const resourcesBg = this.resources.getComponent(Sprite);\n\n        if (resourcesBg) {\n            resourcesBg.color = this.priceColor;\n        }\n    }\n\n    render() {\n        this.border.active = this.selected;\n\n        this.count.string = this.buildedCount ? `${this.buildedCount}` : '';\n        this.addCount.string = this.buildQueueCount ? `+${this.buildQueueCount}` : '';\n        this.allCount.string = this.count.string + this.addCount.string;\n\n        this.allCount.node.active = Boolean(this.allCount.string);\n\n        updateNodeLayout(this);\n    }\n\n    @action.bound\n    initialize({ building, onClick }: IBuildCardProps) {\n        this.building = building;\n        this.onClick = onClick;\n    }\n\n    onCardClick() {\n        const key = this.buildingKey;\n\n        if (key) {\n            this.onClick?.(this.buildingKey);\n        }\n    }\n}\n","import type { Material } from 'cc';\nimport type { ITapEvent } from '@/libs/cocos/types/ITapEvent';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport { bound } from '@/libs/decorators/bound';\nimport { BuildingComponent, IBuildingComponentProps } from '@/features/Building/components/BuildingComponent';\nimport { cached } from '@/libs/decorators/cached';\nimport { action, computed } from 'vendors/mobx';\n\nexport interface IBuildingProps extends IBuildingComponentProps {\n    onTap?: (event: ITapEvent) => void;\n}\n\n@ccclass('Building')\nexport class Building extends BuildingComponent {\n    protected onTap?: (event: ITapEvent) => void;\n\n    @computed\n    get buildingData() {\n        return this.data;\n    }\n\n    @cached\n    get materials(): Material[] {\n        return [];\n    }\n\n    @bound\n    onBuildingTap(event: ITapEvent) {\n        this.onTap?.(event);\n    }\n\n    @action.bound\n    initialize({ data, tile, onTap }: IBuildingProps) {\n        super.initialize({ data, tile });\n        this.onTap = onTap;\n    }\n}\n","import type { Material, Node } from 'cc';\nimport { MeshRenderer, Vec3 } from 'cc';\nimport { action, computed, observable } from 'vendors/mobx';\nimport type { IBuildingData } from '@/features/Building/types/IBuildingData';\nimport type { Tile } from '@/features/Tile/components/Tile';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { createPrefabNode } from '@/libs/cocos/helpers/createPrefabNode';\nimport type { ITapEvent } from '@/libs/cocos/types/ITapEvent';\nimport { assets } from '@/features/Assets/data/assets';\nimport { BuildingsDB } from '@/features/Building/data/BuildingsDB';\nimport { BUILD_PROGRESS_MAX, BUILD_PROGRESS_STAGES, BUILDING_ROTATION_INIT } from '@/features/Building/data/consts';\nimport { clamp } from '@/libs/math/clamp';\nimport { getAllComponents } from '@/libs/cocos/helpers/getAllComponents';\nimport { IUi3DProps, Ui3D } from '@/features/Ui/components/Ui3D';\nimport { factoryComponent } from '@/libs/cocos/helpers/factoryComponent';\n\nconst UI_3D_BUTTON_BORDERS = [1, 10] as const;\n\nexport interface IBuildingComponentProps {\n    data: IBuildingData;\n    tile: Tile;\n}\n\nexport abstract class BuildingComponent extends Observer {\n    protected building?: Node;\n    protected turnsLeftUi?: Ui3D;\n\n    @observable protected data: IBuildingData;\n\n    tile: Tile;\n\n    @computed\n    get buildingKey() {\n        return this.buildingData.key;\n    }\n\n    @computed\n    get isConstructing() {\n        const { progress } = this.buildingData;\n\n        return Boolean(progress < BUILD_PROGRESS_MAX);\n    }\n\n    @computed\n    get constructionSpeed() {\n        const { buildOptions } = this.buildingDb;\n\n        return BUILD_PROGRESS_MAX / (buildOptions ? buildOptions.turns : BUILD_PROGRESS_MAX);\n    }\n\n    @computed\n    get constructionStepsLeft() {\n        if (!this.isConstructing) {\n            return 0;\n        }\n\n        const { progress } = this.buildingData;\n\n        const turnsLeft = (BUILD_PROGRESS_MAX - progress) / this.constructionSpeed;\n\n        return Math.ceil(parseFloat(turnsLeft.toFixed(2)));\n    }\n\n    @computed\n    get prefab() {\n        let { prefab } = this.buildingDb;\n\n        if (this.isConstructing) {\n            const { progress } = this.buildingData;\n            const step = BUILD_PROGRESS_MAX / BUILD_PROGRESS_STAGES.length;\n            const stageIndex = clamp(Math.floor(progress / step), [0, BUILD_PROGRESS_STAGES.length - 1]);\n\n            prefab = BUILD_PROGRESS_STAGES[stageIndex];\n        }\n\n        return assets.getPrefabs(prefab);\n    }\n\n    @computed\n    get rotation() {\n        return new Vec3(0, BUILDING_ROTATION_INIT + (this.buildingData.rotate || 0), 0);\n    }\n\n    abstract get buildingData(): IBuildingData;\n\n    abstract get materials(): Material[];\n\n    @computed\n    get buildingDb() {\n        return BuildingsDB[this.buildingKey];\n    }\n\n    @computed\n    get buildingHeight() {\n        if (!this.prefab || !this.building) {\n            return 0;\n        }\n\n        const meshes = getAllComponents(this.building, MeshRenderer);\n\n        const [min, max] = meshes.reduce<[number | null, number | null]>(\n            ([min, max], mesh) => {\n                const { model } = mesh;\n\n                const bounds = model?.worldBounds;\n\n                if (bounds) {\n                    const minVec = new Vec3();\n                    const maxVec = new Vec3();\n\n                    bounds.getBoundary(minVec, maxVec);\n\n                    return [\n                        min !== null ? Math.min(min, minVec.y) : minVec.y,\n                        max !== null ? Math.max(max, maxVec.y) : maxVec.y,\n                    ];\n                }\n\n                return [min, max];\n            },\n            [null, null],\n        );\n\n        return (max || 0) - (min || 0);\n    }\n\n    abstract onBuildingTap(event: ITapEvent): void;\n\n    render() {\n        this.building?.destroy();\n        this.building = undefined;\n\n        this.building = createPrefabNode(this.prefab, {\n            parent: this.node,\n            rotation: this.rotation,\n            materials: this.materials,\n            castShadows: true,\n            receiveShadows: true,\n            onTap: this.onBuildingTap.bind(this),\n        });\n\n        if (this.isConstructing) {\n            const props: IUi3DProps = {\n                sprite: `BubbleTurns${clamp(this.constructionStepsLeft, UI_3D_BUTTON_BORDERS)}` as TResourceSprite,\n                onTap: this.onBuildingTap,\n                position: new Vec3(0, this.buildingHeight, 0),\n            };\n\n            if (!this.turnsLeftUi) {\n                this.turnsLeftUi = factoryComponent(Ui3D, this.node, props);\n            } else {\n                this.turnsLeftUi.initialize(props);\n            }\n        } else {\n            if (this.turnsLeftUi) {\n                this.turnsLeftUi.node.destroy();\n                this.turnsLeftUi = undefined;\n            }\n        }\n    }\n\n    onLoad() {\n        this.node.setPosition(new Vec3(0, this.tile.groundY, 0));\n    }\n\n    @action.bound\n    initialize({ data, tile }: IBuildingComponentProps) {\n        this.data = data;\n        this.tile = tile;\n    }\n}\n","import { EBuilding } from '@/features/Building/data/EBuilding';\n\nexport const buildingPrefabs: Record<EBuilding, TResourcePrefab> = {\n    [EBuilding.Castle]: 'building_destroyed',\n    [EBuilding.Lumberjack]: 'building_tent',\n    [EBuilding.Sawmill]: 'building_lumbermill',\n    [EBuilding.Quarry]: 'building_scaffolding',\n};\n","import { ccclass } from '@/libs/decorators/cocos';\nimport { assets } from '@/features/Assets/data/assets';\nimport { computed, runInAction } from 'vendors/mobx';\nimport { factoryComponent } from '@/libs/cocos/helpers/factoryComponent';\nimport { IUi3DProps, Ui3D } from '@/features/Ui/components/Ui3D';\nimport { Vec3 } from 'cc';\nimport { bound } from '@/libs/decorators/bound';\nimport { ITapEvent } from '@/libs/cocos/types/ITapEvent';\nimport { BUILD_PROGRESS_MAX } from '@/features/Building/data/consts';\nimport { cached } from '@/libs/decorators/cached';\nimport { BuildingComponent, IBuildingComponentProps } from '@/features/Building/components/BuildingComponent';\n\nexport interface IBuildingPreviewProps extends IBuildingComponentProps {}\n\n@ccclass('BuildingPreview')\nexport class BuildingPreview extends BuildingComponent {\n    protected rotateButton: Ui3D;\n\n    @computed\n    get buildingData() {\n        return {\n            ...this.data,\n            progress: BUILD_PROGRESS_MAX\n        };\n    }\n\n    @cached\n    get materials() {\n        const material = assets.getMaterials('white');\n\n        return [material];\n    }\n\n    @bound\n    onBuildingTap(event: ITapEvent) {\n        this.rotateButton.onClick(event);\n    }\n\n    render() {\n        super.render();\n\n        if (!this.rotateButton) {\n            this.rotateButton = factoryComponent<IUi3DProps, Ui3D>(Ui3D, this.node, {\n                sprite: 'BubbleRotate',\n                onTap: this.onBuildingTap,\n            });\n        }\n\n        runInAction(() => {\n            this.rotateButton.position = new Vec3(0, this.buildingHeight, 0);\n        });\n    }\n}\n","import { EBiomeObject, EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { EBuilding } from '@/features/Building/data/EBuilding';\nimport { EResource } from '@/features/Resource/data/EResource';\nimport { Tile } from '@/features/Tile/components/Tile';\nimport { tileHasBiomeObjects } from '@/features/Tile/helpers/tileHasBiomeObjects';\nimport { tileNotWater } from '@/features/Tile/helpers/tileNotWater';\nimport { tileWithoutObject } from '@/features/Tile/helpers/tileWithoutObject';\nimport { hexColor } from '@/libs/helpers/hexColor';\nimport { Color } from 'cc';\n\nexport interface IBuildingDb {\n    title: string;\n    prefab: TResourcePrefab;\n    buildOptions?: {\n        iconColor: Color;\n        iconScale?: number;\n        turns: number;\n        price: Partial<Record<EResource, number>>;\n    };\n    resources: Partial<Record<EResource, number>>;\n    tileTest?: ((tile: Tile) => boolean);\n}\n\nexport const BuildingsDB: Record<EBuilding, IBuildingDb> = {\n    [EBuilding.Castle]: {\n        title: 'Castle',\n        prefab: 'building_castle',\n        resources: {\n            [EResource.Log]: +2,\n        },\n    },\n    [EBuilding.Lumberjack]: {\n        title: 'Lumberjack',\n        prefab: 'building_tent',\n        resources: {\n            [EResource.Log]: +1,\n        },\n        buildOptions: {\n            iconColor: hexColor('D5B089', 0.5),\n            turns: 1,\n            price: {\n                [EResource.Log]: -1,\n            },\n        },\n        tileTest(tile) {\n            return tileWithoutObject(tile) && tileNotWater(tile) && tile.neighborsTiles.some((neighbor) => {\n                return tileHasBiomeObjects(neighbor, [EBiomeObject.Forest]);\n            });\n        },\n    },\n    [EBuilding.Quarry]: {\n        title: 'Quarry',\n        prefab: 'building_scaffolding',\n        resources: {\n            [EResource.Stone]: +1,\n        },\n        buildOptions: {\n            iconColor: hexColor('708695', 0.5),\n            turns: 1,\n            price: {\n                [EResource.Log]: -1,\n                [EResource.Plank]: -1,\n            },\n        },\n        tileTest(tile) {\n            return tileWithoutObject(tile) && tileNotWater(tile) && tile.neighborsTiles.some((neighbor) => {\n                return tileHasBiomeObjects(neighbor, [EBiomeObject.Mountain, EBiomeObject.Rocks]);\n            });\n        },\n    },\n    [EBuilding.Sawmill]: {\n        title: 'Sawmill',\n        prefab: 'building_lumbermill',\n        resources: {\n            [EResource.Log]: -1,\n            [EResource.Plank]: +1,\n        },\n        buildOptions: {\n            iconColor: hexColor('D5B089', 0.5),\n            turns: 3,\n            price: {\n                [EResource.Log]: -2,\n            },\n        },\n        tileTest(tile) {\n            return tileWithoutObject(tile) && tileNotWater(tile);\n        },\n    },\n};\n","import { BuildingsDB } from '@/features/Building/data/BuildingsDB';\nimport { EBuilding } from '@/features/Building/data/EBuilding';\nimport { IBuildingData } from '@/features/Building/types/IBuildingData';\nimport { DiWorld } from '@/features/Di/components/DiWorld';\nimport { Tile } from '@/features/Tile/components/Tile';\nimport { fromVec3ToVec2 } from '@/libs/math/fromVec3ToVec2';\nimport { AbstractRoute } from '@/routes/AbstractRoute/AbstractRoute';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { BuildScreen } from '@/routes/BuildRoute/components/BuildScreen';\nimport { state } from '@/states/state';\nimport { Vec3 } from 'cc';\nimport { action, computed, IReactionDisposer, observable, reaction } from 'vendors/mobx';\n\nexport interface IBuildRouteOptions {\n    building?: EBuilding | null;\n    buildingCoords?: Vec3 | null;\n}\n\nexport class BuildRoute extends AbstractRoute<IBuildRouteOptions> implements IBuildRouteOptions {\n    readonly name = ERouteName.Build;\n    readonly screen = BuildScreen;\n\n    @observable building: EBuilding | null = null;\n    @observable buildingRotate?: number;\n    @observable.ref buildingCoords: Vec3 | null = null;\n\n    @computed\n    get buildingTile(): Tile | null {\n        const { tilesMap } = state.worldState;\n\n        if (this.buildingCoords) {\n            return tilesMap.get(this.buildingCoords)?.self || null;\n        }\n\n        return null;\n    }\n\n    @computed\n    get buildingData(): Optional<IBuildingData> {\n        if (!this.building) {\n            return undefined;\n        }\n\n        return {\n            key: this.building,\n            rotate: this.buildingRotate,\n            progress: 0,\n        };\n    }\n\n    @computed\n    get buildingDb() {\n        return (this.building && BuildingsDB[this.building]) || null;\n    }\n\n    @computed\n    get isChunkMode() {\n        return !this.isBuildingPositionMode && !this.isBuildingPreviewMode;\n    }\n\n    @computed\n    get isBuildingPositionMode() {\n        return Boolean(this.building && !this.isBuildingPreviewMode);\n    }\n\n    @computed\n    get isBuildingPreviewMode() {\n        return Boolean(this.building && this.buildingCoords);\n    }\n\n    zoomIn() {\n        if (this.buildingTile) {\n            const { worldCamera: camera } = DiWorld;\n\n            camera.navigate({\n                zooming: -0.5,\n                position: fromVec3ToVec2(this.buildingTile.node.getWorldPosition()),\n            });\n        }\n    }\n\n    zoomOut() {\n        const { worldCamera: camera } = DiWorld;\n\n        if (camera.zooming < 0) {\n            camera.navigate({\n                zooming: 0,\n            });\n        }\n    }\n\n    serialize(): IBuildRouteOptions {\n        return {\n            building: this.building,\n            buildingCoords: this.buildingCoords,\n        };\n    }\n\n    disposeBuildingListen?: IReactionDisposer;\n    disposeBuildingPositionListen?: IReactionDisposer;\n\n    initialize(options: IBuildRouteOptions) {\n        super.initialize(options);\n\n        this.disposeBuildingListen = reaction(\n            () => this.building,\n            action(() => {\n                this.buildingCoords = null;\n                this.zoomOut();\n            })\n        );\n\n        this.disposeBuildingPositionListen = reaction(\n            () => this.buildingCoords,\n            () => {\n                this.zoomIn();\n            }\n        );\n\n        return this;\n    }\n\n    destroy() {\n        this.disposeBuildingListen?.();\n        this.disposeBuildingPositionListen?.();\n    }\n}\n","import { BuildCard, IBuildCardProps } from '@/features/BuildCard/components/BuildCard';\nimport { EBuilding } from '@/features/Building/data/EBuilding';\nimport { waitForFrame } from '@/libs/async/waitForFrame';\nimport { factoryTemplateComponent } from '@/libs/cocos/helpers/factoryTemplateComponent';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { AbstractScreen } from '@/routes/AbstractRoute/components/AbstractScreen';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { BuildRoute } from '@/routes/BuildRoute/BuildRoute';\nimport { router } from '@/routes/router';\nimport { Node } from 'cc';\nimport { action, computed, observable, runInAction } from 'vendors/mobx';\n\nconst BUILDINGS: EBuilding[] = [EBuilding.Lumberjack, EBuilding.Sawmill, EBuilding.Quarry];\n\n@ccclass('BuildScreen')\nexport class BuildScreen extends AbstractScreen<BuildRoute> {\n    static template: TResourceTemplate = 'BuildScreen';\n\n    readonly routeName = ERouteName.Build;\n\n    @property(Node)\n    buildingsNode: Node;\n\n    @observable.shallow\n    buildCards: BuildCard[] = [];\n\n    onLoad() {\n        for (const building of BUILDINGS) {\n            const card = factoryTemplateComponent<IBuildCardProps, BuildCard>(BuildCard, this.buildingsNode, { building, onClick: this.onSelectBuilding });\n\n            this.buildCards.push(card);\n        }\n    }\n\n    @action.bound\n    onSelectBuilding(building: EBuilding) {\n        if (this.route) {\n            this.route.building = this.route.building === building ? null : building;\n        }\n    }\n\n    @action.bound\n    onBuildClick() {\n        if (!this.route) {\n            return;\n        }\n\n        const tile = this.route.buildingTile;\n\n        if (tile) {\n            this.route.zoomOut();\n            router.navigateBack();\n\n            if (tile.buildingPreview) {\n                tile.buildingPreview.node.active = false;\n            }\n\n            tile.data.building = this.route.buildingData;\n        }\n    }\n\n    onCancelClick() {\n        const isNavigated = router.navigateBack();\n\n        if (!isNavigated) {\n            router.navigate(ERouteName.World);\n        }\n    }\n\n    @computed\n    get isBuildingSelected() {\n        return Boolean(this.route?.building);\n    }\n\n    @computed\n    get isReadyToBuild() {\n        return this.route?.isBuildingPreviewMode;\n    }\n\n    render() {\n        const selectedBuilding = this.route?.building;\n\n        runInAction(() => {\n            for (const card of this.buildCards) {\n                card.selected = card.building === selectedBuilding;\n            }\n        });\n    }\n}\n","import { Button as _Button, EventHandler, Label } from 'cc';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { cached } from '@/libs/decorators/cached';\n\nexport abstract class Button extends Observer {\n    @cached\n    get button() {\n        return this.node.getComponent(_Button);\n    }\n\n    get label() {\n        return this.node.getComponentInChildren<Label>(Label);\n    }\n\n    onLoad() {\n        if (!this.button) {\n            throw new Error('Button component must be used only with buttons');\n        }\n\n        const clickEventHandler = new EventHandler();\n        clickEventHandler.target = this.node;\n        clickEventHandler.component = (this as any).__classname__;\n        clickEventHandler.handler = 'onClick';\n\n        this.button.clickEvents.push(clickEventHandler);\n    }\n\n    abstract onClick(event: Event): void;\n}\n","import { BUTTON_TRANSITION_SCALE, BUTTON_TRANSITION_TIME } from '@/features/Button/data/consts';\nimport { EButtonSize } from '@/features/Button/data/EButtonSize';\nimport { UiBackground } from '@/features/Ui/components/UiBackground';\nimport { UiLabel } from '@/features/Ui/components/UiLabel';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { ELayer } from '@/libs/cocos/data/ELayer';\nimport { factoryChildNode } from '@/libs/cocos/helpers/factoryChildNode';\nimport { factoryComponent } from '@/libs/cocos/helpers/factoryComponent';\nimport { factorySprite } from '@/libs/cocos/helpers/factorySprite';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { hexRadius } from '@/libs/math/hexRadius';\nimport { assets } from '@/features/Assets/data/assets';\nimport {\n    Button,\n    EventHandler,\n    UITransform,\n    Color,\n    SpriteFrame,\n    CCString,\n    Layout,\n    Widget,\n    Sprite,\n    CCBoolean,\n    CCInteger,\n    Node,\n    instantiate,\n    BlockInputEvents,\n} from 'cc';\nimport { observable } from 'vendors/mobx';\nimport { getAllComponents } from '@/libs/cocos/helpers/getAllComponents';\n\ntype TButtonActionSize = EButtonSize.S80 | EButtonSize.S100;\n\nconst AvailableSizes: TButtonActionSize[] = [EButtonSize.S80, EButtonSize.S100];\n\nconst ButtonSizeMap: Record<\n    TButtonActionSize,\n    { leftBg: TResourceSprite; rightBg: TResourceSprite; iconOnlyBg: TResourceSprite; contentSize: number }\n> = {\n    [EButtonSize.S80]: {\n        leftBg: 'ButtonActionLeft_80',\n        rightBg: 'ButtonActionRight_80',\n        iconOnlyBg: 'ButtonActionIcon_80',\n        contentSize: 36,\n    },\n    [EButtonSize.S100]: {\n        leftBg: 'ButtonActionLeft_100',\n        rightBg: 'ButtonActionRight_100',\n        iconOnlyBg: 'ButtonActionIcon_100',\n        contentSize: 42,\n    },\n};\n\nconst DISABLED_COLOR = new Color(32, 35, 51, 51);\nconst DISABLED_LABEL_COLOR = new Color(DISABLED_COLOR.r, DISABLED_COLOR.g, DISABLED_COLOR.b, 76);\n\n@ccclass('ButtonAction')\nexport class ButtonAction extends Observer {\n    protected iconComponent: Sprite | null = null;\n\n    protected labelComponent: UiLabel | null = null;\n\n    protected buttonComponent: Button | null = null;\n\n    protected bgComponent: UiBackground | Sprite | null = null;\n\n    protected bgNode: Node | null = null;\n\n    protected disabledBgNode: Node | null = null;\n\n    @observable disabled = false;\n\n    @property({ type: [EventHandler], displayOrder: 20 })\n    clickEvents: EventHandler[] = [];\n\n    @property(Color)\n    color: Color = Color.WHITE.clone();\n\n    @property(CCString)\n    @observable\n    label: string = '';\n\n    @property({\n        visible(this: ButtonAction) {\n            return Boolean(this.label);\n        },\n    })\n    labelColor = Color.WHITE.clone();\n\n    @property(SpriteFrame)\n    @observable\n    icon: SpriteFrame | null = null;\n\n    @property({\n        visible(this: ButtonAction) {\n            return Boolean(this.icon);\n        },\n    })\n    iconColor = Color.WHITE.clone();\n\n    @property({\n        type: CCInteger,\n        visible(this: ButtonAction) {\n            return Boolean(this.icon && !this.label);\n        },\n    })\n    iconSize: number = 36;\n\n    @property({\n        type: CCBoolean,\n        visible(this: ButtonAction) {\n            return Boolean(this.icon && !this.label);\n        },\n    })\n    iconBgRotated = false;\n\n    @property\n    castShadow = true;\n\n    @cached\n    get uiTransform() {\n        return this.getComponent(UITransform);\n    }\n\n    @cached\n    get size(): TButtonActionSize {\n        const height = this.uiTransform?.height ?? 0;\n\n        const sizes = AvailableSizes.slice().sort((a, b) => {\n            return a - b;\n        });\n\n        let i = 0;\n\n        while (sizes[i + 1] && sizes[i + 1] <= height) {\n            i++;\n        }\n\n        return sizes[i];\n    }\n\n    __preload() {\n        this.buttonComponent = this.addComponent(Button);\n\n        if (this.buttonComponent) {\n            this.buttonComponent.clickEvents = this.clickEvents.slice();\n            this.buttonComponent.transition = Button.Transition.SCALE;\n            this.buttonComponent.zoomScale = BUTTON_TRANSITION_SCALE;\n            this.buttonComponent.duration = BUTTON_TRANSITION_TIME;\n        }\n\n        const { leftBg, rightBg, iconOnlyBg, contentSize } = ButtonSizeMap[this.size];\n\n        this.bgNode = factoryChildNode(this.node, (bgNode) => {\n            if (this.label) {\n                const [startSprite, endSprite] = assets.getSprites([leftBg, rightBg]);\n\n                this.bgComponent = bgNode.addComponent(UiBackground);\n\n                this.bgComponent.initialize({\n                    startSprite,\n                    endSprite,\n                    color: this.color.clone(),\n                    castShadow: this.castShadow,\n                });\n            } else {\n                if (this.iconBgRotated) {\n                    bgNode.angle = 90;\n                }\n\n                const bgSprite = assets.getSprites(iconOnlyBg);\n\n                if (this.castShadow) {\n                    bgNode.layer = ELayer.UI_2D_SHADOW_CAST;\n                }\n\n                const bgTransform = bgNode.addComponent(UITransform);\n\n                bgTransform.height = this.size;\n                bgTransform.width = Math.round(hexRadius(bgTransform.height));\n\n                this.bgComponent = factorySprite(bgNode, bgSprite, this.color);\n            }\n        });\n\n        if (this.label || this.icon) {\n            factoryChildNode(this.node, (wrapperNode) => {\n                const wrapperLayout = wrapperNode.addComponent(Layout);\n\n                wrapperLayout.type = Layout.Type.HORIZONTAL;\n                wrapperLayout.resizeMode = Layout.ResizeMode.CONTAINER;\n                wrapperLayout.spacingX = 8;\n\n                const wrapperWidget = wrapperNode.addComponent(Widget);\n\n                wrapperWidget.isAlignHorizontalCenter = true;\n                wrapperWidget.horizontalCenter = 0;\n                wrapperWidget.isAlignVerticalCenter = true;\n                wrapperWidget.verticalCenter = 0;\n\n                if (this.icon) {\n                    factoryChildNode(wrapperNode, (iconNode) => {\n                        const iconTransform = iconNode.addComponent(UITransform);\n\n                        iconTransform.width = iconTransform.height = this.label ? contentSize : this.iconSize;\n\n                        this.iconComponent = factorySprite(iconNode, this.icon, this.iconColor);\n                    });\n                }\n\n                if (this.label) {\n                    factoryChildNode(wrapperNode, (labelNode) => {\n                        const font = assets.getFonts('Nunito-Bold');\n\n                        this.labelComponent = labelNode.addComponent(UiLabel);\n\n                        this.labelComponent.enableWrapText = false;\n                        this.labelComponent.font = font;\n                        this.labelComponent.color = this.labelColor;\n                        this.labelComponent.fontSize = this.labelComponent.lineHeight = contentSize;\n                        this.labelComponent.string = this.label;\n                    });\n                }\n            });\n        }\n\n        super.__preload();\n    }\n\n    render() {\n        const isEnabled = !this.disabled;\n\n        if (this.buttonComponent && this.buttonComponent.interactable !== isEnabled) {\n            this.buttonComponent.interactable = isEnabled;\n\n            if (this.labelComponent) {\n                this.labelComponent.color = isEnabled ? this.labelColor : DISABLED_LABEL_COLOR;\n            }\n\n            if (!this.disabledBgNode && this.bgNode) {\n                this.disabledBgNode = instantiate(this.bgNode);\n\n                const sprites = getAllComponents(this.disabledBgNode, Sprite);\n\n                sprites.forEach((sprite) => (sprite.color = DISABLED_COLOR.clone()));\n\n                const disabledBg = this.disabledBgNode.getComponent(UiBackground);\n\n                if (disabledBg) {\n                    disabledBg.color = DISABLED_COLOR.clone();\n                }\n\n                this.disabledBgNode.addComponent(BlockInputEvents);\n\n                this.node.addChild(this.disabledBgNode);\n            }\n\n            if (this.disabledBgNode) {\n                this.disabledBgNode.active = !isEnabled;\n            }\n\n            if (this.bgNode) {\n                this.bgNode.active = isEnabled;\n            }\n        }\n    }\n}\n","import { ButtonAction } from '@/features/Button/components/ButtonAction';\nimport { ComponentPath } from '@/libs/cocos/components/ComponentPath';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { runInAction } from 'vendors/mobx';\n\n@ccclass('ButtonDisabled')\nexport class ButtonDisabled extends Observer {\n    @property(ComponentPath)\n    isDisabled: ComponentPath;\n\n    @property\n    isReversed = false;\n\n    @cached\n    get button() {\n        return this.node.getComponent(ButtonAction);\n    }\n\n    render() {\n        let isDisabled = Boolean(this.isDisabled.exec());\n\n        if (this.isReversed) {\n            isDisabled = !isDisabled;\n        }\n\n        runInAction(() => {\n            if (this.button) {\n                this.button.disabled = isDisabled;\n            }\n        });\n    }\n}\n","import { DiWorld } from '@/features/Di/components/DiWorld';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { state } from '@/states/state';\nimport { Widget, Node, tween, Tween, Label } from 'cc';\nimport { computed } from 'vendors/mobx';\n\nconst ROTATE_DURATION = 1;\n\n@ccclass('ButtonTurn')\nexport class ButtonTurn extends Observer {\n    @property(Node)\n    outer: Node;\n\n    @property(Node)\n    inner: Node;\n\n    @property(Node)\n    label: Node;\n\n    @cached\n    get startTurn() {\n        return state.turnState.turn;\n    }\n\n    @computed\n    get angle() {\n        return -60 * (state.turnState.turn - this.startTurn) + this.fullTurn * 360;\n    }\n\n    @cached\n    get labelComponent() {\n        return this.label.getComponent(Label);\n    }\n\n    fullTurn = 0;\n\n    turnAnimation: Tween<Node> | null = null;\n\n    onLoad() {\n        const { worldUi } = DiWorld;\n\n        const wrapperWidget = worldUi.contentNode.getComponent(Widget);\n        const widget = this.node.getComponent(Widget);\n\n        if (widget && wrapperWidget) {\n            widget.bottom -= wrapperWidget.bottom;\n            widget.updateAlignment();\n        }\n\n        if (this.labelComponent) {\n            this.labelComponent.string = state.turnState.date;\n        }\n    }\n\n    render() {\n        if (this.turnAnimation) {\n            this.turnAnimation.stop();\n            this.turnAnimation = null;\n        }\n\n        this.turnAnimation = tween(this.outer)\n            .to(ROTATE_DURATION, { angle: this.angle }, { easing: 'cubicInOut' })\n            .call(() => {\n                if (this.outer.angle <= -360) {\n                    this.fullTurn += Math.floor(Math.abs(this.outer.angle / 360));\n                    this.outer.angle = this.outer.angle % 360;\n                }\n\n                if (this.labelComponent) {\n                    this.labelComponent.string = state.turnState.date;\n                }\n            })\n            .start();\n    }\n}\n","export function cached<T>(_target: any, name: PropertyKey, descriptor: TypedPropertyDescriptor<T>) {\n    const getter = descriptor.get;\n\n    if (!getter) throw new TypeError('Getter property descriptor expected');\n\n    return {\n        configurable: true,\n        get(this: T): T {\n            const value = getter.call(this);\n\n            Object.defineProperty(this, name, {\n                configurable: descriptor.configurable,\n                enumerable: descriptor.enumerable,\n                writable: false,\n                value,\n            });\n\n            return value;\n        },\n    };\n}\n","import { Vec3 } from 'cc';\nimport { action, observable } from 'vendors/mobx';\nimport type { IChunkData } from '@/features/Chunk/types/IChunkData';\nimport type { ITileProps } from '@/features/Tile/components/Tile';\nimport { Tile } from '@/features/Tile/components/Tile';\nimport { generateChunk } from '@/features/WorldGenerator/helpers/generateChunk';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { factoryComponent } from '@/libs/cocos/helpers/factoryComponent';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport type { HexagonChunk } from '@/libs/hexagon/HexagonChunk';\nimport { toVec3 } from '@/libs/math/toVec3';\nimport { state } from '@/states/state';\nimport { ChunkNewButton } from '@/features/Chunk/components/ChunkNewButton';\nimport type { IChunkNewButtonProps } from '@/features/Chunk/components/ChunkNewButton';\n\nexport interface IChunkProps {\n    coords: Vec3;\n    data: IChunkData | null;\n}\n\n@ccclass('Chunk')\nexport class Chunk extends Observer {\n    hex: HexagonChunk<Chunk>;\n\n    tiles: Tile[] = [];\n\n    @observable data: IChunkData | null;\n\n    initialize({ coords, data }: IChunkProps) {\n        const { chunksMap } = state.worldState;\n\n        this.hex = chunksMap.add(coords, this);\n        this.data = data;\n    }\n\n    draw() {\n        if (!this.data) {\n            factoryComponent<IChunkNewButtonProps, ChunkNewButton>(ChunkNewButton, this.node, {\n                hexHeight: this.hex.hexHeight,\n                hexRadius: this.hex.hexRadius,\n                onClick: this.generate,\n            });\n\n            return;\n        }\n\n        this.tiles = this.data.tiles.map((tileData) =>\n            factoryComponent<ITileProps, Tile>(Tile, this.node, {\n                coords: toVec3(tileData.coords),\n                chunk: this,\n                data: tileData,\n            }),\n        );\n\n        this.hex.neighbors.forEach((coords) => {\n            const { chunksMap } = state.worldState;\n\n            if (!chunksMap.get(coords) && this.node.parent) {\n                const chunk = factoryComponent<IChunkProps, Chunk>(Chunk, this.node.parent, { coords, data: null });\n\n                chunk.draw();\n            }\n        });\n    }\n\n    @action.bound\n    generate() {\n        if (!this.data) {\n            this.node.destroyAllChildren();\n\n            this.data = generateChunk(this.hex.coords);\n\n            this.draw();\n        }\n    }\n\n    onLoad() {\n        this.node.setWorldPosition(new Vec3(this.hex.positionX, 0, this.hex.positionZ));\n    }\n}\n","import { Vec3 } from 'cc';\nimport { TILE_BASE_HEIGHT, TILE_HEIGHT_MULTIPLIER, TILE_SEA_LEVEL } from '@/features/Tile/data/consts';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport { getBuildRoute } from '@/routes/BuildRoute/helpers/getBuildRoute';\nimport { factoryComponent } from '@/libs/cocos/helpers/factoryComponent';\nimport { IUi3DProps, Ui3D } from '@/features/Ui/components/Ui3D';\n\nexport interface IChunkNewButtonProps {\n    hexHeight: number;\n    hexRadius: number;\n    onClick: () => void;\n}\n\n@ccclass('ChunkNewButton')\nexport class ChunkNewButton extends Observer {\n    private ui?: Ui3D;\n\n    hexHeight: number;\n\n    hexRadius: number;\n\n    onClick: () => void;\n\n    initialize({ hexHeight, hexRadius, onClick }: IChunkNewButtonProps) {\n        this.hexHeight = hexHeight;\n        this.hexRadius = hexRadius;\n        this.onClick = onClick;\n    }\n\n    onLoad() {\n        this.node.setPosition(new Vec3(0, TILE_BASE_HEIGHT + TILE_HEIGHT_MULTIPLIER * TILE_SEA_LEVEL, 0));\n\n        this.ui = factoryComponent<IUi3DProps, Ui3D>(Ui3D, this.node, {\n            sprite: 'newChunkButton',\n            onTap: this.onClick,\n            rotation: new Vec3(90, 30, 0),\n        });\n\n        this.ui.node.active = false;\n    }\n\n    render() {\n        const isActive = Boolean(getBuildRoute()?.isChunkMode);\n\n        if (this.ui) {\n            this.ui.node.active = isActive;\n        }\n    }\n}\n","export function clamp(value: number, [min, max]: readonly [null | number, null | number]) {\n    return Math.max(min || -Infinity, Math.min(value, max || Infinity));\n}\n","import { _decorator } from 'cc';\n\nconst { ccclass, property } = _decorator;\n\nexport { ccclass, property };\n","import { CCClass, Enum, Node } from 'cc';\nimport { property, ccclass } from '@/libs/decorators/cocos';\nimport { getAllPropertyDescriptors } from '@/libs/helpers/getAllPropertyDescriptors';\n\n@ccclass('ComponentPath')\nexport class ComponentPath {\n    @property(Node)\n    target: Node;\n\n    get targetComponents() {\n        if (!this.target) {\n            return [];\n        }\n\n        const components = this.target.components;\n\n        return components.map((component) => {\n            const name = component.constructor.name;\n\n            return { name, value: name };\n        });\n    }\n\n    @property({\n        type: Enum({}),\n        visible(this: ComponentPath) {\n            const visible = Boolean(this.target);\n\n            if (visible) {\n                CCClass.Attr.setClassAttr(this, 'component', 'enumList', this.targetComponents);\n            }\n\n            return visible;\n        },\n    })\n    public component: string = '';\n\n    get realComponent() {\n        if (this.component) {\n            return this.target.getComponent(this.component);\n        }\n\n        return null;\n    }\n\n    get componentProperties() {\n        const component = this.realComponent;\n\n        if (!component) {\n            return [];\n        }\n\n        const properties = getAllPropertyDescriptors(component, 1);\n\n        return Object.entries(properties)\n            .filter(([, desc]) => {\n                return Boolean(desc.get);\n            })\n            .map(([name]) => {\n                return { name, value: name };\n            });\n    }\n\n    @property({\n        type: Enum({}),\n        visible(this: ComponentPath) {\n            const visible = Boolean(this.realComponent);\n\n            if (visible) {\n                CCClass.Attr.setClassAttr(this, 'property', 'enumList', this.componentProperties);\n            }\n\n            return visible;\n        },\n    })\n    public property: string = '';\n\n    exec<T>(): T | null {\n        const { realComponent: component, property } = this;\n\n        if (component && property in component) {\n            return (component as any)[property] as T;\n        }\n\n        console.error(`Cannot find path ${property} in ${this.component}`);\n\n        return null;\n    }\n}\n","export const BUILD_PROGRESS_LIMITS = [0, 1] as const;\nexport const BUILD_PROGRESS_MAX = BUILD_PROGRESS_LIMITS[1];\nexport const BUILD_PROGRESS_STAGES: TResourcePrefab[] = ['building_stage_A', 'building_stage_B', 'building_stage_C']\n\nexport const BUILDING_ROTATION_INIT = 30;\n","export const MAX_BIOME_TILE_HEIGHT = 2;\n","export const LIMITS = [-1, 1] as const; // zoom and rotation can be from -1 to 1\nexport const CAMERA_POSITION_OFFSET = 15; // difference in position for camera Y/Z\nexport const CAMERA_ROTATION_OFFSET = 10; // degrees for zoom difference in camera Y rotation\n\nexport const TARGET_ROTATE_OFFSET = 180; // half the circle, for rotation from -180 to 180\n\nexport const MOVE_DIVIDER = 14; // if biger, then faster\nexport const ZOOM_MOVE_INFLUENCE = 8; // different zooms levels multiplies speed\nexport const DOUBLE_TOUCH_TIME = 250; // ms to activate double touch type\n\nexport const MOVE_SAFEZONE = 20; // safe zone from farthest chunk\n\nexport const IMPULSE_DURATION = 4; // seconds, duration of move implulse animation\nexport const IMPULSE_STRENGTH = 1.5; // we multiply touch impulse by that strength\nexport const IMPULSE_LENGTH = 0.05; // delta vector must have such length to activate impulse\n\nexport const DEFAULT_NAVIGATE_DURATION = 1; // seconds, default navigation time\n\nexport const ROTATE_SPEED = 8; // the bigger - the slower is rotate\n\nexport const FIXED_ROTATE_LIMIT = 5; // we convert angles with toFixed()\nexport const FIXED_POSITION_LIMIT = 20; // we convert position with toFixed()\n\nexport const TAP_MAX_MOVED_TIMES = 50; // if we move faster than this, we will not tap\nexport const TAP_TIME = 100; // if we released touch event fewer than this, we will tap\n\nexport const MAX_TOUCH_SIZE = 720; // same as x2 base screen width\n","import { Vec3 } from 'cc';\n\nexport const WORLD_CENTER = new Vec3(0, 0, 0);\n\nexport const WORLD_CENTER_HEIGHT = 6;\n","export const BUTTON_TRANSITION_TIME = 0.1;\nexport const BUTTON_TRANSITION_SCALE = 0.96;\n","export const START_YEAR = 1554;\nexport const START_MONTH = 2;\n\nexport const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nexport const YEAR_LENGTH = MONTHS.length;\n","import type { HexagonOptions } from '@/libs/hexagon/Hexagon';\nimport { hexRadius } from '@/libs/math/hexRadius';\n\nexport const HEX_HEIGHT = 1;\n\nexport const HEX_RADIUS = hexRadius(HEX_HEIGHT);\n\nexport const HEX_OPTIONS: HexagonOptions = {\n    hexHeight: HEX_HEIGHT,\n    hexRadius: HEX_RADIUS,\n};\n","export const TILE_HEIGHT_MULTIPLIER = 0.2;\n\nexport const TILE_SEA_LEVEL = 5;\n\nexport const TILE_HEIGHT_LIMITS = [0, 10] as const;\n\nexport const TILE_BASE_HEIGHT = 1;\n","import { isPromise } from '@/libs/helpers/isPromise';\n\nexport function createFactory<T>(init: () => Promise<T>): () => Promise<T> | T;\nexport function createFactory<T>(init: () => T): () => T;\nexport function createFactory<T>(init: () => Promise<T> | T): () => Promise<T> | T {\n    let instance: T | null = null;\n\n    return () => {\n        if (!instance) {\n            const value = init();\n\n            if (isPromise(value)) {\n                return Promise.resolve(init()).then((v) => {\n                    instance = v;\n\n                    return instance;\n                });\n            }\n\n            instance = value;\n        }\n\n        return instance;\n    };\n}\n","import { EEventName } from '@/libs/cocos/data/EEventName';\nimport { addMeshCollider } from '@/libs/cocos/helpers/addMeshCollider';\nimport { ITapEvent } from '@/libs/cocos/types/ITapEvent';\nimport type { Material, Prefab, Node, Vec3 } from 'cc';\nimport { MeshRenderer, instantiate } from 'cc';\n\ninterface ICreatePrefabOptions {\n    materials?: Material[];\n    position?: Vec3;\n    parent?: Node;\n    scale?: Vec3;\n    rotation?: Vec3;\n    castShadows?: boolean;\n    receiveShadows?: boolean;\n    onTap?: (event: ITapEvent) => void;\n}\n\nexport function createPrefabNode(\n    prefab: Prefab,\n    { parent, materials, position, scale, rotation, castShadows, receiveShadows, onTap }: ICreatePrefabOptions = {},\n) {\n    const node = instantiate(prefab);\n    const meshes = node.getComponentsInChildren(MeshRenderer);\n\n    if (materials?.length) {\n        materials.forEach((material, index) => {\n            meshes.forEach((mesh) => mesh.setSharedMaterial(material, index));\n        });\n    }\n\n    if (position) {\n        node.setPosition(position);\n    }\n\n    if (scale) {\n        node.setScale(scale);\n    }\n\n    if (rotation) {\n        node.setRotationFromEuler(rotation);\n    }\n\n    if (meshes.length) {\n        meshes.forEach((mesh) => {\n            mesh.shadowCastingMode = castShadows ? 1 : 0;\n            mesh.receiveShadow = receiveShadows ? 1 : 0;\n        });\n    }\n\n    if (onTap) {\n        const colliders = addMeshCollider(node, { isTrigger: true });\n\n        colliders.forEach((collider) => {\n            collider.node.on(EEventName.Tap, onTap);\n        });\n    }\n\n    if (parent) {\n        parent.addChild(node);\n    }\n\n    return node;\n}\n","import { CustomBlurPass } from '@/features/CustomPostProcess/data/CustomBlurPass';\nimport { _decorator, Material, EffectAsset, rendering, Vec4, postProcess, RenderTexture, director, Director, game, Game } from 'cc';\n\nconst { ccclass, property, menu, executeInEditMode } = _decorator;\n\n@ccclass('CustomBlur')\n@menu('PostProcess/CustomBlur')\n@executeInEditMode\nexport class CustomBlur extends postProcess.PostProcessSetting {\n    @property(RenderTexture)\n    mask: RenderTexture | undefined;\n\n    @property(EffectAsset)\n    private _effectAsset: EffectAsset | undefined;\n\n    get effect() {\n        return this._effectAsset;\n    }\n\n    @property(EffectAsset)\n    set effect(value) {\n        this._effectAsset = value;\n\n        if (!this._effectAsset) {\n            this._material?.destroy();\n            this._material = null;\n        } else {\n            if (this._material) {\n                this._material.reset({ effectAsset: this._effectAsset });\n            } else {\n                this._material = new Material();\n                this._material.initialize({ effectAsset: this._effectAsset });\n            }\n\n            this.updateMaterial();\n        }\n    }\n\n    @property\n    iterations = 3;\n\n    @property\n    set blurRadius(value) {\n        this._blurParams.x = value;\n        this.updateMaterial();\n    }\n\n    get blurRadius() {\n        return this._blurParams.x;\n    }\n\n    private _material: Material | null = null;\n\n    public get material(): Material | null {\n        return this._material;\n    }\n\n    private _blurParams: Vec4 = new Vec4(4.0, 0.0, 0.0, 0.0);\n\n    public get blurParams(): Vec4 {\n        return this._blurParams;\n    }\n\n    updateMaterial() {\n        if (!this._material) {\n            return;\n        }\n\n        if (this.mask) {\n            this._material.setProperty('maskTexture', this.mask);\n        }\n\n        this._material.setProperty('blurParams', this.blurParams);\n    }\n\n    protected start(): void {\n        if (!this._material) {\n            this._material = new Material();\n            this._material.initialize({ effectAsset: this._effectAsset });\n            this.updateMaterial();\n        }\n\n        let builder = rendering.getCustomPipeline('Custom') as postProcess.PostProcessBuilder;\n\n        if (builder) {\n            builder.insertPass(new CustomBlurPass(CustomBlur), postProcess.BlitScreenPass);\n        }\n    }\n}\n","import { CustomBlur } from '@/features/CustomPostProcess/components/CustomBlur';\nimport { TComponentClass } from '@/libs/cocos/types/TComponentClass';\nimport { gfx, renderer, rendering, postProcess } from 'cc';\n\nconst FORMAT = gfx.Format.RGBA8;\n\nexport class CustomBlurPass<T extends CustomBlur> extends postProcess.SettingPass {\n    private settingClass: TComponentClass<T>;\n\n    constructor(settingClass: TComponentClass<T>) {\n        super();\n        this.settingClass = settingClass;\n    }\n\n    get setting() {\n        return this.getSetting(this.settingClass);\n    }\n\n    checkEnable(camera: renderer.scene.Camera) {\n        let enable = super.checkEnable(camera);\n        if (postProcess.disablePostProcessForDebugView()) {\n            enable = false;\n        }\n        return enable && this.setting.material != null;\n    }\n\n    name = 'CustomBlurPass';\n    outputNames = ['CustomBlurMap'];\n\n    public render(camera: renderer.scene.Camera, _ppl: rendering.Pipeline): void {\n        const setting = this.setting;\n\n        if (!setting.material) {\n            return;\n        }\n\n        let passContext = this.context;\n        passContext.material = setting.material;\n\n        const cameraID = this.getCameraUniqueID(camera);\n\n        passContext.clearBlack();\n\n        let input = this.lastPass!.slotName(camera, 0);\n        for (let i = 0; i < setting.iterations; ++i) {\n            passContext\n                .updatePassViewPort()\n                .addRenderPass(`blur-x`, `blur-x${cameraID}`)\n                .setPassInput(input, 'outputResultMap')\n                .addRasterView('CustomBlurMap_TMP', FORMAT)\n                .blitScreen(0)\n                .version();\n\n            passContext\n                .updatePassViewPort()\n                .addRenderPass(`blur-y`, `blur-y${cameraID}`)\n                .setPassInput(input, 'outputResultMap')\n                .setPassInput('CustomBlurMap_TMP', 'outputResultMap')\n                .addRasterView(this.slotName(camera), FORMAT)\n                .blitScreen(1)\n                .version();\n\n            input = this.slotName(camera);\n        }\n    }\n}\n","const HALF_CIRCLE = 180;\n\nexport function degreeToRadian(degree: number): number {\n    return degree * (Math.PI / HALF_CIRCLE);\n}\n","import { ccclass, property } from '@/libs/decorators/cocos';\nimport { Component, Prefab } from 'cc';\n\n@ccclass('DiTemplate')\nexport class DiTemplate extends Component {\n    static instance: DiTemplate | null = null;\n\n    constructor(name: string) {\n        super(name);\n\n        DiTemplate.instance = this;\n    }\n\n    @property([Prefab])\n    templates: Prefab[] = [];\n\n    getTemplate(template: TResourceTemplate) {\n        return this.templates.find((prefab) => {\n            return prefab.data.name === template;\n        });\n    }\n\n    static get(template: TResourceTemplate): Prefab {\n        if (!DiTemplate.instance) {\n            throw new Error('Di template is not initalized!');\n        }\n\n        const prefab = DiTemplate.instance.getTemplate(template);\n\n        if (!prefab) {\n            throw new Error(`Di template ${template} not found!`);\n        }\n\n        return prefab;\n    }\n}\n","import { WorldCamera } from '@/features/WorldCamera/components/WorldCamera';\nimport { WorldUi } from '@/features/WorldUi/components/WorldUi';\nimport { TComponentClass } from '@/libs/cocos/types/TComponentClass';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { Component } from 'cc';\n\nconst DI_MAP_DATA: [TComponentClass<Component>, keyof DiWorld][] = [\n    [WorldCamera, 'worldCamera'],\n    [WorldUi, 'worldUi'],\n];\n\nconst DI_MAP = new Map(DI_MAP_DATA);\n\n@ccclass('DiWorld')\nexport class DiWorld extends Component {\n    static instance: DiWorld | null = null;\n\n    constructor(name: string) {\n        super(name);\n\n        DiWorld.instance = this;\n    }\n\n    @property(WorldCamera)\n    worldCamera: WorldCamera;\n\n    @property(WorldUi)\n    worldUi: WorldUi;\n\n    static get<T extends Component>(Comp: TComponentClass<T>): T {\n        if (!DiWorld.instance) {\n            throw new Error('Di is not initalized!');\n        }\n\n        const key = DI_MAP.get(Comp);\n\n        if (!key) {\n            throw new Error(`Di key ${key} do not exist!`)\n        }\n\n        return DiWorld.instance[key] as T;\n    }\n\n    static get worldCamera() {\n        return DiWorld.get(WorldCamera);\n    }\n\n    static get worldUi() {\n        return DiWorld.get(WorldUi);\n    }\n}\n","import { clamp } from '@/libs/math/clamp';\n\nconst LIMTIS = [0, 1] as const;\n\nexport function easeOutSine(x: number): number {\n    return Math.sin((clamp(x, LIMTIS) * Math.PI) / 2);\n}\n","export enum EBiomeObject {\n    Forest = 'forest',\n    ForestRocks = 'forest-rocks',\n    Mountain = 'mountain',\n    Rocks = 'rocks',\n    Hill = 'hill',\n}\n\nexport enum EBiomeTile {\n    Clay = 'clay',\n    Sand = 'sand',\n    Sea = 'sea',\n    River = 'river',\n    Lake = 'lake',\n}\n\nexport const BIOME_OBJECT_KEYS = Object.values(EBiomeObject);\n\nexport const BIOME_TILE_KEYS = Object.values(EBiomeTile);\n\nexport type EBiome = EBiomeObject | EBiomeTile;\n","export enum EBiomeSize {\n    Tiny = 'tiny',\n    Small = 'small',\n    Medium = 'medium',\n    Large = 'large',\n}\n","export enum EBuilding {\n    Lumberjack = 'lumberjack',\n    Sawmill = 'sawmill',\n    Quarry = 'quarry',\n    Castle = 'castle',\n}\n","export enum EButtonSize {\n    S80 = 80,\n    S100 = 100,\n}\n","export enum EEventName {\n    Tap = 'tap',\n}\n","import { Layers } from 'cc';\n\ninterface ILayerCustom {\n    PHOTOBOOTH: number;\n    UI_2D_SHADOW_CAST: number;\n    UI_2D_SHADOW_RECEIVE: number;\n}\n\nexport const ELayer = Layers.Enum as unknown as typeof Layers.Enum & ILayerCustom;\n","export enum EMoveType {\n    Default = 1, // movement\n    TwoFinger = 2, // when two fingers are on screen (zoom + rotate)\n    DoubleTouch = 3, // when double tapped the screen (zoom + rotate)\n    Impulse = 4, // impulse after movement\n    Rotate = 5, // rotate to preview\n    Navigate = 6, // camera navigation\n}\n","export enum EResource {\n    Log = 'log',\n    Plank = 'plank',\n    Stone = 'stone',\n}\n","export enum ERouteName {\n    Pause = 'pause',\n    World = 'world',\n    Build = 'build',\n    Resources = 'resources',\n}\n","export enum EWorldRouteMode {\n    Add = 'add',\n    Build = 'build',\n    View = 'view',\n}\n","import { Node } from 'cc';\n\nexport function factoryChildNode(parent: Node, setup?: (node: Node) => void) {\n    const node = new Node();\n\n    node.layer = parent.layer;\n\n    setup?.(node);\n\n    parent.addChild(node);\n\n    return node;\n}\n","import { TComponentClass } from '@/libs/cocos/types/TComponentClass';\nimport type { Component } from 'cc';\nimport { Node } from 'cc';\n\ninterface IComponent<P> extends Component {\n    initialize(props: P): void;\n}\n\nexport function factoryComponent<P, C extends IComponent<P>>(Comp: TComponentClass<C>, parent: Node, props: P) {\n    const node = new Node();\n\n    node.layer = parent.layer;\n\n    const component = node.addComponent(Comp);\n\n    (component as any).initialize?.(props);\n\n    parent.addChild(node);\n\n    return component;\n}\n","import { Color, Sprite, SpriteFrame, Node } from 'cc';\n\nexport function factorySprite(node: Node, spriteFrame: SpriteFrame | null, color: Color = Color.WHITE) {\n    const component = node.addComponent(Sprite);\n\n    component.color = color.clone();\n    component.trim = false;\n    component.sizeMode = Sprite.SizeMode.CUSTOM;\n    component.type = Sprite.Type.SIMPLE;\n    if (spriteFrame) {\n        component.spriteFrame = spriteFrame;\n    }\n\n    return component;\n}\n","import { DiTemplate } from '@/features/Di/components/DiTemplate';\nimport { TemplateComponent } from '@/libs/cocos/components/TemplateComponent';\nimport { TComponentClass } from '@/libs/cocos/types/TComponentClass';\nimport { Component, instantiate, Node } from 'cc';\n\ninterface IComponent<P> extends Component {\n    initialize?(props: P): void;\n}\n\nexport function factoryTemplateComponent<P, T extends TemplateComponent & IComponent<P>>(Comp: TComponentClass<T> & { template: TResourceTemplate }, parent: Node, props?: P) {\n    const template = DiTemplate.get(Comp.template);\n    const node = instantiate(template);\n    const component = node.getComponent(Comp);\n\n    if (!component) {\n        throw new Error(`Cannot find ${component} in template ${Comp.template}!`);\n    }\n\n    if (props) {\n        (component as any).initialize?.(props);\n    }\n\n    node.layer = parent.layer;\n\n    parent.addChild(node);\n\n    return component;\n}\n","type Nullable<T> = '' | 0 | T | false | null | undefined;\n\nexport function filterNullable<T>(arr: Nullable<T>[]) {\n    return arr.filter<T>((item): item is T => Boolean(item) || item === 0);\n}\n","import { biomeSizeMaps } from '@/features/Biome/data/biomeSizeMaps';\nimport type { EBiomeObject, EBiome } from '@/features/Biome/data/EBiome';\nimport { BIOME_OBJECT_KEYS } from '@/features/Biome/data/EBiome';\nimport { getBiomeActualSize } from '@/features/Biome/helpers/getBiomeActualSize';\nimport type { IBiomeBaseData } from '@/features/Biome/types/IBiomeData';\nimport type { IGeneratorOptions } from '@/features/WorldGenerator/types/IGeneratorOptions';\nimport type { INeigborBiome } from '@/features/WorldGenerator/types/INeigborBiome';\n\nexport function findBiomeNeighbors<T extends IBiomeBaseData>(\n    biomeKey: EBiome,\n    { neighbors }: IGeneratorOptions,\n): INeigborBiome<T>[] {\n    const sizeMap = biomeSizeMaps[biomeKey];\n    const isObject = BIOME_OBJECT_KEYS.includes(biomeKey as EBiomeObject);\n\n    const biomeNeighbors = neighbors.reduce<INeigborBiome<T>[]>((result, tile) => {\n        const biome = isObject ? tile.biomeObject : tile.biomeTile;\n\n        if (biome?.key === biomeKey) {\n            const { size, bordersSize } = getBiomeActualSize(tile.coords, biome.id, biomeKey, neighbors);\n\n            result.push({\n                biome: biome as unknown as T,\n                size,\n                bordersSize,\n                diff: (sizeMap?.[biome.size] || 0) - size,\n                tile,\n            });\n        }\n\n        return result;\n    }, []);\n\n    return biomeNeighbors.sort((a, b) => b.diff - a.diff);\n}\n","import type { ITileData } from '@/features/Tile/types/ITileData';\n\nexport function findMinHeight(tiles: ITileData[] | undefined) {\n    return (tiles || []).reduce<number | null>((result, tile) => {\n        if (!result || tile.height < result) {\n            return tile.height;\n        }\n\n        return result;\n    }, null);\n}\n","import { waterTiles } from '@/features/Biome/data/waterTiles';\nimport type { IBiomeTileData } from '@/features/Biome/types/IBiomeData';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport type { IGeneratorOptions } from '@/features/WorldGenerator/types/IGeneratorOptions';\nimport type { INeigborBiome } from '@/features/WorldGenerator/types/INeigborBiome';\n\nexport function findWaterNeighbors(options: IGeneratorOptions) {\n    return waterTiles.reduce<INeigborBiome<IBiomeTileData>[]>(\n        (result, biome) => [...result, ...findBiomeNeighbors<IBiomeTileData>(biome, options)],\n        [],\n    );\n}\n","import type { IVec3Like, Quat } from 'cc';\nimport { Vec3 } from 'cc';\n\nexport function fromQuat(quat: Quat): IVec3Like {\n    return quat.getEulerAngles(new Vec3());\n}\n","import type { IVec3Like, Vec3 } from 'cc';\n\nexport function fromVec3(vec: Vec3): IVec3Like {\n    return { x: vec.x, y: vec.y, z: vec.z };\n}\n","import type { IVec2Like, IVec3Like } from 'cc';\n\nexport function fromVec3ToVec2(vec: IVec3Like): IVec2Like {\n    return { x: vec.x, y: vec.z };\n}\n","import { ResourcesState, IResourcesState } from '@/states/ResourcesState/ResourcesState';\nimport { TurnState, ITurnState } from '@/states/TurnState/TurnState';\nimport { WorldState, IWorldState } from '@/states/WorldState/WorldState';\n\ninterface IGameState {\n    turnState: ITurnState;\n    worldState: IWorldState;\n    resourcesState: IResourcesState;\n}\n\nexport class GameState {\n    turnState: TurnState;\n    worldState: WorldState;\n    resourcesState: ResourcesState;\n\n    constructor({ turnState, worldState, resourcesState }: IGameState) {\n        this.turnState = new TurnState(this).initialize(turnState);\n        this.worldState = new WorldState(this).initialize(worldState);\n        this.resourcesState = new ResourcesState(this).initialize(resourcesState);\n    }\n\n    destroy() {\n        this.turnState.destroy();\n        this.worldState.destroy();\n        this.resourcesState.destroy();\n    }\n\n    serialize(): IGameState {\n        return {\n            turnState: this.turnState.serialize(),\n            worldState: this.worldState.serialize(),\n            resourcesState: this.resourcesState.serialize(),\n        };\n    }\n}\n","import { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { generateForest } from '@/features/WorldGenerator/helpers/biomes/generateForest';\nimport { generateForestRocks } from '@/features/WorldGenerator/helpers/biomes/generateForestRocks';\nimport { generateHill } from '@/features/WorldGenerator/helpers/biomes/generateHill';\nimport { generateMountain } from '@/features/WorldGenerator/helpers/biomes/generateMountain';\nimport { generateRocks } from '@/features/WorldGenerator/helpers/biomes/generateRocks';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\n\nexport const generateBiomeObject: TGenerator = (base, options) => {\n    let result = base;\n\n    if (!result.height) {\n        return result;\n    }\n\n    if (result.biomeTile) {\n        if (result.biomeTile.key === EBiomeTile.Sand) {\n            result = generateMountain(result, options);\n\n            if (!result.biomeObject) {\n                result = generateRocks(result, options);\n            }\n\n            return result;\n        }\n\n        return result;\n    }\n\n    result = generateMountain(result, options);\n\n    if (!result.biomeObject) {\n        result = generateForest(result, options);\n    }\n\n    if (!result.biomeObject) {\n        result = generateRocks(result, options);\n    }\n\n    if (!result.biomeObject) {\n        result = generateForestRocks(result, options);\n    }\n\n    if (!result.biomeObject) {\n        result = generateHill(result, options);\n    }\n\n    return result;\n};\n","import type { IVec3Like } from 'cc';\nimport { Vec3 } from 'cc';\nimport { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { waterTiles } from '@/features/Biome/data/waterTiles';\nimport { TILE_HEIGHT_LIMITS } from '@/features/Tile/data/consts';\nimport { generateClay } from '@/features/WorldGenerator/helpers/biomes/generateClay';\nimport { generateLake } from '@/features/WorldGenerator/helpers/biomes/generateLake';\nimport { generateRiver } from '@/features/WorldGenerator/helpers/biomes/generateRiver';\nimport { generateSand } from '@/features/WorldGenerator/helpers/biomes/generateSand';\nimport { generateSea } from '@/features/WorldGenerator/helpers/biomes/generateSea';\nimport { findMinHeight } from '@/features/WorldGenerator/helpers/findMinHeight';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { clamp } from '@/libs/math/clamp';\n\nexport const generateBiomeTile: TGenerator = (base, options) => {\n    let result = base;\n\n    if (!result.height) {\n        return result;\n    }\n\n    result = generateSea(result, options);\n\n    if (!result.biomeTile) {\n        result = generateRiver(result, options);\n\n        if (result.biomeTile?.key === EBiomeTile.River) {\n            for (const tile of options.chunkTiles || []) {\n                if (!tile.biomeTile || tile.biomeTile.key !== EBiomeTile.River) {\n                    // If we already generated end or start of rivers\n                    const target: IVec3Like = result.biomeTile.data?.from;\n\n                    if (target && Vec3.equals(target, tile.coords)) {\n                        if (tile.height <= result.height) {\n                            tile.height = clamp(result.height + 1, TILE_HEIGHT_LIMITS);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (!result.biomeTile) {\n        result = generateLake(result, options);\n    }\n\n    if (result.biomeTile && waterTiles.includes(result.biomeTile.key)) {\n        const { height } = result;\n        const { neighbors, chunkTiles } = options;\n        const isSea = result.biomeTile.key === EBiomeTile.Sea;\n\n        const minHeight = findMinHeight(neighbors);\n\n        if (minHeight && minHeight < height) {\n            // Water biomes cannot have neighboring tiles below, and old \"neighbor\"@\" tiles cannot be changed\n            result.biomeTile = undefined;\n        } else {\n            // Last chance to change what we've generated before this water tile – we can lower the height or try generating a dependent biome again\n            for (const tile of chunkTiles || []) {\n                if (tile.height < height) {\n                    tile.height = height;\n                }\n\n                if (isSea && !tile.biomeTile && !tile.biomeObject) {\n                    const { biomeTile } = generateSand(tile, { neighbors: [result] });\n                    tile.biomeTile = biomeTile;\n                }\n            }\n        }\n    }\n\n    if (!result.biomeTile) {\n        result = generateSand(result, options);\n    }\n\n    if (!result.biomeTile && !result.biomeObject) {\n        result = generateClay(base, options);\n    }\n\n    return result;\n};\n","import { Vec3 } from 'cc';\nimport { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport type { IChunkData } from '@/features/Chunk/types/IChunkData';\nimport type { ITileData } from '@/features/Tile/types/ITileData';\nimport { generateTile } from '@/features/WorldGenerator/helpers/generateTile';\nimport { sortCoords } from '@/features/WorldGenerator/helpers/sortCoords';\nimport { HexagonChunk } from '@/libs/hexagon/HexagonChunk';\nimport { HexagonTile } from '@/libs/hexagon/HexagonTile';\nimport { HEX_OPTIONS } from '@/features/Hex/data/consts';\nimport { state } from '@/states/state';\n\nconst BIOME_PRIORITY: Partial<Record<EBiomeTile, number>> = {\n    [EBiomeTile.River]: 1,\n};\n\nfunction calcNeighborsScore(item: HexagonTile<null>) {\n    const { tilesMap } = state.worldState;\n\n    const neighbors = item.neighbors.map((coords) => tilesMap.get(coords)).filter(Boolean);\n\n    return neighbors.reduce((result, neighbor) => {\n        const biomeKey = neighbor?.self.data?.biomeTile?.key;\n        const score = (biomeKey && BIOME_PRIORITY[biomeKey]) || 0;\n\n        return result + score;\n    }, 0);\n}\n\nexport function generateChunk(center: Vec3): IChunkData {\n    const chunk = new HexagonChunk(null, center, HEX_OPTIONS);\n\n    const tiles: ITileData[] = [];\n\n    const sortedCoords = sortCoords(chunk.tiles);\n\n    sortedCoords\n        .map((tileCoords) => new HexagonTile(null, tileCoords, HEX_OPTIONS))\n        .sort((a, b) => calcNeighborsScore(b) - calcNeighborsScore(a))\n        .forEach((fakeTile) => {\n            const neighbors = [fakeTile.coords, ...fakeTile.neighbors].reduce<ITileData[]>((result, nearCoords) => {\n                const { tilesMap } = state.worldState;\n\n                const tile = tilesMap.get(nearCoords);\n\n                if (tile) {\n                    result.push(tile.self.data);\n                } else {\n                    const alreadyAdded = tiles.find(({ coords }) => Vec3.equals(nearCoords, coords));\n\n                    if (alreadyAdded) {\n                        result.push(alreadyAdded);\n                    }\n                }\n\n                return result;\n            }, []);\n\n            tiles.push(generateTile(fakeTile.coords, { neighbors, chunkTiles: tiles }));\n        });\n\n    return {\n        coords: center,\n        tiles,\n    };\n}\n","import { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { TILE_SEA_LEVEL } from '@/features/Tile/data/consts';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport { randomizeBiomeSize } from '@/features/WorldGenerator/helpers/biomes/randomizeBiomeSize';\nimport { isNearWorldCenter } from '@/features/WorldGenerator/helpers/center/isNearCenter';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\n\nexport const generateClay: TGenerator = (base, options) => {\n    if (isNearWorldCenter(base.coords)) {\n        return base;\n    }\n\n    const clays = findBiomeNeighbors(EBiomeTile.Clay, options);\n\n    if (clays.some((clay) => clay.diff <= 0)) {\n        return base;\n    }\n\n    const [clay] = clays;\n\n    const heightDiff = TILE_SEA_LEVEL - base.height;\n\n    if (heightDiff < 0) {\n        return base;\n    }\n\n    let chance = 0.02 * heightDiff;\n    if (clay?.size === 1) {\n        chance = 1;\n    } else if (clays.length && clays.length !== 1) {\n        chance = 0.3 * clays.length;\n    } else if (clay) {\n        chance += 0.01 * (clay.diff || 0);\n    }\n\n    if (!isRandomChance(chance)) {\n        return base;\n    }\n\n    return {\n        ...base,\n        biomeTile: {\n            id: clay?.biome.id || guid(),\n            key: EBiomeTile.Clay,\n            size: clay?.biome.size || randomizeBiomeSize([0.15, 0.5, 0.3, 0.05]),\n        },\n    };\n};\n","import { EBiomeObject } from '@/features/Biome/data/EBiome';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport { randomizeBiomeSize } from '@/features/WorldGenerator/helpers/biomes/randomizeBiomeSize';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\nimport { randomFromRange } from '@/libs/random/randomFromRange';\n\nexport const generateForest: TGenerator = (base, options) => {\n    const forests = findBiomeNeighbors(EBiomeObject.Forest, options);\n\n    if (forests.some((forest) => forest.diff <= 0)) {\n        return base;\n    }\n\n    const forest = forests[0];\n\n    const diff = forest?.diff || 0;\n\n    const chance = 0.1 + 0.2 * diff;\n\n    if (!isRandomChance(chance)) {\n        return base;\n    }\n\n    return {\n        ...base,\n        biomeObject: {\n            id: forest?.biome.id || guid(),\n            key: EBiomeObject.Forest,\n            rotate: randomFromRange([-180, 180]),\n            scale: randomFromRange([0.7, 1.3], 1),\n            size: forest?.biome.size || randomizeBiomeSize([0.1, 0.5, 0.35, 0.05]),\n        },\n    };\n};\n","import { EBiomeObject } from '@/features/Biome/data/EBiome';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport { randomizeBiomeSize } from '@/features/WorldGenerator/helpers/biomes/randomizeBiomeSize';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\nimport { randomFromRange } from '@/libs/random/randomFromRange';\n\nexport const generateForestRocks: TGenerator = (base, options) => {\n    const forests = findBiomeNeighbors(EBiomeObject.Forest, options);\n    const forestRocks = findBiomeNeighbors(EBiomeObject.ForestRocks, options);\n\n    if (forestRocks.some((forestRock) => forestRock.diff <= 0)) {\n        return base;\n    }\n\n    const chance = 0.05 + 0.1 * forests.length;\n\n    if (!isRandomChance(chance)) {\n        return base;\n    }\n\n    return {\n        ...base,\n        biomeObject: {\n            id: forestRocks[0]?.biome.id || guid(),\n            key: EBiomeObject.ForestRocks,\n            rotate: randomFromRange([-180, 180]),\n            scale: randomFromRange([0.8, 1.2], 1),\n            size: randomizeBiomeSize([0.5, 0.5]),\n        },\n    };\n};\n","import { EBiomeObject } from '@/features/Biome/data/EBiome';\nimport { EBiomeSize } from '@/features/Biome/data/EBiomeSize';\nimport { TILE_SEA_LEVEL } from '@/features/Tile/data/consts';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\nimport { randomFromRange } from '@/libs/random/randomFromRange';\n\nexport const generateHill: TGenerator = (base, options) => {\n    if (base.height < TILE_SEA_LEVEL) {\n        return base;\n    }\n\n    const forests = findBiomeNeighbors(EBiomeObject.Forest, options);\n    const hills = findBiomeNeighbors(EBiomeObject.Hill, options);\n\n    if (hills.some((hill) => hill.diff <= 0)) {\n        return base;\n    }\n\n    const chance = 0.01 + 0.03 * forests.length;\n\n    if (!isRandomChance(chance)) {\n        return base;\n    }\n\n    return {\n        ...base,\n        biomeObject: {\n            id: guid(),\n            key: EBiomeObject.Hill,\n            rotate: randomFromRange([-180, 180]),\n            scale: randomFromRange([0.7, 1.3], 1),\n            size: EBiomeSize.Tiny,\n        },\n    };\n};\n","import { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { TILE_HEIGHT_LIMITS, TILE_SEA_LEVEL } from '@/features/Tile/data/consts';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport { randomizeBiomeSize } from '@/features/WorldGenerator/helpers/biomes/randomizeBiomeSize';\nimport { isNearWorldCenter } from '@/features/WorldGenerator/helpers/center/isNearCenter';\nimport { findMinHeight } from '@/features/WorldGenerator/helpers/findMinHeight';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\n\nexport const generateNewLake: TGenerator = (base, options) => ({\n    ...base,\n    height: findMinHeight(options.neighbors) || base.height,\n    biomeTile: {\n        id: guid(),\n        key: EBiomeTile.Lake,\n        size: randomizeBiomeSize([0.2, 0.5, 0.2, 0.1]),\n    },\n});\n\nexport const generateLake: TGenerator = (base, options) => {\n    if (isNearWorldCenter(base.coords)) {\n        return base;\n    }\n\n    const seas = findBiomeNeighbors(EBiomeTile.Sea, options);\n\n    if (seas.length) {\n        return base;\n    }\n\n    const lakes = findBiomeNeighbors(EBiomeTile.Lake, options);\n\n    if (lakes.some((lake) => lake.diff <= 0)) {\n        return base;\n    }\n\n    const [lake] = lakes;\n\n    const heightDiff = TILE_HEIGHT_LIMITS[1] / 2 - Math.abs(base.height - TILE_SEA_LEVEL);\n\n    let chance = heightDiff * 0.001;\n    if (lake?.size === 1) {\n        chance = 1;\n    } else if (lakes.length && lakes.length !== 1) {\n        chance = 0.5 * lakes.length;\n    } else if (lake) {\n        chance = 0;\n    }\n\n    if (!isRandomChance(chance)) {\n        return base;\n    }\n\n    if (lake) {\n        return {\n            ...base,\n            height: lake.tile.height,\n            biomeTile: {\n                id: lake.biome.id,\n                key: EBiomeTile.Lake,\n                size: lake.biome.size,\n            },\n        };\n    }\n\n    return generateNewLake(base, options);\n};\n","import { EBiomeObject } from '@/features/Biome/data/EBiome';\nimport { TILE_SEA_LEVEL } from '@/features/Tile/data/consts';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport { randomizeBiomeSize } from '@/features/WorldGenerator/helpers/biomes/randomizeBiomeSize';\nimport { isNearWorldCenter } from '@/features/WorldGenerator/helpers/center/isNearCenter';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\nimport { randomFromRange } from '@/libs/random/randomFromRange';\n\nexport const generateNewMountain: TGenerator = (base) => ({\n    ...base,\n    biomeObject: {\n        id: guid(),\n        key: EBiomeObject.Mountain,\n        rotate: randomFromRange([-180, 180]),\n        scale: randomFromRange([1, 2], 1),\n        size: randomizeBiomeSize([0.6, 0.25, 0.2, 0.05]),\n    },\n});\n\nexport const generateMountain: TGenerator = (base, options) => {\n    if (isNearWorldCenter(base.coords)) {\n        return base;\n    }\n\n    const mountains = findBiomeNeighbors(EBiomeObject.Mountain, options);\n\n    if (mountains.some((mountain) => mountain.diff <= 0)) {\n        return base;\n    }\n\n    const mountain = mountains[0];\n\n    const diff = mountain?.diff || 0;\n\n    const height = base.height - TILE_SEA_LEVEL;\n\n    const chance = 0.015 * height + 0.2 * diff;\n\n    if (!isRandomChance(chance)) {\n        return base;\n    }\n\n    base = generateMountain(base, options);\n\n    if (mountain && base.biomeObject) {\n        base.biomeObject.size = mountain.biome.size;\n        base.biomeObject.id = mountain.biome.id;\n    }\n\n    return base;\n};\n","import type { IVec3Like } from 'cc';\nimport { Vec3 } from 'cc';\nimport { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport type { IBiomeBaseData } from '@/features/Biome/types/IBiomeData';\nimport { TILE_HEIGHT_LIMITS, TILE_SEA_LEVEL } from '@/features/Tile/data/consts';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport { findWaterNeighbors } from '@/features/WorldGenerator/helpers/biomes/findWaterNeighbors';\nimport { generateNewLake } from '@/features/WorldGenerator/helpers/biomes/generateLake';\nimport { generateNewMountain } from '@/features/WorldGenerator/helpers/biomes/generateMountain';\nimport { generateSea } from '@/features/WorldGenerator/helpers/biomes/generateSea';\nimport { randomizeBiomeSize } from '@/features/WorldGenerator/helpers/biomes/randomizeBiomeSize';\nimport { isNearWorldCenter } from '@/features/WorldGenerator/helpers/center/isNearCenter';\nimport { findMinHeight } from '@/features/WorldGenerator/helpers/findMinHeight';\nimport type { IGeneratorOptions } from '@/features/WorldGenerator/types/IGeneratorOptions';\nimport type { INeigborBiome } from '@/features/WorldGenerator/types/INeigborBiome';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { HexagonTile } from '@/libs/hexagon/HexagonTile';\nimport { clamp } from '@/libs/math/clamp';\nimport { toVec3 } from '@/libs/math/toVec3';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\nimport { randomFromArray } from '@/libs/random/randomFromArray';\nimport { HEX_OPTIONS } from '@/features/Hex/data/consts';\n\nfunction randomizeRiverSize() {\n    return randomizeBiomeSize([0.2, 0.5, 0.2, 0.1]);\n}\n\nfunction randomizeRiverHeight(river: INeigborBiome<IBiomeBaseData>, diff: number) {\n    const { height } = river.tile;\n\n    if (river.biome.data?.to?.length > 1) {\n        return height;\n    }\n\n    if (isRandomChance(0.1)) {\n        return clamp(height + diff, [TILE_SEA_LEVEL, TILE_HEIGHT_LIMITS[1] - 1]);\n    }\n\n    return height;\n}\n\nfunction randomizeFrom(neighbors: Vec3[], options: IGeneratorOptions): IVec3Like | null {\n    const candidates = neighbors.filter((neighbor) => {\n        if (options.neighbors.some(({ coords }) => Vec3.equals(neighbor, coords))) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (!candidates.length) {\n        return null;\n    }\n\n    const from = randomFromArray(candidates);\n\n    return from;\n}\n\nfunction randomizeTo(\n    baseCoords: IVec3Like,\n    from: IVec3Like,\n    neighbors: IVec3Like[],\n    options: IGeneratorOptions,\n): IVec3Like[] {\n    neighbors = neighbors.filter((neighbor) => {\n        if (Vec3.equals(neighbor, from)) {\n            return false;\n        }\n\n        if (options.neighbors.some(({ coords }) => Vec3.equals(neighbor, coords))) {\n            return false;\n        }\n\n        return true;\n    });\n\n    const toLength = isRandomChance(0.04) ? 2 : 1;\n\n    const to = [];\n\n    // straight\n    const straight = toVec3(from)\n        .subtract3f(baseCoords.x, baseCoords.y, baseCoords.z)\n        .negative()\n        .add3f(baseCoords.x, baseCoords.y, baseCoords.z);\n\n    neighbors = neighbors.filter((neighbor) => {\n        if (Vec3.distance(straight, neighbor) < 2) {\n            return true;\n        }\n\n        return false;\n    });\n\n    if (isRandomChance(0.6)) {\n        const straightNeigbor = neighbors.find((neighbor) => Vec3.equals(straight, neighbor));\n\n        if (straightNeigbor) {\n            neighbors = neighbors.filter((neighbor) => !Vec3.equals(straightNeigbor, neighbor));\n            to.push(straightNeigbor);\n        }\n    }\n\n    for (let i = to.length; i < toLength; i++) {\n        if (neighbors.length) {\n            const coords = randomFromArray(neighbors);\n\n            neighbors = neighbors.filter((neighbor) => !Vec3.equals(coords, neighbor));\n\n            to.push(coords);\n        }\n    }\n\n    return to;\n}\n\nexport const generateRiver: TGenerator = (base, options) => {\n    const { neighbors } = options;\n\n    if (isNearWorldCenter(base.coords)) {\n        return base;\n    }\n\n    const hex = new HexagonTile(null, toVec3(base.coords), HEX_OPTIONS);\n\n    const rivers = findBiomeNeighbors(EBiomeTile.River, options);\n    const waters = findWaterNeighbors(options);\n    const water = waters.length ? waters[0] : null;\n\n    if (!rivers.length) {\n        const chance = 0.03 + 0.005 * waters.length;\n\n        if (!isRandomChance(chance)) {\n            return base;\n        }\n\n        const height = water?.tile.height || findMinHeight(neighbors) || base.height;\n\n        if (height < TILE_SEA_LEVEL || height === TILE_HEIGHT_LIMITS[1]) {\n            return base;\n        }\n\n        const from = water?.tile.coords || randomizeFrom(hex.neighbors, options);\n\n        if (!from) {\n            return base;\n        }\n\n        const to = randomizeTo(base.coords, from, hex.neighbors, options);\n\n        if (to.every((toCoords) => neighbors.some((neighbor) => Vec3.equals(toCoords, neighbor.coords)))) {\n            return base;\n        }\n\n        return {\n            ...base,\n            height,\n            biomeTile: {\n                id: guid(),\n                key: EBiomeTile.River,\n                size: randomizeRiverSize(),\n                data: {\n                    from,\n                    to,\n                },\n            },\n        };\n    }\n\n    const coords = toVec3(base.coords);\n\n    const riverTo = rivers.find((river) => {\n        const from = river.biome.data?.from;\n\n        return from && Vec3.equals(coords, from);\n    });\n\n    if (riverTo) {\n        const isEnding = riverTo.diff < 0;\n        const height = randomizeRiverHeight(riverTo, 1);\n\n        if (isEnding) {\n            if (height > TILE_SEA_LEVEL && isRandomChance(0.5)) {\n                base.height = height;\n\n                return generateNewMountain(base, options);\n            }\n\n            if (isRandomChance(0.3)) {\n                base.height = height;\n\n                return generateNewLake(base, options);\n            }\n\n            base.height = clamp(riverTo.tile.height + 1, [TILE_SEA_LEVEL, TILE_HEIGHT_LIMITS[1] - 1]);\n\n            return base;\n        }\n\n        return {\n            ...base,\n            height: height,\n            biomeTile: {\n                id: riverTo.biome.id,\n                key: EBiomeTile.River,\n                size: riverTo.biome.size,\n                data: {\n                    from: water?.tile.coords || randomizeFrom(hex.neighbors, options),\n                    to: [riverTo.tile.coords],\n                },\n            },\n        };\n    }\n\n    const riverFrom = rivers.find((river) => {\n        const to = river.biome.data?.to;\n\n        return to && to.some((toCoords: IVec3Like) => Vec3.equals(coords, toCoords));\n    });\n\n    if (riverFrom) {\n        const isEnding = riverFrom.diff < 0;\n        const height = randomizeRiverHeight(riverFrom, -1);\n\n        if (isEnding) {\n            if (height === TILE_SEA_LEVEL) {\n                base.height = height;\n                base = generateSea(base, options);\n\n                if (base.biomeTile) {\n                    return base;\n                }\n            }\n\n            const minHeight = findMinHeight(options.neighbors);\n\n            if (!minHeight || (minHeight < height && isRandomChance(0.5))) {\n                base.height = height;\n                return generateNewLake(base, options);\n            }\n        }\n\n        let to: IVec3Like[] = [];\n\n        if (!isEnding) {\n            if (waters.length) {\n                to = randomizeTo(\n                    base.coords,\n                    riverFrom.tile.coords,\n                    waters.map(({ tile }) => tile.coords),\n                    options,\n                );\n            }\n\n            if (!to.length) {\n                to = randomizeTo(base.coords, riverFrom.tile.coords, hex.neighbors, options);\n            }\n        }\n\n        const riverFromToIndex = riverFrom.biome.data?.to?.findIndex((toCoords: IVec3Like) =>\n            Vec3.equals(coords, toCoords),\n        );\n\n        return {\n            ...base,\n            height,\n            biomeTile: {\n                id: !riverFromToIndex ? riverFrom.biome.id : guid(),\n                key: EBiomeTile.River,\n                size: !riverFromToIndex ? riverFrom.biome.size : randomizeRiverSize(),\n                data: {\n                    from: riverFrom.tile.coords,\n                    to,\n                    ...(!riverFromToIndex\n                        ? {}\n                        : {\n                              fromId: riverFrom.biome.id,\n                          }),\n                },\n            },\n        };\n    }\n\n    return base;\n};\n","import { EBiomeObject, EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport { randomizeBiomeSize } from '@/features/WorldGenerator/helpers/biomes/randomizeBiomeSize';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\nimport { randomFromRange } from '@/libs/random/randomFromRange';\n\nexport const generateRocks: TGenerator = (base, options) => {\n    const mountains = findBiomeNeighbors(EBiomeObject.Mountain, options);\n    const rocks = findBiomeNeighbors(EBiomeObject.Rocks, options);\n\n    if (rocks.some((rock) => rock.diff <= 0)) {\n        return base;\n    }\n\n    const rock = rocks[0];\n\n    const diff = rock?.diff || 0;\n\n    const chance = base.biomeTile?.key === EBiomeTile.Sand ? 0.1 : 0.05 + 0.2 * diff + 0.1 * mountains.length;\n\n    if (!isRandomChance(chance)) {\n        return base;\n    }\n\n    return {\n        ...base,\n        biomeObject: {\n            id: rock?.biome.id || guid(),\n            key: EBiomeObject.Rocks,\n            rotate: randomFromRange([-180, 180]),\n            scale: randomFromRange([0.7, 1.3], 1),\n            size: rock?.biome.size || randomizeBiomeSize([0.5, 0.3, 0.15, 0.05]),\n            data: isRandomChance(0.3)\n                ? {\n                      small: true,\n                  }\n                : undefined,\n        },\n    };\n};\n","import { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { TILE_SEA_LEVEL } from '@/features/Tile/data/consts';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport { findWaterNeighbors } from '@/features/WorldGenerator/helpers/biomes/findWaterNeighbors';\nimport { randomizeBiomeSize } from '@/features/WorldGenerator/helpers/biomes/randomizeBiomeSize';\nimport { isNearWorldCenter } from '@/features/WorldGenerator/helpers/center/isNearCenter';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { clamp } from '@/libs/math/clamp';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\n\nexport const generateSand: TGenerator = (base, options) => {\n    if (isNearWorldCenter(base.coords)) {\n        return base;\n    }\n\n    const sands = findBiomeNeighbors(EBiomeTile.Sand, options);\n    const waters = findWaterNeighbors(options);\n\n    if (!waters.length && sands.some((sand) => sand.diff <= 0)) {\n        return base;\n    }\n\n    const [sand] = sands;\n\n    let chance = 0.002 + 0.1 * waters.length;\n\n    if (waters.some(({ biome }) => biome.key === EBiomeTile.Sea)) {\n        if (base.height > TILE_SEA_LEVEL) {\n            return base;\n        }\n\n        chance = 0.9;\n    } else if (sand?.size === 1) {\n        chance = 1;\n    } else if (sands.length && sands.length !== 1) {\n        chance = 0.3 * sands.length;\n    } else if (sand) {\n        chance += 0.01 * clamp(sand.diff || 0, [0, null]);\n    }\n\n    if (!isRandomChance(chance)) {\n        return base;\n    }\n\n    return {\n        ...base,\n        biomeTile: {\n            id: sand?.biome.id || guid(),\n            key: EBiomeTile.Sand,\n            size: sand?.biome.size || randomizeBiomeSize([0.2, 0.5, 0.2, 0.1]),\n        },\n    };\n};\n","import { Vec3 } from 'cc';\nimport { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { EBiomeSize } from '@/features/Biome/data/EBiomeSize';\nimport { TILE_SEA_LEVEL } from '@/features/Tile/data/consts';\nimport { WORLD_CENTER } from '@/features/World/data/consts';\nimport { findBiomeNeighbors } from '@/features/WorldGenerator/helpers/biomes/findBiomeNeighbors';\nimport { findMinHeight } from '@/features/WorldGenerator/helpers/findMinHeight';\nimport type { TGenerator } from '@/features/WorldGenerator/types/TGenerator';\nimport { guid } from '@/libs/helpers/guid';\nimport { clamp } from '@/libs/math/clamp';\nimport { isRandomChance } from '@/libs/random/isRandomChance';\nimport { state } from '@/states/state';\n\nconst MIN_SEA_DISTANCE = 4;\n\nexport const generateSea: TGenerator = (base, options) => {\n    const { neighbors } = options;\n\n    const distance = Vec3.distance(base.coords, WORLD_CENTER);\n\n    if (distance < MIN_SEA_DISTANCE) {\n        return base;\n    }\n\n    const minHeight = findMinHeight(neighbors);\n\n    if (minHeight && minHeight < TILE_SEA_LEVEL) {\n        return base;\n    }\n\n    const lakes = findBiomeNeighbors(EBiomeTile.Lake, options);\n\n    if (lakes.length) {\n        return base;\n    }\n\n    const seas = findBiomeNeighbors(EBiomeTile.Sea, options);\n    const rivers = findBiomeNeighbors(EBiomeTile.River, options);\n\n    if (!seas.length) {\n        const { tilesMap } = state.worldState;\n\n        const hasSea = tilesMap.values.some((hex) => hex.self.data.biomeTile?.key === EBiomeTile.Sea);\n\n        if (hasSea) {\n            return base;\n        }\n\n        const riversSize = rivers.reduce((result, { size }) => result + size, 0);\n\n        const chance = 0.0001 * distance + riversSize * 0.0005;\n\n        if (!isRandomChance(chance)) {\n            return base;\n        }\n\n        return {\n            ...base,\n            height: TILE_SEA_LEVEL,\n            biomeTile: {\n                id: guid(),\n                key: EBiomeTile.Sea,\n                size: EBiomeSize.Large,\n            },\n        };\n    }\n\n    const [sea] = seas;\n\n    const chance = seas.length * 0.6 + clamp(sea.diff, [-10, null]) * 0.05 + clamp(20 - sea.bordersSize, [0, null]) * 0.1;\n\n    if (!isRandomChance(chance)) {\n        return base;\n    }\n\n    return {\n        ...base,\n        height: TILE_SEA_LEVEL,\n        biomeTile: {\n            id: sea.biome.id,\n            key: EBiomeTile.Sea,\n            size: EBiomeSize.Large,\n        },\n    };\n};\n","import type { Vec3 } from 'cc';\nimport type { ITileData } from '@/features/Tile/types/ITileData';\nimport { generateBiomeObject } from '@/features/WorldGenerator/helpers/biomes/generateBiomeObject';\nimport { generateBiomeTile } from '@/features/WorldGenerator/helpers/biomes/generateBiomeTile';\nimport { generateTileBaseHeight } from '@/features/WorldGenerator/helpers/generateTileBaseHeight';\nimport { generateTileHeight } from '@/features/WorldGenerator/helpers/generateTileHeight';\nimport type { IGeneratorOptions } from '@/features/WorldGenerator/types/IGeneratorOptions';\n\nexport function generateTile(coords: Vec3, options: IGeneratorOptions): ITileData {\n    const height = generateTileHeight(options);\n    const baseHeight = generateTileBaseHeight();\n\n    let base: ITileData = { coords, height, baseHeight };\n\n    base = generateBiomeTile(base, options);\n    base = generateBiomeObject(base, options);\n\n    return base;\n}\n","import { randomFromArray } from '@/libs/random/randomFromArray';\n\nconst BASE_TILE_HEIGHTS = [2, 3, 4, 5];\n\nexport function generateTileBaseHeight() {\n    return randomFromArray(BASE_TILE_HEIGHTS);\n}\n","import { Vec3 } from 'cc';\nimport { TILE_HEIGHT_LIMITS, TILE_SEA_LEVEL } from '@/features/Tile/data/consts';\nimport type { ITileData } from '@/features/Tile/types/ITileData';\nimport { WORLD_CENTER } from '@/features/World/data/consts';\nimport { findWaterNeighbors } from '@/features/WorldGenerator/helpers/biomes/findWaterNeighbors';\nimport type { IGeneratorOptions } from '@/features/WorldGenerator/types/IGeneratorOptions';\nimport { clamp } from '@/libs/math/clamp';\nimport type { IChance } from '@/libs/random/IChance';\nimport { randomChance } from '@/libs/random/randomChance';\nimport { randomFromArray } from '@/libs/random/randomFromArray';\n\nconst CHANCES: IChance<(h: number) => number, [number]>[] = [\n    {\n        name: 'higher',\n        chance: (height) => {\n            const diff = TILE_SEA_LEVEL - height;\n            return 0.2 + 0.03 * diff;\n        },\n        fn: (height) => height + 1,\n    },\n    {\n        name: 'lower',\n        chance: (height) => {\n            const diff = height - TILE_SEA_LEVEL;\n            return 0.2 + 0.03 * diff;\n        },\n        fn: (height) => height - 1,\n    },\n    {\n        name: 'same',\n        chance: () => 1,\n        fn: (height) => height,\n    },\n];\n\nfunction getMainNeighbor(neighbors: ITileData[]) {\n    const center = neighbors.find(({ coords }) => Vec3.equals(WORLD_CENTER, coords));\n\n    if (center) {\n        return center;\n    }\n\n    return randomFromArray(neighbors);\n}\n\nexport function generateTileHeight(options: IGeneratorOptions) {\n    const { neighbors } = options;\n\n    const waters = findWaterNeighbors(options);\n\n    const main = getMainNeighbor(neighbors);\n    const height = main?.height ?? TILE_SEA_LEVEL;\n\n    const fn = randomChance(CHANCES, [height]);\n\n    const resultHeight = clamp(fn(height), TILE_HEIGHT_LIMITS);\n\n    if (waters.length) {\n        const waterHeight = waters.reduce<number | null>((result, water) => {\n            if (!result || water.tile.height > result) {\n                return water.tile.height;\n            }\n\n            return result;\n        }, null);\n\n        if (waterHeight && resultHeight < waterHeight) {\n            return waterHeight;\n        }\n    }\n\n    return resultHeight;\n}\n","import type { Vec3 } from 'cc';\nimport type { IChunkData } from '@/features/Chunk/types/IChunkData';\nimport type { ITileData } from '@/features/Tile/types/ITileData';\nimport { generateWorldCenterTile } from '@/features/WorldGenerator/helpers/center/generateWorldCenterTile';\nimport { generateTile } from '@/features/WorldGenerator/helpers/generateTile';\nimport { HexagonChunk } from '@/libs/hexagon/HexagonChunk';\nimport { HEX_OPTIONS } from '@/features/Hex/data/consts';\n\nexport function generateWorldCenterChunk(center: Vec3): IChunkData {\n    const chunk = new HexagonChunk(null, center, HEX_OPTIONS);\n\n    const tiles: ITileData[] = [generateWorldCenterTile(center)];\n\n    chunk.tiles.forEach((coords) => {\n        if (coords.equals(center)) {\n            return;\n        }\n\n        tiles.push(generateTile(coords, { neighbors: tiles }));\n    });\n\n    return {\n        coords: center,\n        tiles,\n    };\n}\n","import type { Vec3 } from 'cc';\nimport { EBuilding } from '@/features/Building/data/EBuilding';\nimport type { ITileData } from '@/features/Tile/types/ITileData';\nimport { WORLD_CENTER_HEIGHT } from '@/features/World/data/consts';\nimport { generateTileBaseHeight } from '@/features/WorldGenerator/helpers/generateTileBaseHeight';\n\nexport function generateWorldCenterTile(coords: Vec3): ITileData {\n    return {\n        coords,\n        height: WORLD_CENTER_HEIGHT,\n        baseHeight: generateTileBaseHeight(),\n        building: {\n            key: EBuilding.Castle,\n            progress: 1,\n        },\n    };\n}\n","import { TComponentClass } from '@/libs/cocos/types/TComponentClass';\nimport { Component, Node } from 'cc';\n\nexport function getAllComponents<T extends Component>(node: Node, Comp: TComponentClass<T>): T[] {\n    return [...node.getComponents(Comp), ...node.getComponentsInChildren(Comp)];\n}\n","export function getAllPropertyDescriptors(obj: Object, level = 0): { [x: string]: PropertyDescriptor } {\n    const prototype = Object.getPrototypeOf(obj);\n\n    return {\n        ...Object.getOwnPropertyDescriptors(obj),\n        ...(prototype && level > 0 ? getAllPropertyDescriptors(prototype, level - 1) : {}),\n    };\n}\n","import type { IVec3Like } from 'cc';\nimport { Vec3 } from 'cc';\nimport { BIOME_OBJECT_KEYS, type EBiome, type EBiomeObject } from '@/features/Biome/data/EBiome';\nimport type { Tile } from '@/features/Tile/components/Tile';\nimport type { ITileData } from '@/features/Tile/types/ITileData';\nimport { HexagonTile } from '@/libs/hexagon/HexagonTile';\nimport { toVec3 } from '@/libs/math/toVec3';\nimport { HEX_OPTIONS } from '@/features/Hex/data/consts';\nimport { state } from '@/states/state';\n\nexport function getBiomeActualSize(coords: IVec3Like, biomeId: string, biomeKey: EBiome, neighbors: ITileData[] = []) {\n    let size = 0;\n    let bordersSize = 0;\n\n    const isObject = BIOME_OBJECT_KEYS.includes(biomeKey as EBiomeObject);\n    const visited = new Map<string, true>();\n\n    const calculate = (tileCoords: IVec3Like) => {\n        const key = toVec3(tileCoords).toString();\n\n        if (visited.has(key)) {\n            return;\n        }\n\n        visited.set(key, true);\n\n        const { tilesMap } = state.worldState;\n\n        let tile: HexagonTile<Tile | null> | undefined = tilesMap.get(tileCoords);\n        let tileData = tile?.self?.data;\n\n        if (!tileData) {\n            tileData = neighbors.find((nearTile) => Vec3.equals(nearTile.coords, tileCoords));\n\n            if (tileData) {\n                tile = new HexagonTile(null, toVec3(tileCoords), HEX_OPTIONS);\n            }\n        }\n\n        if (!tile || !tileData) {\n            bordersSize++;\n\n            return;\n        }\n\n        const biome = isObject ? tileData.biomeObject : tileData.biomeTile;\n\n        if (biome?.key === biomeKey && biome.id === biomeId) {\n            size++;\n\n            tile.neighbors.forEach((nearCoords) => {\n                calculate(nearCoords);\n            });\n        }\n    };\n\n    calculate(coords);\n\n    neighbors.forEach((tile) => calculate(tile.coords));\n\n    return { size, bordersSize };\n}\n","import { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { BuildRoute } from '@/routes/BuildRoute/BuildRoute';\nimport { router } from '@/routes/router';\n\nexport function getBuildRoute() {\n    return router.getRoute<BuildRoute>(ERouteName.Build);\n}\n","import { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { router } from '@/routes/router';\nimport type { WorldRoute } from '@/routes/WorldRoute/WorldRoute';\n\nexport function getWorldRoute() {\n    return router.getRoute<WorldRoute>(ERouteName.World);\n}\n","/* eslint-disable no-bitwise */\n\nexport function guid() {\n    let d = Date.now();\n\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n}\n","export function hashCode(str: string): number {\n    let hash = 0;\n\n    if (str.length === 0) {\n        return hash;\n    }\n\n    for (let i = 0; i < str.length; i++) {\n        let chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n\n    return hash;\n}\n","import type { IVec3Like } from 'cc';\nimport { Vec3 } from 'cc';\nimport { cached } from '@/libs/decorators/cached';\n\nexport type HexagonClass<T, H extends Hexagon<T>> = { new (self: T, coords: Vec3, options: HexagonOptions): H };\n\nexport interface HexagonOptions {\n    hexHeight: number;\n    hexRadius: number;\n}\n\nexport abstract class Hexagon<T> {\n    self: T;\n\n    coords: Vec3;\n\n    hexHeight: number;\n\n    hexRadius: number;\n\n    constructor(self: T, coords: Vec3, { hexHeight, hexRadius }: HexagonOptions) {\n        this.self = self;\n        this.coords = coords;\n        this.hexHeight = hexHeight;\n        this.hexRadius = hexRadius;\n    }\n\n    abstract get right(): Vec3;\n    abstract get topRight(): Vec3;\n    abstract get topLeft(): Vec3;\n    abstract get left(): Vec3;\n    abstract get bottomLeft(): Vec3;\n    abstract get bottomRight(): Vec3;\n\n    @cached\n    get neighbors() {\n        return [this.right, this.topRight, this.topLeft, this.left, this.bottomLeft, this.bottomRight];\n    }\n\n    @cached\n    get positionX() {\n        const { x } = this.coords;\n        const absX = Math.abs(x);\n\n        return Math.sign(x) * this.hexRadius * (absX + (Math.floor(absX - 1) + 1) / 2);\n    }\n\n    @cached\n    get positionZ() {\n        const { y, z } = this.coords;\n\n        return (y + z) * this.hexHeight;\n    }\n\n    @cached\n    get key() {\n        return this.coords.toString();\n    }\n\n    getNeighbor(coords: IVec3Like) {\n        return this.neighbors.find((neighbor) => Vec3.equals(neighbor, coords));\n    }\n\n    getOrderedNeigbors(from: IVec3Like | null) {\n        const fromIndex = from ? this.neighbors.findIndex((neighbor) => Vec3.equals(neighbor, from)) : -1;\n\n        if (fromIndex < 0) {\n            return this.neighbors.slice();\n        }\n\n        const start = this.neighbors.slice(fromIndex);\n        const end = this.neighbors.slice(0, fromIndex);\n\n        return [...start, ...end];\n    }\n}\n","import { cached } from '@/libs/decorators/cached';\nimport { Hexagon } from '@/libs/hexagon/Hexagon';\nimport { HexagonTile } from '@/libs/hexagon/HexagonTile';\n\nexport class HexagonChunk<C> extends Hexagon<C> {\n    @cached\n    get tiles() {\n        const center = new HexagonTile(null, this.coords.clone(), {\n            hexHeight: this.hexHeight,\n            hexRadius: this.hexRadius,\n        });\n\n        return [center.coords, ...center.neighbors];\n    }\n\n    @cached\n    get right() {\n        return this.coords.clone().add3f(3, 2, -1);\n    }\n\n    @cached\n    get topRight() {\n        return this.coords.clone().add3f(1, 3, 2);\n    }\n\n    @cached\n    get topLeft() {\n        return this.coords.clone().add3f(-2, 1, 3);\n    }\n\n    @cached\n    get left() {\n        return this.coords.clone().add3f(-3, -2, 1);\n    }\n\n    @cached\n    get bottomLeft() {\n        return this.coords.clone().add3f(-1, -3, -2);\n    }\n\n    @cached\n    get bottomRight() {\n        return this.coords.clone().add3f(2, -1, -3);\n    }\n}\n","import type { Vec3, IVec3Like } from 'cc';\nimport type { ObservableMap } from 'vendors/mobx';\nimport { action, computed, observable } from 'vendors/mobx';\nimport type { Hexagon, HexagonClass, HexagonOptions } from '@/libs/hexagon/Hexagon';\n\nexport class HexagonMap<T, H extends Hexagon<T>> {\n    map = observable.map<number, ObservableMap<number, ObservableMap<number, H>>>();\n\n    @observable maxX = 0;\n\n    @observable maxZ = 0;\n\n    @observable minX = 0;\n\n    @observable minZ = 0;\n\n    options: HexagonOptions;\n\n    Hex: HexagonClass<T, H>;\n\n    constructor(Hex: HexagonClass<T, H>, options: HexagonOptions) {\n        this.options = options;\n        this.Hex = Hex;\n    }\n\n    @computed\n    get values() {\n        const result: H[] = [];\n\n        for (const yMap of this.map.values()) {\n            for (const zMap of yMap.values()) {\n                for (const val of zMap.values()) {\n                    result.push(val);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    @action.bound\n    get(coords: IVec3Like) {\n        const { x, y, z } = coords;\n\n        let yMap = this.map.get(x);\n\n        if (!yMap) {\n            this.map.set(x, (yMap = observable.map()));\n        }\n\n        let zMap = yMap.get(y);\n\n        if (!zMap) {\n            yMap.set(y, (zMap = observable.map()));\n        }\n\n        return zMap.get(z);\n    }\n\n    @action.bound\n    add(coords: Vec3, item: T) {\n        const hex = new this.Hex(item, coords, this.options);\n\n        if (hex.positionX > this.maxX) {\n            this.maxX = hex.positionX;\n        } else if (hex.positionX < this.minX) {\n            this.minX = hex.positionX;\n        }\n\n        if (hex.positionZ > this.maxZ) {\n            this.maxZ = hex.positionZ;\n        } else if (hex.positionZ < this.minZ) {\n            this.minZ = hex.positionZ;\n        }\n\n        const { x, y, z } = hex.coords;\n\n        let yMap = this.map.get(x);\n\n        if (!yMap) {\n            this.map.set(x, (yMap = observable.map()));\n        }\n\n        let zMap = yMap.get(y);\n\n        if (!zMap) {\n            yMap.set(y, (zMap = observable.map()));\n        }\n\n        const old = zMap.get(z);\n\n        if (old) {\n            (old as any).destroy?.();\n        }\n\n        zMap.set(z, hex);\n\n        return hex;\n    }\n}\n","import { cached } from '@/libs/decorators/cached';\nimport { Hexagon } from '@/libs/hexagon/Hexagon';\n\nexport class HexagonTile<T> extends Hexagon<T> {\n    @cached\n    get right() {\n        return this.coords.clone().add3f(1, 1, 0);\n    }\n\n    @cached\n    get topRight() {\n        return this.coords.clone().add3f(0, 1, 1);\n    }\n\n    @cached\n    get topLeft() {\n        return this.coords.clone().add3f(-1, 0, 1);\n    }\n\n    @cached\n    get left() {\n        return this.coords.clone().add3f(-1, -1, 0);\n    }\n\n    @cached\n    get bottomLeft() {\n        return this.coords.clone().add3f(0, -1, -1);\n    }\n\n    @cached\n    get bottomRight() {\n        return this.coords.clone().add3f(1, 0, -1);\n    }\n}\n","import { Color } from 'cc';\n\nexport function hexColor(hex: string, opacity: number = 1) {\n    if (opacity !== 1) {\n        const alpha = Math.round(opacity * 255).toString(16);\n\n        hex = hex + alpha;\n    }\n\n    return Color.fromHEX(new Color(), hex);\n}\n","export function hexRadius(h: number) {\n    return (2 * h) / Math.sqrt(3);\n}\n","export function i18n(key: string) {\n    return key;\n}\n","import type { IReactionDisposer, ObservableMap } from 'mobx';\n\nconst { observable, computed, action, runInAction, reaction, makeObservable, autorun } = window.mobx;\n\nexport { observable, computed, action, runInAction, reaction, makeObservable, autorun };\n\nexport type { IReactionDisposer, ObservableMap };\n","import { game } from 'cc';\n\ngame.frameRate = 120;\n","import type { IVec3Like } from 'cc';\nimport { Vec3 } from 'cc';\nimport { WORLD_CENTER } from '@/features/World/data/consts';\n\nexport function isNearWorldCenter(coords: IVec3Like, distance = 2) {\n    return Vec3.distance(coords, WORLD_CENTER) <= distance;\n}\n","export function isNumber(num: any): num is number {\n    if (typeof num === 'number') {\n        return num - num === 0;\n    }\n\n    if (typeof num === 'string' && num.trim() !== '') {\n        return Number.isFinite(Number(num));\n    }\n\n    return false;\n}\n","// https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L11743-L11746\n\nexport default function isObject(value: unknown): value is object {\n    const type = typeof value;\n\n    return value != null && (type === 'object' || type === 'function');\n}\n","import isObject from '@/libs/helpers/isObject';\n\nexport function isPromise<T>(value: Promise<T> | T): value is Promise<T> {\n    return isObject(value) && typeof (value as Promise<T>).then === 'function';\n}\n","export function isRandomChance(chance: number) {\n    return Math.random() <= chance;\n}\n","export function listen(func: () => () => void) {\n    return func();\n}\n","import { Ui } from '@/features/Ui/components/Ui';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport { assets } from '@/features/Assets/data/assets';\nimport { director } from 'cc';\n\n@ccclass('LoadingUi')\nexport class LoadingUi extends Ui {\n    async onLoad() {\n        await assets.wait;\n\n        director.loadScene('WorldScene');\n    }\n}\n","import type { Asset } from 'cc';\nimport { resources } from 'cc';\n\ntype TConstructor<T = unknown> = new (...args: any[]) => T;\n\nexport async function loadResources<T extends Asset>(paths: string[], type: TConstructor<T> | null) {\n    return new Promise<T[]>((resolve, reject) => {\n        resources.load(paths, type, (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n\n            return resolve(data);\n        });\n    });\n}\n","import type { Asset } from 'cc';\nimport { resources } from 'cc';\n\ntype TConstructor<T = unknown> = new (...args: any[]) => T;\n\nexport async function loadResourcesDir<T extends Asset>(path: string, type: TConstructor<T> | null) {\n    return new Promise<T[]>((resolve, reject) => {\n        resources.loadDir(path, type, (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n\n            return resolve(data);\n        });\n    });\n}\n","import { Component } from 'cc';\nimport { autorun, makeObservable } from 'vendors/mobx';\n\nconst UNMOUNT_METHOD_REGEX = /^dispose/;\n\nexport abstract class Observer extends Component {\n    protected disposeRender: (() => void) | null = null;\n\n    __preload() {\n        makeObservable(this);\n\n        if (this.render) {\n            this.disposeRender = autorun(this.render.bind(this));\n        }\n    }\n\n    onDestroy() {\n        const methods = [\n            ...Object.getOwnPropertyNames(this),\n            ...Object.getOwnPropertyNames(Object.getPrototypeOf(this)),\n        ] as (keyof Observer)[];\n\n        methods.forEach((method) => {\n            if (UNMOUNT_METHOD_REGEX.test(method)) {\n                const func = this[method] as any as (() => void) | undefined;\n\n                if (func) {\n                    func();\n                }\n            }\n        });\n    }\n\n    render?(): void;\n}\n","import { AbstractRoute } from '@/routes/AbstractRoute/AbstractRoute';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { PauseScreen } from '@/routes/PauseRoute/components/PauseScreen';\n\nexport interface IPauseRouteOptions {\n    isIntro?: boolean;\n}\n\nexport class PauseRoute extends AbstractRoute<IPauseRouteOptions> implements IPauseRouteOptions {\n    readonly name = ERouteName.Pause;\n    readonly screen = PauseScreen;\n    hasUiOverlay = true;\n    hasUiHeader = false;\n\n    isIntro?: boolean;\n\n    serialize(): IPauseRouteOptions {\n        return {\n            isIntro: this.isIntro,\n        };\n    }\n}\n","import { ccclass } from '@/libs/decorators/cocos';\nimport { AbstractScreen } from '@/routes/AbstractRoute/components/AbstractScreen';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { PauseRoute } from '@/routes/PauseRoute/PauseRoute';\nimport { router } from '@/routes/router';\nimport { computed } from 'vendors/mobx';\n\n@ccclass('PauseScreen')\nexport class PauseScreen extends AbstractScreen<PauseRoute> {\n    static template: TResourceTemplate = 'PauseScreen';\n\n    readonly routeName = ERouteName.Pause;\n\n    onStartClick() {}\n\n    onContinueClick() {\n        router.navigate(ERouteName.World);\n    }\n\n    @computed\n    get isContinueActive() {\n        return Boolean(this.route?.isIntro);\n    }\n\n    onResumeClick() {\n        const isNavigated = router.navigateBack();\n\n        if (!isNavigated) {\n            this.onContinueClick();\n        }\n    }\n\n    @computed\n    get isResumeActive() {\n        return !this.isContinueActive;\n    }\n\n    onStartOverClick() {}\n\n    onSettingsClick() {}\n\n    get isPaused() {\n        return !this.route?.isIntro;\n    }\n}\n","import { Observer } from '@/libs/cocos/components/Observer';\nimport { setNodeLayer } from '@/libs/cocos/helpers/setNodeLayer';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { Semaphore } from '@/libs/semaphore/Semaphore';\nimport { Camera, director, MeshRenderer, Node, SpriteFrame, sys, Texture2D, Vec3 } from 'cc';\n\n@ccclass('Photobooth')\nexport class Photobooth extends Observer {\n    @property(Node)\n    root: Node;\n\n    @property(Camera)\n    camera: Camera;\n\n    @cached\n    get rt() {\n        return this.camera.targetTexture;\n    }\n\n    semaphore = new Semaphore();\n\n    updateCallback: (() => void) | null = null;\n\n    async waitForUpdate() {\n        await new Promise<void>((resolve) => {\n            this.updateCallback = resolve;\n        });\n\n        this.updateCallback = null;\n    }\n\n    async capture(node: Node, { scale }: { scale?: number } = {}) {\n        return this.semaphore.execute(async () => {\n            this.root.destroyAllChildren();\n\n            this.camera.node.parent?.setPosition(new Vec3(0, 0, 0));\n\n            setNodeLayer(node, this.root.layer);\n\n            if (scale) {\n                node.setScale(new Vec3(scale, scale, scale));\n            }\n\n            this.root.addChild(node);\n\n            const bounds = node.getComponentInChildren(MeshRenderer)?.model?.worldBounds;\n\n            if (bounds) {\n                this.camera.node.parent?.setPosition(new Vec3(0, bounds.center.y + bounds.halfExtents.y, 0));\n            }\n\n            await this.waitForUpdate();\n\n            if (!this.rt) {\n                return null;\n            }\n\n            const pbuffer = this.rt.readPixels();\n\n            if (!pbuffer) {\n                return null;\n            }\n\n            const texture = new Texture2D();\n\n            texture.reset({\n                width: this.rt.width,\n                height: this.rt.height,\n                format: this.rt.getPixelFormat(),\n            });\n\n            texture.uploadData(pbuffer);\n\n            const spriteFrame = new SpriteFrame();\n\n            spriteFrame.texture = texture;\n\n            spriteFrame.flipUVY = !sys.isNative;\n\n            return spriteFrame;\n        });\n    }\n\n    update() {\n        this.updateCallback?.();\n    }\n\n    static instance: Photobooth | null = null;\n\n    static factory() {\n        if (!this.instance || !this.instance.node.activeInHierarchy) {\n            const scene = director.getScene();\n\n            this.instance = scene?.getComponentInChildren(Photobooth) ?? null;\n        }\n\n        return this.instance;\n    }\n}\n","import { Photobooth } from '@/features/Photobooth/components/Photobooth';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { createPrefabNode } from '@/libs/cocos/helpers/createPrefabNode';\nimport { factorySprite } from '@/libs/cocos/helpers/factorySprite';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { Prefab, Node, Sprite, CCFloat, SpriteFrame } from 'cc';\nimport { autorun, computed, observable, runInAction } from 'vendors/mobx';\n\nconst SHOOT_CACHE = observable.map<string, SpriteFrame>();\n\n@ccclass('PhotoboothIcon')\nexport class PhotoboothIcon extends Observer {\n    spriteComponent: Sprite | null = null;\n\n    @observable.ref sprite: SpriteFrame | null = null;\n\n    @property({\n        type: Prefab,\n        visible(this: PhotoboothIcon) {\n            return !this.shootNode;\n        },\n    })\n    @observable.ref\n    shootPrefab: Prefab | null = null;\n\n    @property({\n        type: Node,\n        visible(this: PhotoboothIcon) {\n            return !this.shootPrefab;\n        },\n    })\n    @observable.ref\n    shootNode: Node | null = null;\n\n    @property(CCFloat)\n    scale: number = 1;\n\n    createShootTarget() {\n        if (this.shootNode) {\n            return this.shootNode;\n        }\n\n        if (this.shootPrefab) {\n            const prefabNode = createPrefabNode(this.shootPrefab);\n\n            return prefabNode;\n        }\n\n        return null;\n    }\n\n    @computed\n    get cacheKey() {\n        return this.shootNode?.uuid || this.shootPrefab?.uuid;\n    }\n\n    @computed\n    get cachedSprite() {\n        return (this.cacheKey && SHOOT_CACHE.get(this.cacheKey)) || null;\n    }\n\n    onLoad() {\n        this.spriteComponent = factorySprite(this.node, this.cachedSprite || this.sprite);\n    }\n\n    disposeSpriteShoot = autorun(async () => {\n        if (this.cachedSprite) {\n            return;\n        }\n\n        const node = this.createShootTarget();\n\n        if (node) {\n            const sprite = await Photobooth.factory()?.capture(node, { scale: this.scale });\n\n            if (sprite) {\n                runInAction(() => {\n                    this.sprite = sprite;\n\n                    if (this.cacheKey) {\n                        SHOOT_CACHE.set(this.cacheKey, sprite);\n                    }\n                });\n            }\n        }\n    });\n\n    render() {\n        const sprite = this.cachedSprite || this.sprite;\n\n        if (this.spriteComponent && this.spriteComponent.spriteFrame !== sprite) {\n            this.spriteComponent.spriteFrame = sprite;\n        }\n    }\n}\n","import { sys } from 'cc';\nimport type { Material } from 'cc';\n\n// Copy of material.setProperty, but without a warning\nfunction setMaterialProperty<T>(this: Material, name: string, val: T | T[], passIdx?: number) {\n    let success = false;\n    if (passIdx === undefined) {\n        // try set property for all applicable passes\n        const passes = this._passes;\n        const len = passes.length;\n        for (let i = 0; i < len; i++) {\n            const pass = passes[i];\n            if ((this as any)._uploadProperty(pass, name, val)) {\n                (this as any)._props[pass.propertyIndex][name] = val;\n                success = true;\n            }\n        }\n    } else {\n        if (passIdx >= this._passes.length) {\n            console.warn(`illegal pass index: ${passIdx}.`);\n            return;\n        }\n        const pass = this._passes[passIdx];\n        if ((this as any)._uploadProperty(pass, name, val)) {\n            (this as any)._props[pass.propertyIndex][name] = val;\n            success = true;\n        }\n    }\n    return success;\n}\n\nexport function prepareMaterial(material: Material) {\n    const warn = console.warn;\n\n    try {\n        console.warn = () => {};\n\n        material.setProperty('u_globalDirection', sys.isNative ? -1.0 : 1.0);\n    } catch (err) {\n        warn(err);\n    } finally {\n        console.warn = warn;\n    }\n\n    return material;\n}\n","export function promiseTimeout<T>(ms: number, promise: Promise<T>, onTimeout?: () => void): Promise<T> {\n    return new Promise(function (resolve, reject) {\n        const timer = setTimeout(function () {\n            onTimeout?.();\n\n            reject(new Error('Promise Timed Out'));\n        }, ms);\n\n        promise\n            .then(function (res) {\n                clearTimeout(timer);\n                resolve(res);\n            })\n            .catch(function (err) {\n                clearTimeout(timer);\n                reject(err);\n            });\n    });\n}\n","import type { IChance } from '@/libs/random/IChance';\n\nexport function randomChance<T extends Function, A extends unknown[] = []>(\n    chances: IChance<T, A>[],\n    args: A = [] as unknown as A,\n) {\n    let rand = Math.random();\n\n    for (const chance of chances) {\n        const check = chance.chance(...args);\n\n        if (rand <= check) {\n            return chance.fn;\n        }\n\n        rand -= check;\n    }\n\n    return chances[chances.length - 1].fn;\n}\n","export function randomFromArray<T>(arr: T[]) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n","import { toFixedNumber } from '@/libs/math/toFixedNumber';\n\nexport function randomFromRange(range: number[], digits = 0) {\n    const [min, max] = range;\n\n    if (!digits) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    return toFixedNumber(Math.random() * (max - min) + min, digits);\n}\n","import { EBiomeSize } from '@/features/Biome/data/EBiomeSize';\nimport type { IChance } from '@/libs/random/IChance';\nimport { randomChance } from '@/libs/random/randomChance';\n\nexport function randomizeBiomeSize(chances: number[]) {\n    const [tinyChance, smallChance, mediumChange, largeChance] = chances;\n\n    const randomize: IChance<() => EBiomeSize>[] = [\n        {\n            name: 'large',\n            chance: () => largeChance || 0,\n            fn: () => EBiomeSize.Large,\n        },\n        {\n            name: 'medium',\n            chance: () => mediumChange || 0,\n            fn: () => EBiomeSize.Medium,\n        },\n        {\n            name: 'small',\n            chance: () => smallChance || 0,\n            fn: () => EBiomeSize.Small,\n        },\n        {\n            name: 'tiny',\n            chance: () => tinyChance || 0,\n            fn: () => EBiomeSize.Tiny,\n        },\n    ];\n\n    return randomChance(randomize)();\n}\n","import { ResourceComponent } from '@/features/Resource/components/ResourceComponent';\nimport { EResource } from '@/features/Resource/data/EResource';\nimport { TemplateComponent } from '@/libs/cocos/components/TemplateComponent';\nimport { ccclass } from '@/libs/decorators/cocos';\n\nexport interface IResourceAmountProps {\n    resource: EResource;\n    count: number;\n}\n\n@ccclass('ResourceAmount')\nexport class ResourceAmount extends ResourceComponent implements TemplateComponent {\n    static template: TResourceTemplate = 'ResourceAmount';\n}\n","import { IResourceProps, ResourceComponent } from '@/features/Resource/components/ResourceComponent';\nimport { TemplateComponent } from '@/libs/cocos/components/TemplateComponent';\nimport { updateNodeLayout } from '@/libs/cocos/helpers/updateNodeLayout';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { Label, Node, Sprite } from 'cc';\nimport { computed } from 'vendors/mobx';\n\nexport interface IResourceCardProps extends IResourceProps {\n\n}\n\n@ccclass('ResourceCard')\nexport class ResourceCard extends ResourceComponent implements TemplateComponent {\n    static template: TResourceTemplate = 'ResourceCard';\n\n    @computed\n    get color() {\n        if (this.count < 0) {\n            return ResourceComponent.NEGATIVE_COLOR;\n        }\n\n        if (this.count > 0) {\n            return ResourceComponent.NEUTRAL_COLOR;\n        }\n\n        return ResourceComponent.POSITIVE_COLOR;\n    }\n\n    render() {\n        super.render();\n\n        const labelBgSprite = this.label.node.parent?.getComponent(Sprite);\n\n        if (labelBgSprite) {\n            labelBgSprite.color = this.color;\n        }\n\n        updateNodeLayout(this);\n    }\n}\n","import { assets } from '@/features/Assets/data/assets';\nimport { EResource } from '@/features/Resource/data/EResource';\nimport { ResourcesDB } from '@/features/Resource/data/ResourcesDB';\nimport { UiLabel } from '@/features/Ui/components/UiLabel';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { toCocosEnum } from '@/libs/cocos/helpers/toCocosEnum';\nimport { property } from '@/libs/decorators/cocos';\nimport { Color, Label, Sprite } from 'cc';\nimport { action, computed, observable } from 'vendors/mobx';\n\nexport interface IResourceProps {\n    resource: EResource;\n    count: number;\n}\n\nexport class ResourceComponent extends Observer {\n    static NEGATIVE_COLOR = new Color(219, 84, 97);\n    static POSITIVE_COLOR = new Color(0, 177, 134);\n    static NEUTRAL_COLOR = new Color(224, 202, 60);\n\n    @property(Label)\n    label: Label;\n\n    @property(UiLabel)\n    title?: UiLabel;\n\n    @property(Sprite)\n    sprite: Sprite;\n\n    @property({ type: toCocosEnum(EResource) })\n    @observable resource: string = '';\n\n    @property\n    @observable count: number = 0;\n\n    get resourceKey(): EResource | null {\n        if (this.resource) {\n            return this.resource as EResource;\n        }\n\n        return null;\n    }\n\n    @computed\n    get spriteFrame() {\n        if (!this.resourceKey) {\n            return null;\n        }\n\n        const resourceDb = ResourcesDB[this.resourceKey];\n\n        return assets.getSprites(resourceDb.icon);\n    }\n\n    @computed\n    get str() {\n        if (this.count > 0) {\n            return `+${this.count}`;\n        }\n\n        return `${this.count}`;\n    }\n\n    @action.bound\n    initialize({ resource, count }: IResourceProps) {\n        this.resource = resource;\n        this.count = count;\n    }\n\n    @computed\n    get titleStr() {\n        if (!this.resourceKey) {\n            return '';\n        }\n\n        return ResourcesDB[this.resourceKey].title;\n    }\n\n    render() {\n        this.sprite.spriteFrame = this.spriteFrame;\n        this.label.string = this.str;\n\n        if (this.title) {\n            this.title.string = this.titleStr;\n        }\n    }\n}\n","import { EResource } from '@/features/Resource/data/EResource';\n\ninterface IResourceDb {\n    title: string;\n    icon: TResourceSprite;\n}\n\nexport const ResourcesDB: Record<EResource, IResourceDb> = {\n    [EResource.Log]: {\n        title: 'Logs',\n        icon: 'Log_128',\n    },\n    [EResource.Plank]: {\n        title: 'Planks',\n        icon: 'Plank_128',\n    },\n    [EResource.Stone]: {\n        title: 'Stones',\n        icon: 'Stone_128',\n    },\n};\n","import { AbstractRoute } from '@/routes/AbstractRoute/AbstractRoute';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { ResourcesScreen } from '@/routes/ResourcesRoute/components/ResourcesScreen';\n\nexport interface IResourcesRouteOptions { }\n\nexport class ResourcesRoute extends AbstractRoute<IResourcesRouteOptions> implements IResourcesRouteOptions {\n    readonly name = ERouteName.Resources;\n    readonly screen = ResourcesScreen;\n\n    serialize(): IResourcesRouteOptions {\n        return {};\n    }\n}\n","import { IResourceCardProps, ResourceCard } from '@/features/Resource/components/ResourceCard';\nimport { EResource } from '@/features/Resource/data/EResource';\nimport { factoryTemplateComponent } from '@/libs/cocos/helpers/factoryTemplateComponent';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { AbstractScreen } from '@/routes/AbstractRoute/components/AbstractScreen';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { ResourcesRoute } from '@/routes/ResourcesRoute/ResourcesRoute';\nimport { router } from '@/routes/router';\nimport { state } from '@/states/state';\nimport { IReactionDisposer, action, observable, reaction } from 'vendors/mobx';\nimport { Node, UITransform } from 'cc';\n\nconst DEFAULT_CARD_HEIGHT = 148;\nconst PADDING_DIFF = 2 * 16 + 2 * 16;\n\n@ccclass('ResourcesScreen')\nexport class ResourcesScreen extends AbstractScreen<ResourcesRoute> {\n    static template: TResourceTemplate = 'ResourcesScreen';\n\n    readonly routeName = ERouteName.Resources;\n\n    @property(Node)\n    resourcesNode: Node;\n\n    @property(UITransform)\n    resourcesWrapperTransform: UITransform;\n\n    @observable.shallow\n    resourceCards: ResourceCard[] = [];\n\n    protected disposeResourcesListen: IReactionDisposer;\n\n    @action.bound\n    render() {\n        this.resourcesNode.removeAllChildren();\n\n        const { resources } = state.resourcesState;\n\n        this.resourceCards = Object.entries(resources).sort(([,a], [,b]) => a - b).map(([resource, count]) => {\n            const card = factoryTemplateComponent<IResourceCardProps, ResourceCard>(ResourceCard, this.resourcesNode, {\n                resource: resource as EResource,\n                count,\n            });\n\n            return card;\n        });\n\n        const dimension = this.resourceCards[0].node.getComponent(UITransform)?.height ?? DEFAULT_CARD_HEIGHT;\n\n        this.resourcesWrapperTransform.height =\n            Math.ceil(this.resourceCards.length / Math.floor(this.resourcesWrapperTransform.width / dimension)) *\n                dimension +\n            PADDING_DIFF;\n    }\n\n    onCancelClick() {\n        const isNavigated = router.navigateBack();\n\n        if (!isNavigated) {\n            router.navigate(ERouteName.World);\n        }\n    }\n}\n","import { EResource } from '@/features/Resource/data/EResource';\n\nexport const ResourcesStart: Partial<Record<EResource, number>> = {\n    [EResource.Log]: 0,\n};\n","import { BuildingsDB } from '@/features/Building/data/BuildingsDB';\nimport { EResource } from '@/features/Resource/data/EResource';\nimport { ResourcesStart } from '@/features/Resource/data/ResourcesStart';\nimport { AbstractState } from '@/states/AbstractState/AbstractState';\nimport { computed } from 'vendors/mobx';\n\ntype IResourceReason = [EResource, number];\n\nexport interface IResourcesState {}\n\nexport class ResourcesState extends AbstractState<IResourcesState> {\n    @computed\n    get resources() {\n        const resources: Partial<Record<EResource, number>> = {\n            ...ResourcesStart,\n        };\n\n        const applyReasons = (reasons: IResourceReason[]) => {\n            for (const [resource, value] of reasons) {\n                resources[resource] = (resources[resource] || 0) + value;\n            }\n        };\n\n        applyReasons(this.resourcesFromBuildings);\n        applyReasons(this.priceFromBuildQueue);\n\n        return resources;\n    }\n\n    @computed\n    get resourcesFromBuildings() {\n        const { worldState } = this.state;\n\n        return worldState.activeBuildings.reduce<IResourceReason[]>((result, building) => {\n            const {buildingDb} = building;\n\n            for (const [resource, value] of Object.entries(buildingDb.resources)) {\n                result.push([resource as EResource, value] as const);\n            }\n\n            return result;\n        }, []);\n    }\n\n    @computed\n    get priceFromBuildQueue() {\n        const { worldState } = this.state;\n\n        return worldState.buildQueue.reduce<IResourceReason[]>((result, building) => {\n            const { buildingDb } = building;\n\n            for (const [resource, value] of Object.entries(buildingDb.buildOptions!.price)) {\n                result.push([resource as EResource, value] as const);\n            }\n\n            return result;\n        }, []);\n    }\n\n    serialize(): IResourcesState {\n        return {};\n    }\n\n    override initialize(data: IResourcesState) {\n        return super.initialize(data);\n    }\n}\n","import { action, computed, makeObservable, observable } from 'vendors/mobx';\nimport type { IWorldRouteOptions } from '@/routes/WorldRoute/WorldRoute';\nimport { WorldRoute } from '@/routes/WorldRoute/WorldRoute';\nimport { IPauseRouteOptions, PauseRoute } from '@/routes/PauseRoute/PauseRoute';\nimport { AbstractRoute } from '@/routes/AbstractRoute/AbstractRoute';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { BuildRoute, IBuildRouteOptions } from '@/routes/BuildRoute/BuildRoute';\nimport { IResourcesRouteOptions, ResourcesRoute } from '@/routes/ResourcesRoute/ResourcesRoute';\n\nconst MAX_HISTORY_LENGTH = 10;\nconst NAVIGATION_DEBOUNCE = 200;\n\nconst routes: Record<ERouteName, { new (): AbstractRoute<unknown> }> = {\n    [ERouteName.World]: WorldRoute,\n    [ERouteName.Pause]: PauseRoute,\n    [ERouteName.Build]: BuildRoute,\n    [ERouteName.Resources]: ResourcesRoute,\n};\n\nclass Router {\n    private history: { route: ERouteName; options?: unknown }[] = [{ route: ERouteName.Pause }];\n\n    constructor() {\n        makeObservable(this);\n    }\n\n    @computed\n    get routeName() {\n        return this.route.name;\n    }\n\n    // default route is Pause\n    @observable route: AbstractRoute<unknown> = new PauseRoute().initialize({ isIntro: true });\n\n    private navigateTimeout: NodeJS.Timeout | null = null;\n\n    navigate(route: ERouteName.Build, options?: IBuildRouteOptions): void;\n    navigate(route: ERouteName.Pause, options?: IPauseRouteOptions): void;\n    navigate(route: ERouteName.World, options?: IWorldRouteOptions): void;\n    navigate(route: ERouteName.Resources, options?: IResourcesRouteOptions): void;\n    navigate(route: ERouteName, options: unknown, navigateOptions: { back?: boolean }): void;\n    navigate(route: ERouteName, options: unknown, navigateOptions?: { back?: boolean }) {\n        if (this.navigateTimeout) {\n            clearTimeout(this.navigateTimeout);\n            this.navigateTimeout = null;\n        }\n\n        this.navigateTimeout = setTimeout(\n            action(() => {\n                if (!navigateOptions?.back && this.history.length) {\n                    this.history[this.history.length - 1].options = this.route.serialize();\n                }\n\n                this.route.destroy();\n\n                const Route = routes[route];\n                this.route = new Route().initialize(options);\n\n                if (navigateOptions?.back) {\n                    this.history.pop();\n                } else {\n                    const historyLength = this.history.push({ route, options });\n\n                    if (historyLength > MAX_HISTORY_LENGTH) {\n                        this.history = this.history.slice(MAX_HISTORY_LENGTH - historyLength);\n                    }\n                }\n\n                this.navigateTimeout = null;\n            }),\n            NAVIGATION_DEBOUNCE,\n        );\n    }\n\n    navigateBack() {\n        const record = this.history[this.history.length - 2];\n\n        if (!record) {\n            return false;\n        }\n\n        this.navigate(record.route, record.options, { back: true });\n\n        return true;\n    }\n\n    getRoute<T extends AbstractRoute>(name: ERouteName): T | null {\n        if (this.routeName === name) {\n            return this.route as T;\n        }\n\n        return null;\n    }\n}\n\nexport const router = new Router();\n","export class Semaphore {\n    maxConcurrency: number;\n\n    currentConcurrency = 0;\n\n    queue: (() => void)[] = [];\n\n    constructor(maxConcurrency = 1) {\n        this.maxConcurrency = maxConcurrency;\n    }\n\n    async acquire() {\n        if (this.currentConcurrency < this.maxConcurrency) {\n            this.currentConcurrency++;\n\n            return;\n        }\n\n        return new Promise<void>((resolve) => {\n            this.queue.push(resolve);\n        });\n    }\n\n    release() {\n        this.currentConcurrency--;\n\n        if (this.queue.length > 0) {\n            const resolve = this.queue.shift();\n\n            this.currentConcurrency++;\n\n            resolve?.();\n        }\n    }\n\n    async execute<T>(task: () => Promise<T>) {\n        await this.acquire();\n\n        try {\n            return await task();\n        } finally {\n            this.release();\n        }\n    }\n}\n","import { Node } from 'cc';\n\nexport function setNodeLayer(node: Node, layer: number, { deep = true }: { deep?: boolean } = {}) {\n    node.layer = layer;\n\n    if (deep) {\n        node.children.forEach((node) => setNodeLayer(node, layer, { deep }));\n    }\n}\n","import type { IVec3Like } from 'cc';\nimport { Vec3 } from 'cc';\nimport { WORLD_CENTER } from '@/features/World/data/consts';\n\nexport function sortCoords<T extends IVec3Like>(coords: T[]) {\n    return coords.slice().sort((a, b) => Vec3.distance(a, WORLD_CENTER) - Vec3.distance(b, WORLD_CENTER));\n}\n","import { GameState } from '@/states/GameState/GameState';\n\nexport const state = new GameState({\n    turnState: {},\n    worldState: {},\n    resourcesState: {},\n});\n","export abstract class TemplateComponent {\n    static template: TResourceTemplate;\n}\n","import { Vec3 } from 'cc';\nimport { action, computed, observable } from 'vendors/mobx';\nimport type { TBiomeObjectProps } from '@/features/Biome/components/BiomeObject';\nimport { BiomeObject } from '@/features/Biome/components/BiomeObject';\nimport type { TBiomeTileProps } from '@/features/Biome/components/BiomeTile';\nimport { BiomeTile } from '@/features/Biome/components/BiomeTile';\nimport { biomeTiles } from '@/features/Biome/data/biomeTiles';\nimport type { IBuildingProps } from '@/features/Building/components/Building';\nimport { Building } from '@/features/Building/components/Building';\nimport type { Chunk } from '@/features/Chunk/components/Chunk';\nimport type { ITileTestProps } from '@/features/Tile/components/TileTest';\nimport { TileTest } from '@/features/Tile/components/TileTest';\nimport { TILE_HEIGHT_MULTIPLIER } from '@/features/Tile/data/consts';\nimport type { ITileData } from '@/features/Tile/types/ITileData';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { factoryComponent } from '@/libs/cocos/helpers/factoryComponent';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport type { HexagonTile } from '@/libs/hexagon/HexagonTile';\nimport { getBuildRoute } from '@/routes/BuildRoute/helpers/getBuildRoute';\nimport { toVec3 } from '@/libs/math/toVec3';\nimport { BuildingPreview } from '@/features/Building/components/BuildingPreview';\nimport { state } from '@/states/state';\n\nexport interface ITileProps {\n    coords: Vec3;\n    data: ITileData;\n    chunk: Chunk;\n}\n\n@ccclass('Tile')\nexport class Tile extends Observer {\n    hex: HexagonTile<Tile>;\n\n    chunk: Chunk;\n\n    @observable data: ITileData;\n\n    tileTest?: TileTest;\n    biomeTile?: BiomeTile;\n    buildingPreview?: BuildingPreview;\n    building?: Building;\n    biomeObject?: BiomeObject;\n\n    @computed\n    get neighborsTiles() {\n        return this.hex.neighbors.reduce<Tile[]>((result, coords) => {\n            const { tilesMap } = state.worldState;\n\n            const hex = tilesMap.get(coords);\n\n            if (hex) {\n                result.push(hex.self)\n            }\n\n            return result;\n        }, []);\n    }\n\n    @cached\n    get groundY() {\n        return this.data.height * TILE_HEIGHT_MULTIPLIER + 1;\n    }\n\n    @cached\n    get biomeTileComponent() {\n        return (this.data.biomeTile && biomeTiles[this.data.biomeTile.key]) || BiomeTile;\n    }\n\n    @computed\n    get previewBuilding() {\n        const route = getBuildRoute();\n\n        if (route?.buildingTile === this) {\n            return route.buildingData;\n        }\n\n        return null;\n    }\n\n    @action.bound\n    initialize({ coords, chunk, data }: ITileProps) {\n        const { tilesMap } = state.worldState;\n\n        this.chunk = chunk;\n        this.data = data;\n        this.hex = tilesMap.add(coords, this);\n    }\n\n    @action.bound\n    onTap() {\n        if (this.tileTest?.isActive) {\n            const route = getBuildRoute();\n\n            if (route) {\n                route.buildingCoords = toVec3(this.data.coords);\n            }\n\n            return;\n        }\n\n        if (this.previewBuilding) {\n            const route = getBuildRoute();\n\n            if (route) {\n                route.buildingRotate = ((route.buildingRotate || 0) + 60) % 360;\n            }\n\n            return;\n        }\n    }\n\n    private renderBiomeTile() {\n        const props: TBiomeTileProps = {\n            tile: this,\n            data: this.data.biomeTile,\n            onTap: this.onTap,\n        };\n\n        if (this.biomeTile && !(this.biomeTile instanceof this.biomeTileComponent)) {\n            (this.biomeTile as BiomeTile).node.destroy();\n\n            this.biomeTile = undefined;\n        }\n\n        if (!this.biomeTile) {\n            this.biomeTile = factoryComponent(this.biomeTileComponent, this.node, props);\n        } else {\n            this.biomeTile.initialize(props)\n        }\n    }\n\n    private renderBuildingPreview() {\n        if (this.previewBuilding) {\n            const props: IBuildingProps = {\n                tile: this,\n                onTap: this.onTap,\n                data: this.previewBuilding,\n            };\n\n            if (!this.buildingPreview) {\n                this.buildingPreview = factoryComponent(BuildingPreview, this.node, props);\n            } else {\n                this.buildingPreview.initialize(props);\n            }\n        } else {\n            if (this.buildingPreview) {\n                this.buildingPreview.node.destroy();\n                this.buildingPreview = undefined;\n            }\n        }\n    }\n\n    private renderBuilding() {\n        if (this.data.building) {\n            const props: IBuildingProps = {\n                data: this.data.building,\n                tile: this,\n                onTap: this.onTap,\n            };\n\n            if (!this.building) {\n                this.building = factoryComponent(Building, this.node, props);\n            } else {\n                this.building.initialize(props)\n            }\n        } else {\n            if (this.building) {\n                this.building.node.destroy();\n                this.building = undefined;\n            }\n        }\n    }\n\n    private renderBiomeObject() {\n        if (this.data.biomeObject) {\n            const props: TBiomeObjectProps = {\n                data: this.data.biomeObject,\n                tile: this,\n                onTap: this.onTap,\n            };\n\n            if (!this.biomeObject) {\n                this.biomeObject = factoryComponent(BiomeObject, this.node, props)\n            } else {\n                this.biomeObject.initialize(props);\n            }\n        } else {\n            if (this.biomeObject) {\n                this.biomeObject.node.destroy();\n                this.biomeObject = undefined;\n            }\n        }\n    }\n\n    private renderTileTest() {\n        if (!this.tileTest) {\n            this.tileTest = factoryComponent<ITileTestProps, TileTest>(TileTest, this.node, {\n                tile: this,\n            });\n        }\n    }\n\n    render() {\n        this.renderBiomeTile();\n        this.renderBuildingPreview();\n        this.renderBuilding();\n        this.renderBiomeObject();\n        this.renderTileTest();\n    }\n\n    onLoad() {\n        this.node.setWorldPosition(new Vec3(this.hex.positionX, 0, this.hex.positionZ));\n    }\n}\n","import { EBiomeObject } from '@/features/Biome/data/EBiome';\nimport { Tile } from '@/features/Tile/components/Tile';\n\nexport function tileHasBiomeObjects(tile: Tile, biomes: EBiomeObject[]) {\n    const { data } = tile;\n\n    return data.biomeObject && biomes.includes(data.biomeObject.key);\n}\n","import { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { Tile } from '@/features/Tile/components/Tile';\n\nexport function tileHasBiomeTiles(tile: Tile, biomes: EBiomeTile[]) {\n    const { data } = tile;\n\n    return data.biomeTile && biomes.includes(data.biomeTile.key);\n}\n","import { EBiomeTile } from '@/features/Biome/data/EBiome';\nimport { tileHasBiomeTiles } from '@/features/Tile/helpers/tileHasBiomeTiles';\nimport { Tile } from '@/features/Tile/components/Tile';\n\nexport function tileNotWater(tile: Tile) {\n    return !tile.data.biomeTile || !tileHasBiomeTiles(tile, [EBiomeTile.River, EBiomeTile.Sea, EBiomeTile.Lake]);\n}\n","import type { Node } from 'cc';\nimport { Vec3 } from 'cc';\nimport { computed } from 'vendors/mobx';\nimport type { Tile } from '@/features/Tile/components/Tile';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { createPrefabNode } from '@/libs/cocos/helpers/createPrefabNode';\nimport { ccclass } from '@/libs/decorators/cocos';\nimport { assets } from '@/features/Assets/data/assets';\nimport { getBuildRoute } from '@/routes/BuildRoute/helpers/getBuildRoute';\n\nexport interface ITileTestProps {\n    tile: Tile;\n}\n\nconst SCALE = new Vec3(0.96, 1, 0.96);\n\n@ccclass('TileTest')\nexport class TileTest extends Observer {\n    tile: Tile;\n\n    testNode: Node | null;\n\n    @computed\n    get isActive() {\n        const page = getBuildRoute();\n\n        return Boolean(page && !page.buildingCoords && page.buildingDb?.tileTest?.(this.tile));\n    }\n\n    initialize({ tile }: ITileTestProps) {\n        this.tile = tile;\n    }\n\n    render() {\n        if (this.testNode) {\n            this.testNode.active = Boolean(this.isActive);\n        }\n    }\n\n    onLoad() {\n        const prefab = assets.getPrefabs('hex_plane');\n        const material = assets.getMaterials('ui-white-50');\n\n        this.testNode = createPrefabNode(prefab, {\n            parent: this.node,\n            materials: [material],\n            scale: SCALE,\n            position: new Vec3(0, this.tile.groundY + 0.01, 0),\n        });\n\n        this.testNode.active = false;\n    }\n}\n","import { Tile } from '@/features/Tile/components/Tile';\n\nexport function tileWithoutObject(tile: Tile) {\n    const { data } = tile;\n\n    return (\n        !data.building &&\n        !data.biomeObject\n    );\n}\n","type TEnum<T = string> = {\n    [id: string]: T | string;\n    [nu: number]: string;\n};\n\ntype TCCEnumProp<T> = { name: string; value: T };\n\ntype TCCEnum<T = number> = {\n    __enums__: TCCEnumProp<T>[];\n} & {\n    [key: string]: T;\n};\n\nexport function toCocosEnum<T extends TEnum>(enumValue: T) {\n    const newEnum: TCCEnum<string> = {\n        __enums__: [],\n    } as unknown as TCCEnum<string>;\n\n    Object.keys(enumValue).forEach((key) => {\n        const value = enumValue[key];\n\n        newEnum[key] = value;\n\n        newEnum.__enums__.push({ name: key, value });\n    });\n\n    return newEnum;\n}\n","export function toFixedNumber(num: number, digits: number, base = 10) {\n    const pow = base ** digits;\n\n    return Math.round(num * pow) / pow;\n}\n","import type { IVec3Like } from 'cc';\nimport { Quat } from 'cc';\n\nexport function toQuat(rotation: IVec3Like) {\n    return Quat.fromEuler(new Quat(), rotation.x, rotation.y, rotation.z);\n}\n","import type { IVec3Like } from 'cc';\nimport { Vec3 } from 'cc';\n\nexport function toVec3(vec: IVec3Like): Vec3 {\n    return new Vec3(vec.x, vec.y, vec.z);\n}\n","import { i18n } from '@/libs/i18n/i18n';\nimport { AbstractState } from '@/states/AbstractState/AbstractState';\nimport { MONTHS, START_MONTH, START_YEAR, YEAR_LENGTH } from '@/states/TurnState/data/consts';\nimport { action, computed, observable } from 'vendors/mobx';\n\nexport interface ITurnState {\n    turn?: number;\n}\n\nexport class TurnState extends AbstractState<ITurnState> {\n    @observable turn: number = 0;\n\n    @computed\n    get month() {\n        return (START_MONTH + this.turn) % YEAR_LENGTH;\n    }\n\n    @computed\n    get year() {\n        return START_YEAR + Math.floor((START_MONTH + this.turn) / YEAR_LENGTH);\n    }\n\n    @computed\n    get date() {\n        return `${i18n(MONTHS[this.month])} ${this.year}`;\n    }\n\n    @action.bound\n    override initialize(data: ITurnState) {\n        const { turn } = data;\n\n        if (turn !== undefined) {\n            this.turn = turn;\n        }\n\n        return super.initialize(data)\n    }\n\n    serialize(): ITurnState {\n        return {\n            turn: this.turn,\n        };\n    }\n}\n","import { Size, sys, Widget, Node } from 'cc';\nimport { Camera, ResolutionPolicy, screen, view } from 'cc';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { listen } from '@/libs/helpers/listen';\n\n@ccclass('Ui')\nexport class Ui extends Observer {\n    @property\n    padding = 12;\n\n    @property(Node)\n    contentNode: Node;\n\n    disposeListenResolution: () => void;\n\n    size: Size = new Size(720, 1600);\n\n    __preload() {\n        this.updateResolution();\n\n        this.disposeListenResolution = listen(() => {\n            screen.on('window-resize', this.updateResolution, this);\n\n            return () => {\n                screen.off('window-resize', this.updateResolution, this);\n            };\n        });\n\n        this.updateSafearea();\n\n        super.__preload();\n    }\n\n    updateResolution() {\n        const realSize = screen.windowSize;\n\n        const ratio = realSize.height / realSize.width;\n\n        const width = ratio > 1 ? this.size.width : Math.max(realSize.width, this.size.width);\n\n        const newSize = [width, Math.round(width * ratio)];\n\n        view.setDesignResolutionSize(newSize[0], newSize[1], ResolutionPolicy.FIXED_WIDTH);\n\n        const cameras = this.getComponentsInChildren(Camera);\n\n        for (const camera of cameras) {\n            camera.orthoHeight = newSize[1] / 2;\n\n            if (camera.targetTexture) {\n                camera.targetTexture.reset({ width: newSize[0], height: newSize[1] });\n            }\n        }\n    }\n\n    updateSafearea() {\n        const widget = this.contentNode?.getComponent(Widget);\n\n        if (widget) {\n            const safeArea = sys.getSafeAreaRect();\n            const { width: screenWidth, height: screenHeight } = view.getVisibleSize();\n\n            widget.top = this.padding + (Math.floor(screenHeight - safeArea.y - safeArea.height) || this.padding);\n            widget.bottom = this.padding + (safeArea.y || this.padding);\n            widget.left = this.padding + (safeArea.x || this.padding);\n            widget.right = this.padding + (Math.floor(screenWidth - safeArea.x - safeArea.width) || this.padding);\n            widget.updateAlignment();\n        }\n    }\n}\n","import { BUTTON_TRANSITION_SCALE, BUTTON_TRANSITION_TIME } from '@/features/Button/data/consts';\nimport { DiWorld } from '@/features/Di/components/DiWorld';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { EEventName } from '@/libs/cocos/data/EEventName';\nimport { ELayer } from '@/libs/cocos/data/ELayer';\nimport { ITapEvent } from '@/libs/cocos/types/ITapEvent';\nimport { bound } from '@/libs/decorators/bound';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { assets } from '@/features/Assets/data/assets';\nimport { BoxCollider, SpriteRenderer, tween, Vec3, Vec2 } from 'cc';\nimport { action, autorun, computed, IReactionDisposer, observable, reaction } from 'vendors/mobx';\n\nexport interface IUi3DProps {\n    sprite: TResourceSprite;\n    position?: Vec3;\n    rotation?: Vec3;\n    onTap?: (event: ITapEvent) => void;\n}\n\n@ccclass('Ui3D')\nexport class Ui3D extends Observer {\n    @property @observable sprite: TResourceSprite;\n\n    @property(Vec3) @observable.ref position?: Vec3;\n    @property(Vec3) @observable.ref rotation?: Vec3;\n\n    onTap?: (event: ITapEvent) => void;\n\n    @computed\n    protected get spriteFrame() {\n        return assets.getSprites(this.sprite);\n    }\n\n    spriteSize?: Vec2;\n\n    protected getSpriteSize(): Vec2 {\n        const result = new Vec2();\n\n        const bounds = this.spriteRenderer.model?.worldBounds;\n\n        if (bounds) {\n            const minVec = new Vec3();\n            const maxVec = new Vec3();\n\n            bounds.getBoundary(minVec, maxVec);\n\n            Vec2.subtract(result, new Vec2(maxVec.x, maxVec.y), new Vec2(minVec.x, minVec.y));\n        }\n\n        return result;\n    }\n\n    protected spriteRenderer: SpriteRenderer;\n    protected collider: BoxCollider;\n    protected disposeTweenScale: (() => void) | null = null;\n\n    @action.bound\n    initialize({ sprite, onTap, position, rotation }: IUi3DProps) {\n        this.sprite = sprite;\n        this.onTap = onTap;\n        this.position = position;\n        this.rotation = rotation;\n    }\n\n    @bound\n    onClick(event: ITapEvent) {\n        this.disposeTweenScale?.();\n\n        const { scale } = this.node;\n\n        const tweenScale = tween(this.node)\n            .to(BUTTON_TRANSITION_TIME, { scale: scale.clone().multiplyScalar(BUTTON_TRANSITION_SCALE) })\n            .to(BUTTON_TRANSITION_TIME, { scale: scale.clone() })\n            .call(() => {\n                this.disposeTweenScale = null;\n            })\n            .start();\n\n        this.disposeTweenScale = () => {\n            tweenScale.stop();\n\n            this.disposeTweenScale = null;\n\n            this.node.setScale(scale.clone());\n        };\n\n        this.onTap?.(event);\n    }\n\n    disposeSpriteChange?: IReactionDisposer;\n    disposeCameraListen?: IReactionDisposer;\n\n    onLoad() {\n        const spriteMaterial = assets.getMaterials('ui-sprite');\n\n        this.spriteRenderer = this.node.addComponent(SpriteRenderer);\n\n        this.spriteRenderer.setSharedMaterial(spriteMaterial, 0);\n        this.spriteRenderer.spriteFrame = this.spriteFrame;\n        this.spriteSize = this.getSpriteSize();\n\n        this.collider = this.node.addComponent(BoxCollider);\n        this.collider.size = new Vec3(this.spriteSize.x, this.spriteSize.y, 0.01);\n        this.collider.isTrigger = true;\n\n        this.node.layer = ELayer.UI_3D;\n\n        this.node.on(EEventName.Tap, this.onClick);\n\n        this.disposeSpriteChange = reaction(() => this.spriteFrame, (spriteFrame) => {\n            const rotation = this.node.eulerAngles.clone();\n\n            this.node.setRotationFromEuler(new Vec3(0, 0, 0));\n\n            this.spriteRenderer.spriteFrame = spriteFrame;\n            this.spriteSize = this.getSpriteSize();\n            this.collider.size = new Vec3(this.spriteSize.x, this.spriteSize.y, 0.01);\n\n            this.node.setRotationFromEuler(rotation);\n        });\n\n        this.disposeCameraListen = autorun(() => {\n            if (this.rotation) {\n                return;\n            }\n\n            const { worldCamera: camera } = DiWorld;\n\n            this.node.setRotationFromEuler(new Vec3(camera.cameraRotation?.x || 0, camera.targetRotation?.y || 0, camera.targetRotation?.z || 0));\n        });\n    }\n\n    render() {\n        if (this.position) {\n            this.node.setPosition(\n                !this.rotation ? this.position.clone().add3f(0, (this.spriteSize?.y || 0) * 0.75, 0) : this.position\n            );\n        }\n\n        if (this.rotation) {\n            this.node.setRotationFromEuler(this.rotation);\n        }\n    }\n}\n","import { ComponentPath } from '@/libs/cocos/components/ComponentPath';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { ccclass, property } from '@/libs/decorators/cocos';\n\n@ccclass('UiActive')\nexport class UiActive extends Observer {\n    @property(ComponentPath)\n    isActive: ComponentPath;\n\n    @property\n    isReversed = false;\n\n    render() {\n        let isActive = Boolean(this.isActive.exec());\n\n        if (this.isReversed) {\n            isActive = !isActive;\n        }\n\n        this.node.active = isActive;\n    }\n}\n","import { Observer } from '@/libs/cocos/components/Observer';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { tween } from 'cc';\n\n@ccclass('UiActiveAnimate')\nexport class UiActiveAnimate extends Observer {\n    @property\n    from = false;\n\n    @property\n    to = true;\n\n    @property\n    duration = 1;\n\n    @property\n    delay = 0;\n\n    onLoad() {\n        this.node.active = this.from;\n\n        tween(this.node)\n            .delay(this.delay)\n            .to(this.duration, {})\n            .call(() => (this.node.active = this.to))\n            .start();\n    }\n}\n","import { ELayer } from '@/libs/cocos/data/ELayer';\nimport { factoryChildNode } from '@/libs/cocos/helpers/factoryChildNode';\nimport { factorySprite } from '@/libs/cocos/helpers/factorySprite';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { assets } from '@/features/Assets/data/assets';\nimport { UITransform, Color, SpriteFrame, Widget, Component } from 'cc';\n\ninterface UiBackgroundProps {\n    startSprite: SpriteFrame;\n    endSprite: SpriteFrame;\n    width?: number;\n    height?: number;\n    color: Color;\n    isVertical?: boolean;\n    castShadow?: boolean;\n}\n\n@ccclass('UiBackground')\nexport class UiBackground extends Component implements UiBackgroundProps {\n    @property(SpriteFrame)\n    startSprite: SpriteFrame;\n\n    @property(SpriteFrame)\n    endSprite: SpriteFrame;\n\n    @property(Color)\n    color: Color = Color.WHITE.clone();\n\n    width?: number;\n\n    height?: number;\n\n    @property\n    isVertical = false;\n\n    @property\n    castShadow = false;\n\n    @cached\n    get uiTransform() {\n        return this.getComponent(UITransform);\n    }\n\n    get realWidth() {\n        return this.uiTransform?.width || this.width || 0;\n    }\n\n    get realHeight() {\n        return this.uiTransform?.height || this.height || 0;\n    }\n\n    addBackgroundChild(spriteFrame: SpriteFrame, options: { size: number; alignStart?: number; alignEnd?: number }) {\n        const { isVertical } = this;\n        const { size, alignStart, alignEnd } = options;\n\n        const node = factoryChildNode(this.node);\n\n        const uiTransform = node.addComponent(UITransform);\n\n        if (isVertical) {\n            uiTransform.width = this.realWidth;\n            uiTransform.height = size;\n        } else {\n            uiTransform.width = size;\n            uiTransform.height = this.realHeight;\n        }\n\n        const widget = node.addComponent(Widget);\n\n        if (isVertical) {\n            widget.isAlignLeft = true;\n            widget.isAlignRight = true;\n\n            widget.left = 0;\n            widget.right = 0;\n\n            if (alignStart !== undefined) {\n                widget.isAlignTop = true;\n                widget.top = alignStart;\n            }\n\n            if (alignEnd !== undefined) {\n                widget.isAlignBottom = true;\n                widget.bottom = alignEnd;\n            }\n        } else {\n            widget.isAlignTop = true;\n            widget.isAlignBottom = true;\n\n            widget.top = 0;\n            widget.bottom = 0;\n\n            if (alignStart !== undefined) {\n                widget.isAlignLeft = true;\n                widget.left = alignStart;\n            }\n\n            if (alignEnd !== undefined) {\n                widget.isAlignRight = true;\n                widget.right = alignEnd;\n            }\n        }\n\n        widget.updateAlignment();\n\n        factorySprite(node, spriteFrame, this.color);\n\n        return node;\n    }\n\n    onLoad() {\n        if (this.castShadow) {\n            this.node.layer = ELayer.UI_2D_SHADOW_CAST;\n        }\n\n        if (!this.getComponent(Widget)) {\n            const widget = this.node.addComponent(Widget);\n\n            widget.isAlignLeft = widget.isAlignRight = widget.isAlignBottom = widget.isAlignTop = true;\n            widget.left = widget.right = widget.bottom = widget.top = 0;\n            widget.updateAlignment();\n        }\n\n        const center = assets.getSprites('BgPixel');\n\n        const { startSprite, endSprite, realWidth, realHeight, isVertical } = this;\n\n        const startSize = isVertical ? startSprite.rect.height : startSprite.rect.width;\n        const endSize = isVertical ? endSprite.rect.height : endSprite.rect.width;\n        const realSize = isVertical ? realHeight : realWidth;\n\n        this.addBackgroundChild(startSprite, {\n            size: startSize,\n            alignStart: 0,\n        });\n\n        this.addBackgroundChild(center, {\n            size: Math.max(realSize - startSize - endSize, 0),\n            alignStart: startSize,\n            alignEnd: endSize,\n        });\n\n        this.addBackgroundChild(endSprite, {\n            size: endSize,\n            alignEnd: 0,\n        });\n    }\n\n    initialize(props: UiBackgroundProps) {\n        Object.assign(this, props);\n    }\n}\n","import { ccclass } from '@/libs/decorators/cocos';\nimport { i18n } from '@/libs/i18n/i18n';\nimport { Label } from 'cc';\n\n@ccclass('UiLabel')\nexport class UiLabel extends Label {\n    get string() {\n        return i18n(this._string);\n    }\n\n    set string(value: string) {\n        const set = Object.getOwnPropertyDescriptor(Label.prototype, 'string')?.set;\n\n        set?.call(this, value);\n    }\n}\n","import { Observer } from '@/libs/cocos/components/Observer';\nimport { cached } from '@/libs/decorators/cached';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { tween, TweenEasing, UIOpacity } from 'cc';\n\n@ccclass('UiOpacityAnimate')\nexport class UiOpacityAnimate extends Observer {\n    @property({ min: 0, max: 255 })\n    from = 0;\n\n    @property({ min: 0, max: 255 })\n    to = 255;\n\n    @property\n    duration = 1;\n\n    @property\n    delay = 0;\n\n    @property\n    easing: TweenEasing = 'cubicIn';\n\n    @property\n    once = true;\n\n    @cached\n    get opacityComponent() {\n        return this.getComponent(UIOpacity) || this.addComponent(UIOpacity);\n    }\n\n    animate(value: number) {\n        if (this.opacityComponent?.opacity !== value) {\n            return tween(this.opacityComponent)\n                .delay(this.delay)\n                .to(this.duration, { opacity: value }, { easing: this.easing });\n        }\n    }\n\n    hide() {\n        if (!this.once && this.opacityComponent) {\n            const animate = this.animate(this.from);\n\n            if (animate) {\n                animate.call(() => (this.node.active = false)).start();\n\n                return;\n            }\n        }\n\n        this.node.active = false;\n    }\n\n    onLoad() {\n        this.animate(this.to)?.start();\n    }\n\n    onEnable() {\n        if (!this.once && this.opacityComponent) {\n            this.animate(this.to)?.start();\n        }\n    }\n\n    onDisable() {\n        if (!this.once && this.opacityComponent) {\n            this.opacityComponent.opacity = this.from;\n        }\n    }\n}\n","import { Observer } from '@/libs/cocos/components/Observer';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { tween, TweenEasing, Vec3 } from 'cc';\n\n@ccclass('UiPositionAnimate')\nexport class UiPositionAnimate extends Observer {\n    @property(Vec3)\n    by: Vec3 = new Vec3(0, 0, 0);\n\n    @property\n    duration = 1;\n\n    @property\n    delay = 0;\n\n    @property\n    easing: TweenEasing = 'cubicIn';\n\n    onLoad() {\n        const pos = this.node.position.clone();\n\n        this.node.setPosition(pos.clone().add(this.by));\n\n        tween(this.node).to(this.duration, { position: pos }, { easing: this.easing }).start();\n    }\n}\n","import { waitForFrame } from '@/libs/async/waitForFrame';\nimport { getAllComponents } from '@/libs/cocos/helpers/getAllComponents';\nimport { Component, Layout, Widget } from 'cc';\n\nexport async function updateNodeLayout(component: Component) {\n    await waitForFrame();\n\n    if (!component.node || !component.node.activeInHierarchy) {\n        return;\n    }\n\n    getAllComponents(component.node, Layout).forEach((layout) => layout.updateLayout());\n    getAllComponents(component.node, Widget).forEach((widget) => widget.updateAlignment());\n}\n","export async function wait(timeout: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(() => resolve(), timeout));\n}\n","export function waitForFrame(frames = 1) {\n    return new Promise<void>((resolve) => {\n        let count = frames;\n\n        const onFrame = () => {\n            count--;\n\n            if (!count) {\n                resolve();\n            } else {\n                requestAnimationFrame(onFrame);\n            }\n        };\n\n        requestAnimationFrame(onFrame);\n    });\n}\n","import { EBiomeTile } from '@/features/Biome/data/EBiome';\n\nexport const waterTiles = [EBiomeTile.Lake, EBiomeTile.Sea];\n","import type { IChunkProps } from '@/features/Chunk/components/Chunk';\nimport { Chunk } from '@/features/Chunk/components/Chunk';\nimport { WORLD_CENTER } from '@/features/World/data/consts';\nimport { generateWorldCenterChunk } from '@/features/WorldGenerator/helpers/center/generateWorldCenterChunk';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { factoryComponent } from '@/libs/cocos/helpers/factoryComponent';\nimport { ccclass } from '@/libs/decorators/cocos';\n\n@ccclass('World')\nexport class World extends Observer {\n    onLoad() {\n        const { node } = this;\n\n        const centerChunk = generateWorldCenterChunk(WORLD_CENTER.clone());\n\n        const chunk = factoryComponent<IChunkProps, Chunk>(Chunk, node, {\n            coords: WORLD_CENTER.clone(),\n            data: centerChunk,\n        });\n\n        chunk.draw();\n    }\n}\n","import type { EventTouch, IVec2Like, IVec3Like } from 'cc';\nimport { Camera, Canvas, NodeEventType, PhysicsSystem, UITransform, Vec2 } from 'cc';\nimport type { IReactionDisposer } from 'vendors/mobx';\nimport { action, computed, observable, runInAction } from 'vendors/mobx';\nimport {\n    CAMERA_POSITION_OFFSET,\n    CAMERA_ROTATION_OFFSET,\n    DEFAULT_NAVIGATE_DURATION,\n    DOUBLE_TOUCH_TIME,\n    FIXED_POSITION_LIMIT,\n    FIXED_ROTATE_LIMIT,\n    IMPULSE_DURATION,\n    IMPULSE_LENGTH,\n    IMPULSE_STRENGTH,\n    LIMITS,\n    MAX_TOUCH_SIZE,\n    MOVE_DIVIDER,\n    MOVE_SAFEZONE,\n    ROTATE_SPEED,\n    TAP_MAX_MOVED_TIMES,\n    TAP_TIME,\n    TARGET_ROTATE_OFFSET,\n    ZOOM_MOVE_INFLUENCE,\n} from '@/features/WorldCamera/data/consts';\nimport { EMoveType } from '@/features/WorldCamera/data/EMoveType';\nimport { Observer } from '@/libs/cocos/components/Observer';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { isNumber } from '@/libs/helpers/isNumber';\nimport { listen } from '@/libs/helpers/listen';\nimport { clamp } from '@/libs/math/clamp';\nimport { degreeToRadian } from '@/libs/math/degreeToRadian';\nimport { easeOutSine } from '@/libs/math/easeOutSine';\nimport { fromQuat } from '@/libs/math/fromQuat';\nimport { fromVec3 } from '@/libs/math/fromVec3';\nimport { fromVec3ToVec2 } from '@/libs/math/fromVec3ToVec2';\nimport { toFixedNumber } from '@/libs/math/toFixedNumber';\nimport { toVec3 } from '@/libs/math/toVec3';\nimport { state } from '@/states/state';\n\ninterface IWorldCameraNavigator {\n    position?: IVec2Like;\n    rotation?: number;\n    zooming?: number;\n    time?: number;\n}\n\n@ccclass('WorldCamera')\nexport class WorldCamera extends Observer {\n    protected disposePageListen: IReactionDisposer;\n\n    @property(Canvas) canvas: Canvas;\n\n    @property(Camera) camera: Camera;\n\n    @computed get moveLimit() {\n        const { chunksMap } = state.worldState;\n\n        return {\n            x: [chunksMap.minX - MOVE_SAFEZONE, chunksMap.maxX + MOVE_SAFEZONE] as const,\n            z: [chunksMap.minZ - MOVE_SAFEZONE, chunksMap.maxZ + MOVE_SAFEZONE] as const,\n        };\n    }\n\n    @computed get moveType() {\n        if (this.touchCount === null) {\n            return EMoveType.Rotate;\n        }\n\n        if (!this.touchCount) {\n            if (this.navigateTo) {\n                return EMoveType.Navigate;\n            }\n\n            if (this.touchImpulse) {\n                return EMoveType.Impulse;\n            }\n\n            return null;\n        }\n\n        if (this.touchCount > 1) {\n            return EMoveType.TwoFinger;\n        }\n\n        if (this.touchTimes[0] && this.touchTimes[1] && this.touchTimes[1] - this.touchTimes[0] <= DOUBLE_TOUCH_TIME) {\n            return EMoveType.DoubleTouch;\n        }\n\n        return EMoveType.Default;\n    }\n\n    touchSize: number;\n\n    protected movedTimes = 0;\n\n    protected raycastTimer: number | null = null;\n\n    @observable protected touchCount: number | null = null;\n\n    @observable protected touchTimes: [number | null, number | null] = [null, null];\n\n    @observable protected touchImpulse: IVec2Like | false | null = null;\n\n    protected impulseDuration = 0;\n\n    @observable targetPosition: IVec3Like = { x: 0, y: 0, z: 0 };\n\n    @observable protected targetInitRotation: IVec3Like | null = null;\n\n    @observable protected cameraInitPosition: IVec3Like | null = null;\n\n    @observable protected cameraInitRotation: IVec3Like | null = null;\n\n    @observable zooming: number = 0;\n\n    @observable rotation: number = 0;\n\n    protected navigateDuration: number = 0;\n\n    protected navigateFrom: IWorldCameraNavigator | null = null;\n\n    @observable protected navigateTo: IWorldCameraNavigator | null = null;\n\n    @computed get targetRotation(): IVec3Like | null {\n        const init = this.targetInitRotation;\n\n        if (!init) {\n            return null;\n        }\n\n        const delta = toFixedNumber(this.rotation * TARGET_ROTATE_OFFSET, FIXED_ROTATE_LIMIT);\n\n        return {\n            x: init.x,\n            y: init.y + delta,\n            z: init.z,\n        };\n    }\n\n    @computed get cameraPosition(): IVec3Like | null {\n        const init = this.cameraInitPosition;\n\n        if (!init) {\n            return null;\n        }\n\n        const delta = toFixedNumber(this.zooming * CAMERA_POSITION_OFFSET, FIXED_POSITION_LIMIT);\n\n        return {\n            x: init.x,\n            y: init.y + delta,\n            z: init.z + delta,\n        };\n    }\n\n    @computed get cameraRotation() {\n        const init = this.cameraInitRotation;\n\n        if (!init) {\n            return null;\n        }\n\n        const delta = toFixedNumber(-this.zooming * CAMERA_ROTATION_OFFSET, FIXED_ROTATE_LIMIT);\n\n        return {\n            x: init.x + delta,\n            y: init.y,\n            z: init.z,\n        };\n    }\n\n    protected disposeTouchListen: () => void;\n\n    protected onLoad() {\n        this.init();\n\n        this.disposeTouchListen = listen(() => {\n            this.canvas.node.on(NodeEventType.TOUCH_START, this.onTouchStart);\n            this.canvas.node.on(NodeEventType.TOUCH_MOVE, this.onTouchMove);\n            this.canvas.node.on(NodeEventType.TOUCH_END, this.onTouchEnd);\n            this.canvas.node.on(NodeEventType.TOUCH_CANCEL, this.onTouchEnd);\n\n            return () => {\n                this.canvas.node.off(NodeEventType.TOUCH_START, this.onTouchStart);\n                this.canvas.node.off(NodeEventType.TOUCH_MOVE, this.onTouchMove);\n                this.canvas.node.off(NodeEventType.TOUCH_END, this.onTouchEnd);\n                this.canvas.node.off(NodeEventType.TOUCH_CANCEL, this.onTouchEnd);\n            };\n        });\n    }\n\n    @action.bound\n    protected init() {\n        this.initTarget();\n        this.cameraInitPosition = fromVec3(this.camera.node.getPosition());\n        this.cameraInitRotation = fromQuat(this.camera.node.getRotation());\n        this.targetInitRotation = fromQuat(this.node.getRotation());\n\n        const canvasDimensions = this.canvas.getComponent(UITransform);\n\n        if (!canvasDimensions) {\n            throw new Error('Passed bad canvas for WorldCamera');\n        }\n\n        this.touchSize = Math.min(canvasDimensions.width, canvasDimensions.height, MAX_TOUCH_SIZE);\n    }\n\n    @action.bound\n    protected initTarget() {\n        this.targetPosition = fromVec3(this.node.getPosition());\n    }\n\n    protected parseMoveDelta(delta: number) {\n        return delta / (this.touchSize / (MOVE_DIVIDER + ZOOM_MOVE_INFLUENCE * this.zooming));\n    }\n\n    @action.bound\n    move(targetX: number, targetY: number) {\n        const { moveLimit, targetPosition } = this;\n\n        targetPosition.x = clamp(toFixedNumber(targetX, FIXED_POSITION_LIMIT), moveLimit.x);\n        targetPosition.z = clamp(toFixedNumber(targetY, FIXED_POSITION_LIMIT), moveLimit.z);\n    }\n\n    moveBy(deltaX: number, deltaY: number) {\n        const { targetRotation, targetPosition } = this;\n\n        if (!targetRotation) {\n            return;\n        }\n\n        const moveVec = new Vec2(deltaX, deltaY).rotate(degreeToRadian(-targetRotation.y));\n\n        this.move(targetPosition.x + moveVec.x, targetPosition.z + moveVec.y);\n    }\n\n    @action.bound\n    zoom(zooming: number) {\n        this.zooming = clamp(zooming, LIMITS);\n    }\n\n    zoomBy(delta: number) {\n        this.zoom(this.zooming + delta);\n    }\n\n    @action.bound\n    rotate(rotation: number) {\n        this.rotation = rotation;\n\n        if (this.rotation < LIMITS[0]) {\n            this.rotation -= 2 * LIMITS[0];\n        }\n\n        if (this.rotation > LIMITS[1]) {\n            this.rotation -= 2 * LIMITS[1];\n        }\n    }\n\n    rotateBy(delta: number) {\n        this.rotate(this.rotation + delta);\n    }\n\n    @action.bound\n    protected onTouchStart(event: EventTouch) {\n        if (this.raycastTimer) {\n            clearTimeout(this.raycastTimer);\n            this.raycastTimer = null;\n        }\n\n        this.navigateFrom = null;\n        this.navigateTo = null;\n        this.navigateDuration = 0;\n\n        this.movedTimes = 0;\n        this.touchImpulse = null;\n        this.impulseDuration = 0;\n\n        if (!this.moveType) {\n            this.initTarget();\n        }\n\n        this.touchCount = Math.min(event.getAllTouches().length, 2);\n\n        if (this.touchCount === 1) {\n            this.touchTimes.push(Date.now());\n            this.touchTimes.splice(0, 1);\n        }\n    }\n\n    @action.bound\n    protected onTouchMove(event: EventTouch) {\n        this.movedTimes += 1;\n\n        const touches = event.getTouches();\n\n        if (this.moveType === EMoveType.Default) {\n            const [move] = touches;\n            const delta = move.getDelta();\n\n            const touchDelta = { x: this.parseMoveDelta(-delta.x), y: this.parseMoveDelta(delta.y) };\n\n            if (this.touchImpulse !== false) {\n                this.touchImpulse = Vec2.len(touchDelta) > IMPULSE_LENGTH ? touchDelta : null;\n            }\n\n            this.moveBy(touchDelta.x, touchDelta.y);\n        } else if (this.moveType === EMoveType.TwoFinger) {\n            if (touches.length < 2) {\n                return;\n            }\n\n            const [zoomA, zoomB] = touches;\n\n            const locationA = zoomA.getLocation();\n            const locationB = zoomB.getLocation();\n\n            const prevLocationA = zoomA.getPreviousLocation();\n            const prevLocationB = zoomB.getPreviousLocation();\n\n            const distance = Vec2.distance(locationA, locationB);\n            const prevDistance = Vec2.distance(prevLocationA, prevLocationB);\n\n            const sub = locationA.y > locationB.y ? locationA.subtract(locationB) : locationB.subtract(locationA);\n            const prevSub =\n                prevLocationA.y > prevLocationB.y\n                    ? prevLocationA.subtract(prevLocationB)\n                    : prevLocationB.subtract(prevLocationA);\n\n            const angle = sub.signAngle(prevSub);\n\n            this.touchImpulse = false;\n\n            const zoom = (prevDistance - distance) / this.touchSize;\n            const rotate = angle / Math.PI;\n\n            this.zoomBy(zoom);\n            this.rotateBy(rotate);\n        } else if (this.moveType === EMoveType.DoubleTouch) {\n            const [move] = touches;\n            const delta = move.getDelta();\n\n            this.touchImpulse = false;\n\n            const zoom = delta.y / this.touchSize;\n            const rotate = -delta.x / this.touchSize;\n\n            if (Math.abs(zoom) > Math.abs(rotate)) {\n                this.zoomBy(zoom);\n            } else {\n                this.rotateBy(rotate);\n            }\n        }\n    }\n\n    @action.bound\n    protected onTouchEnd(event: EventTouch) {\n        if (this.moveType === EMoveType.Rotate) {\n            return;\n        }\n\n        this.touchCount = Math.max(0, event.getAllTouches().length);\n\n        if (\n            this.movedTimes <= TAP_MAX_MOVED_TIMES &&\n            this.touchTimes[1] &&\n            Date.now() - this.touchTimes[1] <= TAP_TIME\n        ) {\n            const position = event.getLocation();\n\n            this.raycastTimer = setTimeout(() => {\n                this.raycast(position.x, position.y);\n            }, DOUBLE_TOUCH_TIME) as unknown as number;\n        }\n    }\n\n    raycast(x: number, y: number) {\n        const outRay = this.camera.screenPointToRay(x, y);\n\n        if (PhysicsSystem.instance.raycastClosest(outRay)) {\n            const { raycastClosestResult } = PhysicsSystem.instance;\n            const { hitPoint, hitNormal, collider, distance } = raycastClosestResult;\n\n            collider.node.emit('tap', { hitPoint, hitNormal, distance });\n        }\n    }\n\n    @action.bound\n    navigate(navigator: IWorldCameraNavigator) {\n        this.navigateDuration = 0;\n\n        this.navigateFrom = {\n            rotation: this.rotation,\n            zooming: this.zooming,\n            position: fromVec3ToVec2(this.targetPosition),\n        };\n\n        this.navigateTo = navigator;\n    }\n\n    render() {\n        if (!this.moveType) {\n            return;\n        }\n\n        const { node, camera, targetPosition, targetRotation, cameraPosition, cameraRotation } = this;\n\n        if (targetPosition) {\n            node.setPosition(toVec3(targetPosition));\n        }\n\n        if (targetRotation) {\n            node.setRotationFromEuler(targetRotation.x, targetRotation.y, targetRotation.z);\n        }\n\n        if (cameraPosition) {\n            camera.node.setPosition(toVec3(cameraPosition));\n        }\n\n        if (cameraRotation) {\n            camera.node.setRotationFromEuler(cameraRotation.x, cameraRotation.y, cameraRotation.z);\n        }\n    }\n\n    update(dt: number) {\n        if (this.moveType === EMoveType.Navigate) {\n            runInAction(() => {\n                const { navigateFrom, navigateTo } = this;\n\n                if (navigateFrom && navigateTo) {\n                    this.navigateDuration += dt;\n\n                    const navigateProgress = this.navigateDuration / (navigateTo.time || DEFAULT_NAVIGATE_DURATION);\n                    const progress = easeOutSine(navigateProgress);\n\n                    const wrap = (fromValue: number, toValue: number) => fromValue + progress * (toValue - fromValue);\n\n                    if (navigateTo.position && navigateFrom.position) {\n                        this.move(\n                            wrap(navigateFrom.position.x, navigateTo.position.x),\n                            wrap(navigateFrom.position.y, navigateTo.position.y),\n                        );\n                    }\n\n                    if (isNumber(navigateTo.rotation) && isNumber(navigateFrom.rotation)) {\n                        this.rotate(wrap(navigateFrom.rotation, navigateTo.rotation));\n                    }\n\n                    if (isNumber(navigateTo.zooming) && isNumber(navigateFrom.zooming)) {\n                        this.zoom(wrap(navigateFrom.zooming, navigateTo.zooming));\n                    }\n                } else {\n                    this.navigateFrom = null;\n                    this.navigateTo = null;\n                    this.navigateDuration = 0;\n                }\n            });\n        } else if (this.moveType === EMoveType.Impulse) {\n            runInAction(() => {\n                if (!this.touchImpulse) {\n                    return;\n                }\n\n                this.moveBy(IMPULSE_STRENGTH * this.touchImpulse.x, IMPULSE_STRENGTH * this.touchImpulse.y);\n\n                if (this.impulseDuration >= IMPULSE_DURATION) {\n                    this.touchImpulse = null;\n                    this.impulseDuration = 0;\n                } else {\n                    this.impulseDuration += dt;\n\n                    const impulseProgress = this.impulseDuration / IMPULSE_DURATION;\n                    const progress = 1 - easeOutSine(impulseProgress);\n\n                    this.touchImpulse.x *= progress;\n                    this.touchImpulse.y *= progress;\n                }\n            });\n        } else if (this.moveType === EMoveType.Rotate) {\n            this.rotateBy(dt / ROTATE_SPEED);\n        }\n    }\n}\n","import { WorldScreen } from '@/routes/WorldRoute/components/WorldScreen';\nimport { AbstractRoute } from '@/routes/AbstractRoute/AbstractRoute';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\n\nexport interface IWorldRouteOptions {}\n\nexport class WorldRoute extends AbstractRoute<IWorldRouteOptions> implements IWorldRouteOptions {\n    readonly name = ERouteName.World;\n    readonly screen = WorldScreen;\n\n    serialize(): IWorldRouteOptions {\n        return {};\n    }\n}\n","import { ccclass } from '@/libs/decorators/cocos';\nimport { AbstractScreen } from '@/routes/AbstractRoute/components/AbstractScreen';\nimport { ERouteName } from '@/routes/AbstractRoute/data/ERouteName';\nimport { router } from '@/routes/router';\nimport { WorldRoute } from '@/routes/WorldRoute/WorldRoute';\nimport { state } from '@/states/state';\nimport { action } from 'vendors/mobx';\n\n@ccclass('WorldScreen')\nexport class WorldScreen extends AbstractScreen<WorldRoute> {\n    static template: TResourceTemplate = 'WorldScreen';\n\n    readonly routeName = ERouteName.World;\n\n    @action.bound\n    onTurnClick() {\n        state.turnState.turn++;\n    }\n\n    onPauseClick() {\n        router.navigate(ERouteName.Pause);\n    }\n\n    onBuildClick() {\n        router.navigate(ERouteName.Build);\n    }\n\n    onResourcesClick() {\n        router.navigate(ERouteName.Resources);\n    }\n}\n","import { AbstractState } from '@/states/AbstractState/AbstractState';\nimport type { Tile } from '@/features/Tile/components/Tile';\nimport { HexagonMap } from '@/libs/hexagon/HexagonMap';\nimport { HexagonTile } from '@/libs/hexagon/HexagonTile';\nimport { HEX_OPTIONS } from '@/features/Hex/data/consts';\nimport { HexagonChunk } from '@/libs/hexagon/HexagonChunk';\nimport { Chunk } from '@/features/Chunk/components/Chunk';\nimport { action, computed, reaction } from 'vendors/mobx';\nimport { clamp } from '@/libs/math/clamp';\nimport { BUILD_PROGRESS_LIMITS, BUILD_PROGRESS_MAX } from '@/features/Building/data/consts';\nimport { EBuilding } from '@/features/Building/data/EBuilding';\nimport { Building } from '@/features/Building/components/Building';\n\nexport interface IWorldState {\n\n}\n\nexport class WorldState extends AbstractState<IWorldState> {\n    chunksMap = new HexagonMap(HexagonChunk<Chunk>, HEX_OPTIONS);\n    tilesMap = new HexagonMap(HexagonTile<Tile>, HEX_OPTIONS);\n\n    @computed\n    get buildings() {\n        return this.tilesMap.values.reduce<Building[]>((result, hex) => {\n            const { building } = hex.self;\n\n            if (building) {\n                result.push(building);\n            }\n\n            return result;\n        }, []);\n    }\n\n    @computed\n    get buildQueue() {\n        return this.buildings.filter(({ isConstructing }) => isConstructing);\n    }\n\n    @computed\n    get buildedBuildings() {\n        return this.buildings.filter(({ isConstructing }) => !isConstructing);\n    }\n\n    @computed\n    get activeBuildings() {\n        return this.buildedBuildings.filter(({ buildingData }) => !buildingData.isDisabled);\n    }\n\n    @computed\n    get buildedCount() {\n        return this.calculateBuildingsCount(this.buildedBuildings);\n    }\n\n    @computed\n    get buildQueueCount() {\n        return this.calculateBuildingsCount(this.buildQueue);\n    }\n\n    private calculateBuildingsCount(buildings: Building[]) {\n        return buildings.reduce<Partial<Record<EBuilding, number>>>((result, building) => {\n            result[building.buildingKey] = (result[building.buildingKey] || 0) + 1;\n\n            return result;\n        }, {});\n    }\n\n    disposeTurnListen = reaction(\n        () => this.state.turnState.turn,\n        action(() => {\n            for (const building of this.buildQueue) {\n                const { buildingData, constructionSpeed } = building;\n\n                buildingData.progress = clamp(buildingData.progress + constructionSpeed, BUILD_PROGRESS_LIMITS);\n            }\n        })\n    );\n\n    destroy() {\n        this.disposeTurnListen();\n    }\n\n    override initialize(data: IWorldState) {\n        return super.initialize(data);\n    }\n\n    serialize(): IWorldState {\n        return {};\n    }\n}\n","import { Component } from 'cc';\nimport { Node } from 'cc';\nimport { ccclass, property } from '@/libs/decorators/cocos';\nimport { router } from '@/routes/router';\nimport { Ui } from '@/features/Ui/components/Ui';\nimport { factoryTemplateComponent } from '@/libs/cocos/helpers/factoryTemplateComponent';\n\n@ccclass('WorldUi')\nexport class WorldUi extends Ui {\n    @property(Node)\n    overlayNode: Node;\n\n    @property(Node)\n    shadowNode: Node;\n\n    @property(Node)\n    headerNode: Node;\n\n    @property(Node)\n    bodyNode: Node;\n\n    @property(Component)\n    screen: Component | null;\n\n    updateUiOverlay() {\n        this.overlayNode.active = router.route.hasUiOverlay;\n    }\n\n    updateUiHeader() {\n        this.headerNode.active = router.route.hasUiHeader;\n    }\n\n    updateUiBody() {\n        const { screen: ScreenClass } = router.route;\n\n        if (!this.screen || !(this.screen instanceof ScreenClass)) {\n            this.screen?.node.destroy();\n\n            this.screen = factoryTemplateComponent(ScreenClass, this.bodyNode, {});\n        }\n    }\n\n    render() {\n        this.updateUiOverlay();\n        this.updateUiHeader();\n        this.updateUiBody();\n    }\n}\n"]}